// Title:           Infoblox parser for type - DNS-client
// Author:          Microsoft
// Version:         1.3
// Last Updated:    Sept 23 2022
// Comment:         Updated parser by replacing 'Regex' with 'Parse' operator.
//
// DESCRIPTION:
// This parser takes raw Infoblox NIOS logs from a Syslog stream and parses the logs into a normalized schema.
//
// REFERENCES: 
// Infoblox NIOS logging formats: https://docs.infoblox.com/space/NAG8/22252254/Capturing+DNS+Queries+and+Responses
//
// LOG SAMPLES:
// This parser assumes the raw log are formatted as follows:
// 
//      07-Apr-2013 20:16:49.083 client 10.120.20.198#57398 UDP: query: a2.foo.com IN A response: NOERROR +AED a2.foo.com. 28800 IN A 1.1.1.2;
//      30-Apr-2013 13:35:02.187 client 10.120.20.32#42386: query: foo.com IN A + (100.90.80.102)
//
// Update 'Sources_by_SourceType' Watchlist by adding names of your Infoblox NIOS servers. This Watchlist would get created as part Infoblox NIOS solution.
let datasource = (_GetWatchlist('Sources_by_SourceType')| where SearchKey == 'InfobloxNIOS' | project Source);
// Parse Response Logs
let response =
    Syslog
    | where Computer in (datasource)
    | where ProcessName == "named" and SyslogMessage has_all ("client", "query:", "response:")
    | parse SyslogMessage with *
        "client " SrcIpAddr: string
        "#" SrcPortNumber: int
        " " NetworkProtocol: string
        ": query: " DnsQuery: string
        " " DnsQueryClassName: string
        " " DnsQueryType: string
        " response: " DnsResponseCode: string
        " " DnsFlags: string
    | extend DnsResponseNameIndex= indexof(DnsFlags, " ")
    | extend EventMessage =iif(DnsResponseNameIndex != "-1", substring(DnsFlags, DnsResponseNameIndex+1), "")
    | extend DnsFlags =iif(DnsResponseNameIndex != "-1", substring(DnsFlags, 0, DnsResponseNameIndex), DnsFlags)
    | extend EventSubType = "response"
    | project-away DnsResponseNameIndex,SyslogMessage
    ;
//
// Parse Request Logs
//
let request =
    Syslog
    | where Computer in (datasource)
    | where ProcessName == "named"
        and SyslogMessage has_all ("client", "query:")
        and SyslogMessage !has "response:"
    | extend SyslogMessage = (split(SyslogMessage,"client "))[1]
    | extend SyslogMessage = iif(SyslogMessage startswith "@", (substring(SyslogMessage, indexof(SyslogMessage, " ")+1)), SyslogMessage)
    | extend SyslogMessage = replace_string(SyslogMessage,"\\ ","@@@")
    | parse SyslogMessage with 
        SrcIpAddr: string
        "#" SrcPortNumber: int *
        "query: " DnsQuery: string
        " " DnsQueryClassName: string
        " " DnsQueryType: string
        " " DnsFlags: string
    | extend DnsQuery = replace_string (DnsQuery, '@@@', ' ')
    | extend DnsFlags= tostring((split(DnsFlags," "))[0])
    | extend EventSubType = "request",DnsResponseCode = "NA"
    | project-away SyslogMessage
    ;
//
// Union Request and Response Logs
//
let Infoblox_NIOS_ParsedData =
    union response, request
    | extend
        EventProduct="NIOS",
        EventVendor="Infoblox",
        EventType="Query",
        EventResult=iff(EventSubType=="request" or DnsResponseCode=="NOERROR","Success","Failure"),
        Log_Type="client",
        responseTime=EventTime;
Infoblox_NIOS_ParsedData