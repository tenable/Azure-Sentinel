{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "workspace": {
            "type": "string",
            "defaultValue": ""
        }
    },
    "resources": [
        {
            "id": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.OperationalInsights/workspaces/',parameters('workspace'),'/providers/Microsoft.SecurityInsights/dataConnectors/',guid(subscription().subscriptionId))]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',guid(subscription().subscriptionId))]",
            "apiVersion": "2021-03-01-preview",
            "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
	"kind": "APIPolling",
	"properties": {
		"connectorUiConfig": {
			"id": "GitHubEcAuditLogPolling",
			"title": "GitHub Enterprise Audit Log",
			"publisher": "GitHub",
			"descriptionMarkdown": "The GitHub audit log connector provides the capability to ingest GitHub logs into Microsoft Sentinel. By connecting GitHub audit logs into Microsoft Sentinel, you can view this data in workbooks, use it to create custom alerts, and improve your investigation process. \n\n **Note:** If you are intended to ingest GitHub subscribed events into Microsoft Sentinel , Please refer to GitHub (using Webhooks) Connector from \"**Data Connectors**\" gallery.",
			"graphQueriesTableName": "GitHubAuditLogPolling_CL",
			"graphQueries": [
				{
					"metricName": "Total events received",
					"legend": "GitHub audit log events",
					"baseQuery": "{{graphQueriesTableName}}"
				}
			],
			"sampleQueries": [
				{
					"description": "All logs",
					"query": "{{graphQueriesTableName}}\n | take 10"
				}
			],
			"dataTypes": [
				{
					"name": "GitHubAuditData",
					"lastDataReceivedQuery": "GitHubAuditData\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
				}
			],
			"connectivityCriterias": [
				{
					"type": "SentinelKindsV2",
					"value": []
				}
			],
			"availability": {
				"status": 1,
				"isPreview": true
			},
			"permissions": {
				"resourceProvider": [
					{
						"provider": "Microsoft.OperationalInsights/workspaces",
						"permissionsDisplayText": "read and write permissions are required.",
						"providerDisplayName": "Workspace",
						"scope": "Workspace",
						"requiredPermissions": {
							"write": true,
							"read": true,
							"delete": true
						}
					}
				],
				"customs": [
					{
						"name": "GitHub API personal token Key",
						"description": "You need access to GitHub personal token, the key should have 'admin:org' scope"
					}
				]
			},
			"instructionSteps": [
				{
					"title": "Connect GitHub Enterprise Audit Log to Microsoft Sentinel",
					"description": "Enable GitHub audit Logs. \n Follow [this](https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token) to create or find your personal key",
					"instructions": [
						{
							"parameters": {
								"enable": "true",
								"userRequestPlaceHoldersInput": [
									{
										"displayText": "Organization Name",
										"requestObjectKey": "apiEndpoint",
										"placeHolderName": "{{placeHolder1}}",
										"placeHolderValue": ""
									}
								]
							},
							"type": "APIKey"
						}
					]
				}
			]
		},
		"pollingConfig": {
			"owner": "ASI",
			"version": "2.0",
			"source": "PaaS",
			"templateFilePath": "",
			"templateFileName": "",
			"auth": {
				"authType": "APIKey",
				"APIKeyName": "Authorization",
				"APIKeyIdentifier": "token"
			},
			"request": {
				"apiEndpoint": "https://api.github.com/organizations/{{placeHolder1}}/audit-log",
				"rateLimitQPS": 50,
				"queryWindowInMin": 15,
				"httpMethod": "Get",
				"queryTimeFormat": "yyyy-MM-ddTHH:mm:ssZ",
				"retryCount": 2,
				"timeoutInSeconds": 60,
				"headers": {
					"Accept": "application/json",
					"User-Agent": "Scuba"
				},
				"queryParameters": {
					"phrase": "created:{_QueryWindowStartTime}..{_QueryWindowEndTime}"
				}
			},
			"paging": {
				"pagingType": "LinkHeader",
				"pageSizeParaName": "per_page"
			},
			"response": {
				"eventsJsonPaths": [
					"$"
				]
			}
		}
	}
            }
    ]
}