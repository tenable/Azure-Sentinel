{
    "$schema":  "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion":  "1.0.0.0",
     "metadata":  {
        "title":  "Enrich Incident - EclecticIQ",
        "description":  "This playbook perform look up into EclecticIQ for the entities (Account, Host, IP, FileHash, URL) present result to Microsoft Sentinel incident",
        "prerequisites":  ["1. EclecticIQ Custom Connector needs to be deployed prior to the deployment of this playbook under the same subscription.",
        "2. API key. To get API Key, find the instructions here https://developers.eclecticiq.com/docs/authenticate#generate-api-token "],
        "postDeployment":  ["1. Once deployment is complete, you will need to authorize each connection.",
        "2. Navigate to playbook --> API Connections --> Select connections one by one --> Edit API Connection --> (if required) Enter API key or credentials --> Save"],
        "prerequisitesDeployTemplateFile":  "../../CustomConnector/EclecticIQCustomConnector/azuredeploy.json",
        "lastUpdateTime":  "2022-11-30T00:00:00.000Z",
        "entities":  ["account","ip","filehash","url","host"],
        "tags":  ["Enrichment","Notification","EclecticIQ","ThreatIntelligence"
        ],
        "support":  {
            "tier":  "microsoft",
            "armtemplate":  "Generated from https://github.com/Azure/Azure-Sentinel/tree/master/Tools/Playbook-ARM-Template-Generator"
        },
        "author":  {
            "name":  "Microsoft"
        }
    },
     "parameters":  {
        "PlaybookName":  {
            "defaultValue":  "EclecticIQ-EnrichIncident",
            "type":  "string",
             "metadata": {
                "description": "Enter Name of the playbook. If you are fine with the default name EclecticIQ-EnrichIncident then leave the default value as it is"
            }
        },
		 "CustomConnectorName":  {
            "defaultValue":  "EclecticIQCustomConnector",
            "type":  "string",
             "metadata": {
                "description": "Enter your EclecticIQ Search custom connector name. Make sure you have installed custom connector already. Default name is EclecticIQCustomConnector. If you are fine with the default value, then leave the value as it is"
            }
        }
    },
    "variables":  {
        "EclecticIQCustomConnectorConnectionName":  "[concat('EclecticIQCustomConnector-', parameters('PlaybookName'))]",
        "MicrosoftSentinelConnectionName":  "[concat('MicrosoftSentinel-', parameters('PlaybookName'))]"
    },
    "resources":  [
        {
            "properties":  {
                "provisioningState":  "Succeeded",
                "state":  "Enabled",
                 "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "Microsoft_Sentinel_incident": {
                            "type": "ApiConnectionWebhook",
                            "inputs": {
                                "body": {
                                    "callback_url": "@{listCallbackUrl()}"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "path": "/incident-creation"
                            }
                        }
                    },
                    "actions": {
                        "Add_comment_to_incident_(V3)": {
                            "runAfter": {
                                "For_each_Account_in_Entity": [
                                    "Succeeded",
                                    "TimedOut",
                                    "Skipped",
                                    "Failed"
                                ],
                                "For_each_FileHash_in_Entity": [
                                    "Succeeded",
                                    "TimedOut",
                                    "Skipped",
                                    "Failed"
                                ],
                                "For_each_Host_in_Entity": [
                                    "Succeeded",
                                    "TimedOut",
                                    "Skipped",
                                    "Failed"
                                ],
                                "For_each_IP_in_Entity": [
                                    "Succeeded",
                                    "TimedOut",
                                    "Skipped",
                                    "Failed"
                                ],
                                "For_each_URL_in_Entity": [
                                    "Succeeded",
                                    "TimedOut",
                                    "Skipped",
                                    "Failed"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": {
                                    "incidentArmId": "@triggerBody()?['object']?['id']",
                                    "message": "<p>@{variables('Incident_Comment')}</p>"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/Incidents/Comment"
                            }
                        },
                        "Entities_-_Get_Accounts": {
                            "runAfter": {
                                "Initialize_variable_-_Incident_Comment": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/entities/account"
                            }
                        },
                        "Entities_-_Get_FileHashes": {
                            "runAfter": {
                                "Initialize_variable_-_Incident_Comment": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/entities/filehash"
                            }
                        },
                        "Entities_-_Get_Hosts": {
                            "runAfter": {
                                "Initialize_variable_-_Incident_Comment": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/entities/host"
                            }
                        },
                        "Entities_-_Get_IPs": {
                            "runAfter": {
                                "Initialize_variable_-_Incident_Comment": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/entities/ip"
                            }
                        },
                        "Entities_-_Get_URLs": {
                            "runAfter": {
                                "Initialize_variable_-_Incident_Comment": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/entities/url"
                            }
                        },
                        "For_each_Account_in_Entity": {
                            "foreach": "@body('Entities_-_Get_Accounts')?['Accounts']",
                            "actions": {
                                "Condition_check_if_empty_indicator_info_-_Account": {
                                    "actions": {
                                        "Append_message_to_Comment_-_Accounts": {
                                            "runAfter": {
                                                "Compose_comment_message-_No_results_-_Accounts": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "AppendToStringVariable",
                                            "inputs": {
                                                "name": "Incident_Comment",
                                                "value": "@outputs('Compose_comment_message-_No_results_-_Accounts')"
                                            }
                                        },
                                        "Compose_comment_message-_No_results_-_Accounts": {
                                            "runAfter": {},
                                            "type": "Compose",
                                            "inputs": "\n<b>Account: </b> @{items('For_each_Account_in_Entity')?['Name']}\nNo match found from EclecticIQ\n----------------------------------------------------------------------"
                                        }
                                    },
                                    "runAfter": {
                                        "Parse_JSON_response_-_Account": [
                                            "Succeeded"
                                        ]
                                    },
                                    "else": {
                                        "actions": {
                                            "For_each_indictor_info_on_Account": {
                                                "foreach": "@body('Parse_JSON_response_-_Account')?['data']",
                                                "actions": {
                                                    "Append_indicator_info_to_comment_string_-_accounts": {
                                                        "runAfter": {
                                                            "Compose_Comment_message_-_Results_-_Accounts": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "AppendToStringVariable",
                                                        "inputs": {
                                                            "name": "Incident_Comment",
                                                            "value": "@outputs('Compose_Comment_message_-_Results_-_Accounts')"
                                                        }
                                                    },
                                                    "Compose_Comment_message_-_Results_-_Accounts": {
                                                        "runAfter": {},
                                                        "type": "Compose",
                                                        "inputs": "\nFound below information from EclecticIQ for @{items('For_each_Account_in_Entity')?['Name']} (Account)\n----------------------------------------------------------------------\nObservable Type: @{items('For_each_indictor_info_on_Account')?['type']}\nObservable Value: @{items('For_each_indictor_info_on_Account')?['value']}\nMaliciousness: @{items('For_each_indictor_info_on_Account')?['meta']?['maliciousness']}\nCreared at: @{items('For_each_indictor_info_on_Account')?['created_at']}\nLast updated at: @{items('For_each_indictor_info_on_Account')?['last_updated_at']}\n----------------------------------------------------------------------\n"
                                                    }
                                                },
                                                "runAfter": {},
                                                "type": "Foreach"
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@string(body('Parse_JSON_response_-_Account')?['data'])",
                                                    "@variables('empty_result_accounts')"
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Get_Observables": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "headers": {
                                            "Content-Type": "application/json",
                                            "accept": "application/json"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['EclecticIQCustomConnector']['connectionId']"
                                            }
                                        },
                                        "method": "get",
                                        "path": "/api/v1/observables",
                                        "queries": {
                                            "filter[type]": "name",
                                            "filter[value]": "hddsjd@hfjdjf.com"
                                        }
                                    }
                                },
                                "Parse_JSON_response_-_Account": {
                                    "runAfter": {
                                        "Get_Observables": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ParseJson",
                                    "inputs": {
                                        "content": "@body('Get_Observables')",
                                        "schema": {
                                            "properties": {
                                                "count": {
                                                    "type": "integer"
                                                },
                                                "data": {
                                                    "items": {
                                                        "properties": {
                                                            "created_at": {
                                                                "type": "string"
                                                            },
                                                            "entities": {
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "id": {
                                                                "type": "integer"
                                                            },
                                                            "last_updated_at": {
                                                                "type": "string"
                                                            },
                                                            "meta": {
                                                                "properties": {
                                                                    "maliciousness": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "sources": {
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "type": {
                                                                "type": "string"
                                                            },
                                                            "value": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "created_at",
                                                            "entities",
                                                            "id",
                                                            "last_updated_at",
                                                            "meta",
                                                            "sources",
                                                            "type",
                                                            "value"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                },
                                                "limit": {
                                                    "type": "integer"
                                                },
                                                "offset": {
                                                    "type": "integer"
                                                },
                                                "total_count": {
                                                    "type": "integer"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_variable_to_indicate_empty_result_sting_-_Accounts": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "For_each_FileHash_in_Entity": {
                            "foreach": "@body('Entities_-_Get_FileHashes')?['Filehashes']",
                            "actions": {
                                "Condition_check_if_empty_indicator_info_-_FileHash": {
                                    "actions": {
                                        "Append_message_to_Comment_-_FileHash": {
                                            "runAfter": {
                                                "Compose_comment_message-_No_results_-_FileHash": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "AppendToStringVariable",
                                            "inputs": {
                                                "name": "Incident_Comment",
                                                "value": "@outputs('Compose_comment_message-_No_results_-_FileHash')"
                                            }
                                        },
                                        "Compose_comment_message-_No_results_-_FileHash": {
                                            "runAfter": {},
                                            "type": "Compose",
                                            "inputs": "\n<b>File Hash: </b>  @{items('For_each_FileHash_in_Entity')?['Value']}\nNo match found from EclecticIQ\n----------------------------------------------------------------------"
                                        }
                                    },
                                    "runAfter": {
                                        "Parse_JSON_response_-_FileHash": [
                                            "Succeeded"
                                        ]
                                    },
                                    "else": {
                                        "actions": {
                                            "For_each_indictor_info_on_FileHash": {
                                                "foreach": "@body('Parse_JSON_response_-_FileHash')?['data']",
                                                "actions": {
                                                    "Append_indicator_info_to_comment_string_-_FileHash": {
                                                        "runAfter": {
                                                            "Compose_Comment_message_-_Results_-_FileHash": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "AppendToStringVariable",
                                                        "inputs": {
                                                            "name": "Incident_Comment",
                                                            "value": "@outputs('Compose_Comment_message_-_Results_-_FileHash')"
                                                        }
                                                    },
                                                    "Compose_Comment_message_-_Results_-_FileHash": {
                                                        "runAfter": {},
                                                        "type": "Compose",
                                                        "inputs": "\nFound below information from EclecticIQ for  @{items('For_each_FileHash_in_Entity')?['Value']} (FileHash) \n----------------------------------------------------------------------\nObservable Type: @{items('For_each_indictor_info_on_FileHash')?['type']}\nObservable Value: @{items('For_each_indictor_info_on_FileHash')?['value']}\nMaliciousness: @{items('For_each_indictor_info_on_FileHash')?['meta']?['maliciousness']}\nCreared at: @{items('For_each_indictor_info_on_FileHash')?['created_at']}\nLast updated at: @{items('For_each_indictor_info_on_FileHash')?['last_updated_at']}\n----------------------------------------------------------------------"
                                                    }
                                                },
                                                "runAfter": {},
                                                "type": "Foreach"
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@string(body('Parse_JSON_response_-_FileHash')?['data'])",
                                                    "@variables('empty_result_hash')"
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Get_Observables_FileHash": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "headers": {
                                            "Content-Type": "application/json",
                                            "accept": "application/json"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['EclecticIQCustomConnector']['connectionId']"
                                            }
                                        },
                                        "method": "get",
                                        "path": "/api/v1/observables",
                                        "queries": {
                                            "filter[type]": "hash-sha256",
                                            "filter[value]": "@items('For_each_FileHash_in_Entity')?['Value']"
                                        }
                                    }
                                },
                                "Parse_JSON_response_-_FileHash": {
                                    "runAfter": {
                                        "Get_Observables_FileHash": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ParseJson",
                                    "inputs": {
                                        "content": "@body('Get_Observables_FileHash')",
                                        "schema": {
                                            "properties": {
                                                "count": {
                                                    "type": "integer"
                                                },
                                                "data": {
                                                    "items": {
                                                        "properties": {
                                                            "created_at": {
                                                                "type": "string"
                                                            },
                                                            "entities": {
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "id": {
                                                                "type": "integer"
                                                            },
                                                            "last_updated_at": {
                                                                "type": "string"
                                                            },
                                                            "meta": {
                                                                "properties": {
                                                                    "maliciousness": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "sources": {
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "type": {
                                                                "type": "string"
                                                            },
                                                            "value": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "created_at",
                                                            "entities",
                                                            "id",
                                                            "last_updated_at",
                                                            "meta",
                                                            "sources",
                                                            "type",
                                                            "value"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                },
                                                "limit": {
                                                    "type": "integer"
                                                },
                                                "offset": {
                                                    "type": "integer"
                                                },
                                                "total_count": {
                                                    "type": "integer"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_variable_to_indicate_empty_result_sting_-_FileHash": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "For_each_Host_in_Entity": {
                            "foreach": "@body('Entities_-_Get_Hosts')?['Hosts']",
                            "actions": {
                                "Condition_check_if_empty_indicator_info_-_Host": {
                                    "actions": {
                                        "Append_message_to_Comment_-_Host": {
                                            "runAfter": {
                                                "Compose_comment_message-_No_results_-_Host": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "AppendToStringVariable",
                                            "inputs": {
                                                "name": "Incident_Comment",
                                                "value": "@outputs('Compose_comment_message-_No_results_-_Host')"
                                            }
                                        },
                                        "Compose_comment_message-_No_results_-_Host": {
                                            "runAfter": {},
                                            "type": "Compose",
                                            "inputs": "\n<b>Host Name: </b>   @{items('For_each_Host_in_Entity')?['HostName']}\nNo match found from EclecticIQ\n----------------------------------------------------------------------"
                                        }
                                    },
                                    "runAfter": {
                                        "Parse_JSON_response_-_Host": [
                                            "Succeeded"
                                        ]
                                    },
                                    "else": {
                                        "actions": {
                                            "For_each_indictor_info_on_Host": {
                                                "foreach": "@body('Parse_JSON_response_-_Host')?['data']",
                                                "actions": {
                                                    "Append_indicator_info_to_comment_string_-_Host": {
                                                        "runAfter": {
                                                            "Compose_Comment_message_-_Results_-_Host": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "AppendToStringVariable",
                                                        "inputs": {
                                                            "name": "Incident_Comment",
                                                            "value": "@outputs('Compose_Comment_message_-_Results_-_Host')"
                                                        }
                                                    },
                                                    "Compose_Comment_message_-_Results_-_Host": {
                                                        "runAfter": {},
                                                        "type": "Compose",
                                                        "inputs": "\nFound below information from EclecticIQ for  @{items('For_each_Host_in_Entity')?['HostName']} (Host) \n----------------------------------------------------------------------\nObservable Type: @{items('For_each_indictor_info_on_Host')?['type']}\nObservable Value: @{items('For_each_indictor_info_on_Host')?['value']}\nMaliciousness: @{items('For_each_indictor_info_on_Host')?['meta']?['maliciousness']}\nCreared at: @{items('For_each_indictor_info_on_Host')?['created_at']}\nLast updated at: @{items('For_each_indictor_info_on_Host')?['last_updated_at']}\n----------------------------------------------------------------------"
                                                    }
                                                },
                                                "runAfter": {},
                                                "type": "Foreach"
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@string(body('Parse_JSON_response_-_Host')?['data'])",
                                                    "@variables('empty_result')"
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Get_Observables_-_Hosts": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "headers": {
                                            "Content-Type": "application/json",
                                            "accept": "application/json"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['EclecticIQCustomConnector']['connectionId']"
                                            }
                                        },
                                        "method": "get",
                                        "path": "/api/v1/observables",
                                        "queries": {
                                            "filter[type]": "host",
                                            "filter[value]": "@items('For_each_Host_in_Entity')?['HostName']"
                                        }
                                    }
                                },
                                "Parse_JSON_response_-_Host": {
                                    "runAfter": {
                                        "Get_Observables_-_Hosts": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ParseJson",
                                    "inputs": {
                                        "content": "@body('Get_Observables_-_Hosts')",
                                        "schema": {
                                            "properties": {
                                                "count": {
                                                    "type": "integer"
                                                },
                                                "data": {
                                                    "items": {
                                                        "properties": {
                                                            "created_at": {
                                                                "type": "string"
                                                            },
                                                            "entities": {
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "id": {
                                                                "type": "integer"
                                                            },
                                                            "last_updated_at": {
                                                                "type": "string"
                                                            },
                                                            "meta": {
                                                                "properties": {
                                                                    "maliciousness": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "sources": {
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "type": {
                                                                "type": "string"
                                                            },
                                                            "value": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "created_at",
                                                            "entities",
                                                            "id",
                                                            "last_updated_at",
                                                            "meta",
                                                            "sources",
                                                            "type",
                                                            "value"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                },
                                                "limit": {
                                                    "type": "integer"
                                                },
                                                "offset": {
                                                    "type": "integer"
                                                },
                                                "total_count": {
                                                    "type": "integer"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_variable_to_indicate_empty_result_sting_-_Hosts": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "For_each_IP_in_Entity": {
                            "foreach": "@body('Entities_-_Get_IPs')?['IPs']",
                            "actions": {
                                "Condition_check_if_empty_indicator_info_-_IP": {
                                    "actions": {
                                        "Append_message_to_Comment_-_IP": {
                                            "runAfter": {
                                                "Compose_comment_message-_No_results_-_IP": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "AppendToStringVariable",
                                            "inputs": {
                                                "name": "Incident_Comment",
                                                "value": "@{outputs('Compose_comment_message-_No_results_-_IP')}\n"
                                            }
                                        },
                                        "Compose_comment_message-_No_results_-_IP": {
                                            "runAfter": {},
                                            "type": "Compose",
                                            "inputs": "\n<b>IP Address: </b>   @{items('For_each_IP_in_Entity')?['Address']}\nNo match found from EclecticIQ\n----------------------------------------------------------------------"
                                        }
                                    },
                                    "runAfter": {
                                        "Parse_JSON_response_-_IP": [
                                            "Succeeded"
                                        ]
                                    },
                                    "else": {
                                        "actions": {
                                            "For_each_indictor_info_on_IP": {
                                                "foreach": "@body('Parse_JSON_response_-_IP')?['data']",
                                                "actions": {
                                                    "Append_indicator_info_to_comment_string_-_IP": {
                                                        "runAfter": {
                                                            "Compose_Comment_message_-_Results_-_IP": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "AppendToStringVariable",
                                                        "inputs": {
                                                            "name": "Incident_Comment",
                                                            "value": "@outputs('Compose_Comment_message_-_Results_-_IP')"
                                                        }
                                                    },
                                                    "Compose_Comment_message_-_Results_-_IP": {
                                                        "runAfter": {},
                                                        "type": "Compose",
                                                        "inputs": "\nFound below information from EclecticIQ for @{items('For_each_IP_in_Entity')?['Address']}   (IP Address)  \n----------------------------------------------------------------------\nObservable Type: @{items('For_each_indictor_info_on_IP')?['type']}\nObservable Value: @{items('For_each_indictor_info_on_IP')?['value']}\nMaliciousness: @{items('For_each_indictor_info_on_IP')?['meta']?['maliciousness']}\nCreared at: @{items('For_each_indictor_info_on_IP')?['created_at']}\nLast updated at: @{items('For_each_indictor_info_on_IP')?['last_updated_at']}\n----------------------------------------------------------------------"
                                                    }
                                                },
                                                "runAfter": {},
                                                "type": "Foreach"
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@string(body('Parse_JSON_response_-_IP')?['data'])",
                                                    "@variables('empty_result_ips')"
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Get_Observables_-_IP": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "headers": {
                                            "Content-Type": "application/json",
                                            "accept": "application/json"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['EclecticIQCustomConnector']['connectionId']"
                                            }
                                        },
                                        "method": "get",
                                        "path": "/api/v1/observables",
                                        "queries": {
                                            "filter[type]": "ipv4",
                                            "filter[value]": "@items('For_each_IP_in_Entity')?['Address']"
                                        }
                                    }
                                },
                                "Parse_JSON_response_-_IP": {
                                    "runAfter": {
                                        "Get_Observables_-_IP": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ParseJson",
                                    "inputs": {
                                        "content": "@body('Get_Observables_-_IP')",
                                        "schema": {
                                            "properties": {
                                                "count": {
                                                    "type": "integer"
                                                },
                                                "data": {
                                                    "items": {
                                                        "properties": {
                                                            "created_at": {
                                                                "type": "string"
                                                            },
                                                            "entities": {
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "id": {
                                                                "type": "integer"
                                                            },
                                                            "last_updated_at": {
                                                                "type": "string"
                                                            },
                                                            "meta": {
                                                                "properties": {
                                                                    "maliciousness": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "sources": {
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "type": {
                                                                "type": "string"
                                                            },
                                                            "value": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "created_at",
                                                            "entities",
                                                            "id",
                                                            "last_updated_at",
                                                            "meta",
                                                            "sources",
                                                            "type",
                                                            "value"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                },
                                                "limit": {
                                                    "type": "integer"
                                                },
                                                "offset": {
                                                    "type": "integer"
                                                },
                                                "total_count": {
                                                    "type": "integer"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_variable_to_indicate_empty_result_sting_-_IPs": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "For_each_URL_in_Entity": {
                            "foreach": "@body('Entities_-_Get_URLs')?['URLs']",
                            "actions": {
                                "Condition_check_if_empty_indicator_info_-_URLs": {
                                    "actions": {
                                        "Append_message_to_Comment_-_URL": {
                                            "runAfter": {
                                                "Compose_comment_message-_No_results_-_URLs": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "AppendToStringVariable",
                                            "inputs": {
                                                "name": "Incident_Comment",
                                                "value": "@{outputs('Compose_comment_message-_No_results_-_URLs')}\n"
                                            }
                                        },
                                        "Compose_comment_message-_No_results_-_URLs": {
                                            "runAfter": {},
                                            "type": "Compose",
                                            "inputs": "\n<b>URL: </b>   @{items('For_each_URL_in_Entity')?['Url']}\nNo match found from EclecticIQ\n----------------------------------------------------------------------"
                                        }
                                    },
                                    "runAfter": {
                                        "Parse_JSON_response_-_URL": [
                                            "Succeeded"
                                        ]
                                    },
                                    "else": {
                                        "actions": {
                                            "For_each_indictor_info_on_URL": {
                                                "foreach": "@body('Parse_JSON_response_-_URL')?['data']",
                                                "actions": {
                                                    "Append_indicator_info_to_comment_string_-_URL": {
                                                        "runAfter": {
                                                            "Compose_Comment_message_-_Results_-_URLs": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "AppendToStringVariable",
                                                        "inputs": {
                                                            "name": "Incident_Comment",
                                                            "value": "@outputs('Compose_Comment_message_-_Results_-_URLs')"
                                                        }
                                                    },
                                                    "Compose_Comment_message_-_Results_-_URLs": {
                                                        "runAfter": {},
                                                        "type": "Compose",
                                                        "inputs": "\nFound below information from EclecticIQ for  @{items('For_each_URL_in_Entity')?['Url']}   (URL)  \n----------------------------------------------------------------------\nObservable Type: @{items('For_each_indictor_info_on_URL')?['type']}\nObservable Value: @{items('For_each_indictor_info_on_URL')?['value']}\nMaliciousness: @{items('For_each_indictor_info_on_URL')?['meta']?['maliciousness']}\nCreared at: @{items('For_each_indictor_info_on_URL')?['created_at']}\nLast updated at: @{items('For_each_indictor_info_on_URL')?['last_updated_at']}\n----------------------------------------------------------------------"
                                                    }
                                                },
                                                "runAfter": {},
                                                "type": "Foreach"
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@string(body('Parse_JSON_response_-_URL')?['data'])",
                                                    "@variables('empty_result_urls')"
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Get_Observables_-_URL": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "headers": {
                                            "Content-Type": "application/json",
                                            "accept": "application/json"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['EclecticIQCustomConnector']['connectionId']"
                                            }
                                        },
                                        "method": "get",
                                        "path": "/api/v1/observables",
                                        "queries": {
                                            "filter[type]": "uri",
                                            "filter[value]": "@items('For_each_URL_in_Entity')?['Url']"
                                        }
                                    }
                                },
                                "Parse_JSON_response_-_URL": {
                                    "runAfter": {
                                        "Get_Observables_-_URL": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ParseJson",
                                    "inputs": {
                                        "content": "@body('Get_Observables_-_URL')",
                                        "schema": {
                                            "properties": {
                                                "count": {
                                                    "type": "integer"
                                                },
                                                "data": {
                                                    "items": {
                                                        "properties": {
                                                            "created_at": {
                                                                "type": "string"
                                                            },
                                                            "entities": {
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "id": {
                                                                "type": "integer"
                                                            },
                                                            "last_updated_at": {
                                                                "type": "string"
                                                            },
                                                            "meta": {
                                                                "properties": {
                                                                    "maliciousness": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "sources": {
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "type": {
                                                                "type": "string"
                                                            },
                                                            "value": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "created_at",
                                                            "entities",
                                                            "id",
                                                            "last_updated_at",
                                                            "meta",
                                                            "sources",
                                                            "type",
                                                            "value"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                },
                                                "limit": {
                                                    "type": "integer"
                                                },
                                                "offset": {
                                                    "type": "integer"
                                                },
                                                "total_count": {
                                                    "type": "integer"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_variable_to_indicate_empty_result_sting_-_URLs": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "Initialize_variable_-_Incident_Comment": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "Incident_Comment",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_to_indicate_empty_result_sting_-_Accounts": {
                            "runAfter": {
                                "Entities_-_Get_Accounts": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "empty_result_accounts",
                                        "type": "string",
                                        "value": "[[]"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_to_indicate_empty_result_sting_-_FileHash": {
                            "runAfter": {
                                "Entities_-_Get_FileHashes": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "empty_result_hash",
                                        "type": "string",
                                        "value": "[[]"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_to_indicate_empty_result_sting_-_Hosts": {
                            "runAfter": {
                                "Entities_-_Get_Hosts": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "empty_result",
                                        "type": "string",
                                        "value": "[[]"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_to_indicate_empty_result_sting_-_IPs": {
                            "runAfter": {
                                "Entities_-_Get_IPs": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "empty_result_ips",
                                        "type": "string",
                                        "value": "[[]"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_to_indicate_empty_result_sting_-_URLs": {
                            "runAfter": {
                                "Entities_-_Get_URLs": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "empty_result_urls",
                                        "type": "string",
                                        "value": "[[]"
                                    }
                                ]
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters":  {
                    "$connections":  {
                        "value":  {
                            "EclecticIQCustomConnector":  {
                                "connectionId":  "[resourceId('Microsoft.Web/connections', variables('EclecticIQCustomConnectorConnectionName'))]",
                                "connectionName":  "[variables('EclecticIQCustomConnectorConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/customApis/', parameters('CustomConnectorName'))]"
                            },
                            "azuresentinel":  {
                                "connectionId":  "[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                                "connectionName":  "[variables('MicrosoftSentinelConnectionName')]",
                                "id":  "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Azuresentinel')]",
                                "connectionProperties":  {
                                    "authentication":  {
                                        "type":  "ManagedServiceIdentity"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "name":  "[parameters('PlaybookName')]",
            "type":  "Microsoft.Logic/workflows",
            "location":  "[resourceGroup().location]",
            "tags":  {
                "hidden-SentinelTemplateName":  "EclecticIQ-EnrichIncident",
                "hidden-SentinelTemplateVersion":  "1.0"
            },
            "identity":  {
                "type":  "SystemAssigned"
            },
            "apiVersion":  "2017-07-01",
            "dependsOn":  [
                "[resourceId('Microsoft.Web/connections', variables('EclecticIQCustomConnectorConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]"
            ]
        },
        {
            "type":  "Microsoft.Web/connections",
            "apiVersion":  "2016-06-01",
            "name":  "[variables('EclecticIQCustomConnectorConnectionName')]",
            "location":  "[resourceGroup().location]",
            "kind":  "V1",
            "properties":  {
                "displayName":  "[variables('EclecticIQCustomConnectorConnectionName')]",
                "customParameterValues":  {
                },
                "api":  {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/customApis/', parameters('CustomConnectorName'))]"
                }
            }
        },
        {
            "type":  "Microsoft.Web/connections",
            "apiVersion":  "2016-06-01",
            "name":  "[variables('MicrosoftSentinelConnectionName')]",
            "location":  "[resourceGroup().location]",
            "kind":  "V1",
            "properties":  {
                "displayName":  "[variables('MicrosoftSentinelConnectionName')]",
                "customParameterValues":  {
                },
                "parameterValueType":  "Alternative",
                "api":  {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]"
                }
            }
        }
    ]
}