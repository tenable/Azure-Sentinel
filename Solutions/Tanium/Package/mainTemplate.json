{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "author": "Tanium - support@tanium.com",
    "comments": "Solution template for Tanium"
  },
  "parameters": {
    "location": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Not used, but needed to pass arm-ttk test `Location-Should-Not-Be-Hardcoded`.  We instead use the `workspace-location` which is derived from the LA workspace"
      }
    },
    "workspace-location": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "[concat('Region to deploy solution resources -- separate from location selection',parameters('location'))]"
      }
    },
    "workspace": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Workspace name for Log Analytics where Microsoft Sentinel is setup"
      }
    },
    "workbook1-name": {
      "type": "string",
      "defaultValue": "Tanium Workbook",
      "minLength": 1,
      "metadata": {
        "description": "Name for the workbook"
      }
    }
  },
  "variables": {
    "solutionId": "taniuminc1646329360287.tanium_sentinel_connector",
    "_solutionId": "[variables('solutionId')]",
    "email": "support@tanium.com",
    "_email": "[variables('email')]",
    "workbookVersion1": "1.0",
    "workbookContentId1": "TaniumWorkbook",
    "workbookId1": "[resourceId('Microsoft.Insights/workbooks', variables('workbookContentId1'))]",
    "workbookTemplateSpecName1": "[concat(parameters('workspace'),'-wb-',uniquestring(variables('_workbookContentId1')))]",
    "_workbookContentId1": "[variables('workbookContentId1')]",
    "workspaceResourceId": "[resourceId('microsoft.OperationalInsights/Workspaces', parameters('workspace'))]",
    "Tanium-ComplyFindings": "Tanium-ComplyFindings",
    "_Tanium-ComplyFindings": "[variables('Tanium-ComplyFindings')]",
    "playbookVersion1": "1.0",
    "playbookContentId1": "Tanium-ComplyFindings",
    "_playbookContentId1": "[variables('playbookContentId1')]",
    "playbookId1": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId1'))]",
    "playbookTemplateSpecName1": "[concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId1')))]",
    "blanks": "[replace('b', 'b', '')]",
    "Tanium-GeneralHostInfo": "Tanium-GeneralHostInfo",
    "_Tanium-GeneralHostInfo": "[variables('Tanium-GeneralHostInfo')]",
    "playbookVersion2": "1.0",
    "playbookContentId2": "Tanium-GeneralHostInfo",
    "_playbookContentId2": "[variables('playbookContentId2')]",
    "playbookId2": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId2'))]",
    "playbookTemplateSpecName2": "[concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId2')))]",
    "Tanium-MSDefenderHealth": "Tanium-MSDefenderHealth",
    "_Tanium-MSDefenderHealth": "[variables('Tanium-MSDefenderHealth')]",
    "playbookVersion3": "1.0",
    "playbookContentId3": "Tanium-MSDefenderHealth",
    "_playbookContentId3": "[variables('playbookContentId3')]",
    "playbookId3": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId3'))]",
    "playbookTemplateSpecName3": "[concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId3')))]",
    "Tanium-QuarantineHosts": "Tanium-QuarantineHosts",
    "_Tanium-QuarantineHosts": "[variables('Tanium-QuarantineHosts')]",
    "playbookVersion4": "1.0",
    "playbookContentId4": "Tanium-QuarantineHosts",
    "_playbookContentId4": "[variables('playbookContentId4')]",
    "playbookId4": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId4'))]",
    "playbookTemplateSpecName4": "[concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId4')))]",
    "Tanium-ResolveThreatResponseAlert": "Tanium-ResolveThreatResponseAlert",
    "_Tanium-ResolveThreatResponseAlert": "[variables('Tanium-ResolveThreatResponseAlert')]",
    "playbookVersion5": "1.0",
    "playbookContentId5": "Tanium-ResolveThreatResponseAlert",
    "_playbookContentId5": "[variables('playbookContentId5')]",
    "playbookId5": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId5'))]",
    "playbookTemplateSpecName5": "[concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId5')))]",
    "Tanium-SCCMClientHealth": "Tanium-SCCMClientHealth",
    "_Tanium-SCCMClientHealth": "[variables('Tanium-SCCMClientHealth')]",
    "playbookVersion6": "1.0",
    "playbookContentId6": "Tanium-SCCMClientHealth",
    "_playbookContentId6": "[variables('playbookContentId6')]",
    "playbookId6": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId6'))]",
    "playbookTemplateSpecName6": "[concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId6')))]",
    "Tanium-UnquarantineHosts": "Tanium-UnquarantineHosts",
    "_Tanium-UnquarantineHosts": "[variables('Tanium-UnquarantineHosts')]",
    "playbookVersion7": "1.0",
    "playbookContentId7": "Tanium-UnquarantineHosts",
    "_playbookContentId7": "[variables('playbookContentId7')]",
    "playbookId7": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId7'))]",
    "playbookTemplateSpecName7": "[concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId7')))]",
    "analyticRuleVersion1": "1.1.0",
    "analyticRulecontentId1": "dd9aa0ff-7ac1-4448-879c-e1a18d5890b4",
    "_analyticRulecontentId1": "[variables('analyticRulecontentId1')]",
    "analyticRuleId1": "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', variables('analyticRulecontentId1'))]",
    "analyticRuleTemplateSpecName1": "[concat(parameters('workspace'),'-ar-',uniquestring(variables('_analyticRulecontentId1')))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/templateSpecs",
      "apiVersion": "2021-05-01",
      "name": "[variables('workbookTemplateSpecName1')]",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-sentinelWorkspaceId": "[variables('workspaceResourceId')]",
        "hidden-sentinelContentType": "Workbook"
      },
      "properties": {
        "description": "Tanium Workbook with template",
        "displayName": "Tanium workbook template"
      }
    },
    {
      "type": "Microsoft.Resources/templateSpecs/versions",
      "apiVersion": "2021-05-01",
      "name": "[concat(variables('workbookTemplateSpecName1'),'/',variables('workbookVersion1'))]",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-sentinelWorkspaceId": "[variables('workspaceResourceId')]",
        "hidden-sentinelContentType": "Workbook"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/templateSpecs', variables('workbookTemplateSpecName1'))]"
      ],
      "properties": {
        "description": "TaniumWorkbookWorkbook Workbook with template version 2.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('workbookVersion1')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.Insights/workbooks",
              "name": "[variables('workbookContentId1')]",
              "location": "[parameters('workspace-location')]",
              "kind": "shared",
              "apiVersion": "2021-08-01",
              "metadata": {
                "description": "Visualize Tanium endpoint and module data"
              },
              "properties": {
                "displayName": "[parameters('workbook1-name')]",
                "serializedData": "{\"version\":\"Notebook/1.0\",\"items\":[{\"type\":11,\"content\":{\"version\":\"LinkItem/1.0\",\"style\":\"tabs\",\"links\":[{\"id\":\"885a9b5d-b2d6-4316-a6f9-6f65941b55b8\",\"cellValue\":\"selectedTab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Threat Response\",\"subTarget\":\"Threat Response\",\"style\":\"link\"},{\"id\":\"786ffe19-a17d-4ca9-9355-f97406ae048f\",\"cellValue\":\"selectedTab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Comply\",\"subTarget\":\"Comply\",\"preText\":\"Comply\",\"style\":\"link\"},{\"id\":\"efd238ee-2305-4384-a38c-a96d850ab4c9\",\"cellValue\":\"selectedTab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Discover\",\"subTarget\":\"Discover\",\"style\":\"link\"},{\"id\":\"a34745a8-6073-484d-adc5-d5c8e7fb9209\",\"cellValue\":\"selectedTab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Microsoft Tooling Health\",\"subTarget\":\"Microsoft Tooling Health\",\"style\":\"link\"},{\"id\":\"32a1a85f-978f-4b42-b27f-41cfb90e4e14\",\"cellValue\":\"selectedTab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Patch\",\"subTarget\":\"Patch\",\"style\":\"link\"}]},\"name\":\"links - 8\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":1,\"content\":{\"json\":\"## Top mission critical computers with CVSS hits >= 9.0\"},\"name\":\"text - 2\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"TaniumComplyVulnerabilities_CL \\n| join TaniumMainAsset_CL on Computer_Name_s| where CVSS_Score_s startswith \\\"9\\\"\\n| extend Host_0_HostName = Computer_Name_s\\n| extend Malware_0_Name = CVE_s\\n| extend IP_0_Address = IP_Address_s\\n| summarize count() by Computer_Name_s | limit 4\\n| sort by count_\\n\",\"size\":4,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"tileSettings\":{\"showBorder\":false,\"titleContent\":{\"columnMatch\":\"Computer_Name_s\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"count_\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}},\"graphSettings\":{\"type\":0,\"topContent\":{\"columnMatch\":\"Computer_Name_s\",\"formatter\":1},\"centerContent\":{\"columnMatch\":\"count_\",\"formatter\":1,\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}},\"mapSettings\":{\"locInfo\":\"LatLong\",\"sizeSettings\":\"count_\",\"sizeAggregation\":\"Sum\",\"legendMetric\":\"count_\",\"legendAggregation\":\"Sum\",\"itemColorSettings\":{\"type\":\"heatmap\",\"colorAggregation\":\"Sum\",\"nodeColorField\":\"count_\",\"heatmapPalette\":\"greenRed\"}}},\"name\":\"query - 2\"},{\"type\":1,\"content\":{\"json\":\"## Top operating systems with CVSS hits >= 9.0\"},\"name\":\"text - 4\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"TaniumComplyVulnerabilities_CL \\n| join TaniumMainAsset_CL on Computer_Name_s| where CVSS_Score_s startswith \\\"9\\\"\\n| extend Host_0_HostName = Computer_Name_s\\n| extend Malware_0_Name = CVE_s\\n| extend IP_0_Address = IP_Address_s\\n| summarize count() by Operating_System_Generation_s\\n| sort by count_\",\"size\":4,\"timeContext\":{\"durationMs\":2592000000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\",\"tileSettings\":{\"titleContent\":{\"columnMatch\":\"Operating_System_Generation_s\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"count_\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}},\"showBorder\":false}},\"name\":\"query - 3\"},{\"type\":1,\"content\":{\"json\":\"## Vulnerability distribution by year\"},\"name\":\"text - 2\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"TaniumComplyVulnerabilities_CL\\n|distinct CVE_Year_s,Computer_Name_s, CVE_s\\n|summarize count() by CVE_Year_s\\n|render barchart  \\n|sort by CVE_Year_s asc\",\"size\":0,\"timeContext\":{\"durationMs\":2592000000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"query - 3\"},{\"type\":1,\"content\":{\"json\":\"## Vulnerability Distribution by OS\"},\"name\":\"text - 5\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"TaniumComplyVulnerabilities_CL\\n|distinct CVE_s, Computer_Name_s, Operating_System_Generation_s\\n|summarize count() by Operating_System_Generation_s\\n|render barchart\",\"size\":0,\"timeContext\":{\"durationMs\":2592000000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"query - 4\"},{\"type\":1,\"content\":{\"json\":\"## Vulnerability Distribution by Severity\"},\"name\":\"text - 6\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"TaniumComplyVulnerabilities_CL\\n|distinct CVE_s,Severity_s\\n|summarize count() by Severity_s\",\"size\":0,\"timeContext\":{\"durationMs\":2592000000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"graph\",\"tileSettings\":{\"showBorder\":false,\"titleContent\":{\"columnMatch\":\"Severity_s\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"count_\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}},\"graphSettings\":{\"type\":2,\"topContent\":{\"columnMatch\":\"Severity_s\",\"formatter\":1},\"centerContent\":{\"columnMatch\":\"count_\",\"formatter\":1,\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}},\"nodeIdField\":\"Severity_s\",\"graphOrientation\":3,\"showOrientationToggles\":false,\"staticNodeSize\":100,\"hivesMargin\":5},\"textSettings\":{\"style\":\"bignumber\"}},\"name\":\"query - 7\"},{\"type\":1,\"content\":{\"json\":\"## System Outliers (Based on CVE Count & Aggregate CVSS Score)\\n\"},\"name\":\"text - 14\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"TaniumComplyVulnerabilities_CL\\n|join kind=inner TaniumMainAsset_CL on Computer_Name_s\\n|distinct CVE_s,Computer_Name_s,CVSS_Score_s, Operating_System_Generation_s\\n|summarize  CVECount=dcount(CVE_s), cvss_endpoint_score=sum(todecimal(CVSS_Score_s)) by Computer_Name_s, Operating_System_Generation_s\\n|project cvss_endpoint_score, CVECount, Computer_Name_s, Operating_System_Generation_s\\n|render scatterchart\\n|sort by cvss_endpoint_score asc\",\"size\":0,\"timeContext\":{\"durationMs\":604800000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"scatterchart\",\"tileSettings\":{\"showBorder\":false,\"titleContent\":{\"columnMatch\":\"Computer_Name_s\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"cvss_endpoint_score\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}},\"graphSettings\":{\"type\":0,\"topContent\":{\"columnMatch\":\"Computer_Name_s\",\"formatter\":1},\"centerContent\":{\"columnMatch\":\"cvss_endpoint_score\",\"formatter\":1,\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}},\"chartSettings\":{\"xAxis\":\"cvss_endpoint_score\",\"yAxis\":[\"CVECount\"],\"showLegend\":true,\"customThresholdLine\":\"{cvecount}\",\"customThresholdLineStyle\":5},\"mapSettings\":{\"locInfo\":\"LatLong\",\"sizeSettings\":\"cvss_endpoint_score\",\"sizeAggregation\":\"Sum\",\"legendMetric\":\"cvss_endpoint_score\",\"legendAggregation\":\"Sum\",\"itemColorSettings\":{\"type\":\"heatmap\",\"colorAggregation\":\"Sum\",\"nodeColorField\":\"cvss_endpoint_score\",\"heatmapPalette\":\"greenRed\"}}},\"name\":\"query - 15\"},{\"type\":1,\"content\":{\"json\":\"## Compliance Benchmark - Pass Rate\"},\"name\":\"text - 10\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"TaniumComplyCompliance_CL | where  Rule_ID_s <> \\\"\\\"\\n|summarize  Total=count(), Pass=countif(Status_Category_s has \\\"Pass\\\"), Fail=countif(Status_Category_s has \\\"Fail\\\")\\n|extend PassRate=(Pass*1.0/Total)*100\\n|project PassRate\",\"size\":1,\"timeContext\":{\"durationMs\":604800000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"tileSettings\":{\"titleContent\":{\"columnMatch\":\"PassRate\",\"formatter\":12,\"formatOptions\":{\"palette\":\"redBright\"}},\"showBorder\":false}},\"name\":\"query - 11\"},{\"type\":1,\"content\":{\"json\":\"## Top 10 Benchmark Failures\"},\"name\":\"text - 12\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"TaniumComplyCompliance_CL \\n|where  Rule_ID_s <> \\\"\\\" and Status_Category_s has \\\"fail\\\"\\n|summarize Count=count() by RuleID=Rule_ID_s\\n|top 10 by Count\",\"size\":0,\"timeContext\":{\"durationMs\":2592000000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"query - 13\"}]},\"conditionalVisibility\":{\"parameterName\":\"selectedTab\",\"comparison\":\"isEqualTo\",\"value\":\"Comply\"},\"customWidth\":\"100\",\"name\":\"cvss_group\",\"styleSettings\":{\"maxWidth\":\"100\"}},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":1,\"content\":{\"json\":\"## Unmanaged OS Platform\\n\"},\"name\":\"text - 0\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"TaniumDiscoverUnmanagedAssets_CL\\n|where Os_s <> \\\"\\\" \\n|distinct MacAddress_s,Os_s\\n|summarize count() by Os_s\\n\",\"size\":0,\"timeContext\":{\"durationMs\":2592000000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\"},\"name\":\"query - 1\"},{\"type\":1,\"content\":{\"json\":\"## Unmanaged Device Type\"},\"name\":\"text - 2\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"TaniumDiscoverUnmanagedAssets_CL\\n|where MacOrganization_s <> \\\"\\\" \\n|distinct MacAddress_s,MacOrganization_s\\n|summarize count() by MacOrganization_s\",\"size\":0,\"timeContext\":{\"durationMs\":2592000000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\"},\"name\":\"query - 3\"},{\"type\":1,\"content\":{\"json\":\"## Unmanaged Open Ports\"},\"name\":\"text - 4\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"TaniumDiscoverUnmanagedAssets_CL\\n|where Ports_s <> \\\"\\\" \\n|distinct MacAddress_s,Ports_s\\n|summarize count() by Ports_s\\n\\n\",\"size\":0,\"timeContext\":{\"durationMs\":2592000000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\"},\"name\":\"query - 5\"},{\"type\":1,\"content\":{\"json\":\"## All Unmanaged Assets\"},\"name\":\"text - 6\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"TaniumDiscoverUnmanagedAssets_CL\\n| where HostName_s <> \\\"\\\"\\n| project Hostname=HostName_s, MacAddres=MacAddress_s, IPAddress, MacOrganization=MacOrganization_s, LastDiscoveredTime=LastDiscoveredAt_s\\n| sort by LastDiscoveredTime\",\"size\":0,\"timeContext\":{\"durationMs\":86400000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"query - 7\"}]},\"conditionalVisibility\":{\"parameterName\":\"selectedTab\",\"comparison\":\"isEqualTo\",\"value\":\"Discover\"},\"name\":\"discover_group\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"title\":\"MIcrosoft Tooling Health \",\"items\":[{\"type\":1,\"content\":{\"json\":\"## Defender AV Status\"},\"name\":\"text - 0\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"TaniumDefenderHealth_CL\\n|where Antivirus_State_s <> \\\"\\\"\\n|summarize count () by Antivirus_State_s\\n|project Antivirus_State=Antivirus_State_s, Count=count_\\n|render piechart    \\n\",\"size\":0,\"timeContext\":{\"durationMs\":86400000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"query - 1\"},{\"type\":1,\"content\":{\"json\":\"## Defender AV Process Status\"},\"name\":\"text - 2\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"TaniumDefenderHealth_CL\\n|where Defender_Process_s <> \\\"\\\"\\n|summarize count () by Defender_Process_s\\n|project Defender_Process_Status=Defender_Process_s, Count=count_\\n|render piechart    \\n\",\"size\":0,\"timeContext\":{\"durationMs\":86400000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"query - 3\"},{\"type\":1,\"content\":{\"json\":\"## Defender AV Signature Update Age\"},\"name\":\"text - 4\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"TaniumDefenderHealth_CL\\n|where Signature_Update_Age_s <> \\\"\\\"\\n|summarize count () by Signature_Update_Age=Signature_Update_Age_s\\n|project Signature_Update_Age=Signature_Update_Age, Count=count_\\n|render columnchart    \",\"size\":0,\"timeContext\":{\"durationMs\":86400000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"query - 5\"}]},\"conditionalVisibility\":{\"parameterName\":\"selectedTab\",\"comparison\":\"isEqualTo\",\"value\":\"Microsoft Tooling Health\"},\"customWidth\":\"50\",\"name\":\"group - 5\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"title\":\"MEMCM Health\",\"items\":[{\"type\":1,\"content\":{\"json\":\"## MEMCM Health Status\"},\"name\":\"text - 0\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"TaniumSCCMClientHealth_CL\\n|where Health_Status_s !has \\\"N/A\\\"\\n|project Computer_Name=Computer_Name_s,Health_Status=Health_Status_s, Reason=Reason_s\",\"size\":0,\"timeContext\":{\"durationMs\":86400000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"query - 1\"},{\"type\":1,\"content\":{\"json\":\"## MEMCM Health Issues\"},\"name\":\"text - 2\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"TaniumSCCMClientHealth_CL\\n|where Reason_s <> \\\"\\\"\\n|summarize count() by Reason_s\\n|project Health_Status=Reason_s,Count=count_\\n|render piechart\",\"size\":0,\"timeContext\":{\"durationMs\":86400000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"query - 3\"}]},\"conditionalVisibility\":{\"parameterName\":\"selectedTab\",\"comparison\":\"isEqualTo\",\"value\":\"Microsoft Tooling Health\"},\"customWidth\":\"50\",\"name\":\"sccm_group\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":1,\"content\":{\"json\":\"## Intel Names over time\"},\"name\":\"text - 1\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"TaniumThreatResponse_CL\\n|project Computer_Name_s,Timestamp_t,Intel_Name_s\\n|summarize count () by Timestamp_t, Intel_Name_s\\n|render areachart\",\"size\":0,\"timeContext\":{\"durationMs\":2592000000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"query - 0\"},{\"type\":1,\"content\":{\"json\":\"## Threat Response Alert Types\"},\"name\":\"text - 2\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"TaniumThreatResponse_CL\\n| summarize count() by Intel_Type_s\\n| render piechart  \",\"size\":0,\"timeContext\":{\"durationMs\":2592000000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"query - 3\"},{\"type\":1,\"content\":{\"json\":\"## THR Alert by User\\n\"},\"name\":\"text - 4\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"TaniumThreatResponse_CL\\n| summarize count() by Match_Details_match_properties_user_s\\n| render piechart  \",\"size\":0,\"timeContext\":{\"durationMs\":2592000000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"query - 5\"},{\"type\":1,\"content\":{\"json\":\"## Threat Response Alerts by Process Name\"},\"name\":\"text - 6\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"TaniumThreatResponse_CL\\n| where isnotempty(Match_Details_match_properties_name_s)\\n| extend ActingProcessName = Match_Details_match_properties_name_s\\n| summarize event_count=count() by bin(Timestamp_t, 7d), ActingProcessName\\n| top 20 by event_count\\n| render barchart\",\"size\":0,\"timeContext\":{\"durationMs\":2592000000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"query - 7\"},{\"type\":1,\"content\":{\"json\":\"## All Alerts by Computer Name\"},\"name\":\"text - 8\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"TaniumThreatResponse_CL\\n|summarize count() by Computer_Name_s, Intel_Name_s\\n|project-rename Computer_Name=Computer_Name_s, Intel_Name=Intel_Name_s, Count=count_\\n|sort by Count\",\"size\":0,\"timeContext\":{\"durationMs\":2592000000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"query - 9\"}]},\"conditionalVisibility\":{\"parameterName\":\"selectedTab\",\"comparison\":\"isEqualTo\",\"value\":\"Threat Response\"},\"name\":\"Threat Response\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":1,\"content\":{\"json\":\"## Reboot Required\"},\"name\":\"text - 0\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"TaniumHighUptime_CL\\n|project TimeGenerated, Computer_Name_s,Reboot_Required_s\\n|where Reboot_Required_s contains \\\"Yes\\\"\\n|count\",\"size\":4,\"timeContext\":{\"durationMs\":86400000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"card\",\"tileSettings\":{\"showBorder\":false},\"textSettings\":{\"style\":\"bignumber\"}},\"name\":\"query - 1\"},{\"type\":1,\"content\":{\"json\":\"## Endpoints with High Uptime (>30 days)\"},\"name\":\"text - 2\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"TaniumHighUptime_CL\\n|where High_Uptime_s !in (\\\"Less than 30\\\", \\\"N/A\\\")\\n|extend Days=split(High_Uptime_s,\\\" \\\",0)\\n|project Computer_Name=Computer_Name_s,toint(Days=Days[0])\",\"size\":1,\"timeContext\":{\"durationMs\":86400000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"tileSettings\":{\"showBorder\":false,\"titleContent\":{\"columnMatch\":\"Computer_Name\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"Days\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}},\"graphSettings\":{\"type\":0}},\"name\":\"query - 3\"},{\"type\":1,\"content\":{\"json\":\"## Patch Compliance - All Patches\"},\"name\":\"text - 4\",\"styleSettings\":{\"margin\":\"50\"}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"TaniumPatchListCompliance_CL\\n|where Patch_List_Name_s == \\\"All Patches\\\"\\n|summarize count () by Compliance_Status_s\\n|render piechart \",\"size\":0,\"timeContext\":{\"durationMs\":86400000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"query - 5\"},{\"type\":1,\"content\":{\"json\":\"## Severity of missing Patches\\n\"},\"name\":\"text - 6\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"TaniumPatchListApplicability_CL\\n|where Superseded_s has \\\"False\\\" and Install_Status_s has \\\"Not Installed\\\"\\n|summarize count() by Severity_s\\n|render piechart \",\"size\":0,\"timeContext\":{\"durationMs\":86400000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"query - 7\"},{\"type\":1,\"content\":{\"json\":\"## Patch by install status\"},\"name\":\"text - 8\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"TaniumPatchListApplicability_CL\\n|where Superseded_s has \\\"false\\\"\\n|summarize count() by Install_Status_s,Severity_s\",\"size\":0,\"timeContext\":{\"durationMs\":86400000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"categoricalbar\",\"chartSettings\":{\"seriesLabelSettings\":[{\"seriesName\":\"Not Installed\",\"color\":\"red\"},{\"seriesName\":\"Installed\",\"color\":\"green\"}]}},\"name\":\"query - 9\"},{\"type\":1,\"content\":{\"json\":\"## Important/Critical Missing Patches by Year\"},\"name\":\"text - 10\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"TaniumPatchListApplicability_CL\\n|distinct Title_s,Install_Status_s,Severity_s,Release_Date_s\\n|where Install_Status_s has \\\"Not Installed\\\"\\n|where Severity_s in (\\\"Critical\\\", \\\"Important\\\")\\n|extend Year=(split(Release_Date_s,\\\"/\\\",2))\\n|summarize count() by Year=tostring(Year[0])\",\"size\":0,\"timeContext\":{\"durationMs\":86400000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"categoricalbar\"},\"name\":\"query - 11\"}]},\"conditionalVisibility\":{\"parameterName\":\"selectedTab\",\"comparison\":\"isEqualTo\",\"value\":\"Patch\"},\"name\":\"Patch\"}],\"fromTemplateId\":\"sentinel-TaniumWorkbook\",\"$schema\":\"https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json\"}\n",
                "version": "1.0",
                "sourceId": "[variables('workspaceResourceId')]",
                "category": "sentinel"
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Workbook-', last(split(variables('workbookId1'),'/'))))]",
              "properties": {
                "description": "@{workbookKey=TaniumWorkbook; logoFileName=Tanium.svg; description=Visualize Tanium endpoint and module data; dataTypesDependencies=System.Object[]; dataConnectorsDependencies=System.Object[]; previewImagesFileNames=System.Object[]; version=1.0; title=Tanium Workbook; templateRelativePath=TaniumWorkbook.json; subtitle=; provider=Tanium}.description",
                "parentId": "[variables('workbookId1')]",
                "contentId": "[variables('_workbookContentId1')]",
                "kind": "Workbook",
                "version": "[variables('workbookVersion1')]",
                "source": {
                  "kind": "Solution",
                  "name": "Tanium",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Tanium",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Tanium Inc.",
                  "email": "support@tanium.com",
                  "tier": "Partner",
                  "link": "https://support.tanium.com"
                }
              }
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Resources/templateSpecs",
      "apiVersion": "2021-05-01",
      "name": "[variables('playbookTemplateSpecName1')]",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-sentinelWorkspaceId": "[variables('workspaceResourceId')]",
        "hidden-sentinelContentType": "Playbook"
      },
      "properties": {
        "description": "Tanium-ComplyFindings playbook",
        "displayName": "Tanium-ComplyFindings playbook"
      }
    },
    {
      "type": "Microsoft.Resources/templateSpecs/versions",
      "apiVersion": "2021-05-01",
      "name": "[concat(variables('playbookTemplateSpecName1'),'/',variables('playbookVersion1'))]",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-sentinelWorkspaceId": "[variables('workspaceResourceId')]",
        "hidden-sentinelContentType": "Playbook"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/templateSpecs', variables('playbookTemplateSpecName1'))]"
      ],
      "properties": {
        "description": "Tanium-ComplyFindings Playbook with template version 2.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion1')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "Tanium-ComplyFindings",
              "type": "string"
            },
            "IntegrationAccountName": {
              "defaultValue": "Tanium-ComplyFindings-Integration",
              "type": "string",
              "metadata": {
                "description": "An Integration Account is required to run inline JavaScript actions"
              }
            },
            "IntegrationAccountPricingTier": {
              "type": "string",
              "defaultValue": "Free",
              "allowedValues": [
                "Free",
                "Basic",
                "Standard"
              ],
              "metadata": {
                "description": "Specify the Pricing Tier of the Integration Account."
              }
            },
            "TaniumApiToken": {
              "defaultValue": "",
              "type": "securestring",
              "metadata": {
                "description": "The Tanium API Token used for this logic app. The logic app will be restricted to the level of access available to the user who generated the token."
              }
            },
            "TaniumServerHostname": {
              "defaultValue": "hostname",
              "type": "String",
              "metadata": {
                "description": "The hostname for your Tanium server e.g. tanium.example.com"
              }
            }
          },
          "variables": {
            "AzureSentinelConnectionName": "[[concat('azuresentinel-', parameters('PlaybookName'))]",
            "TaniumApiGatewayApi": "[[uri(concat('https://',parameters('TaniumServerHostname')),'/plugin/products/gateway/graphql')]",
            "connection-1": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azuresentinel')]",
            "_connection-1": "[[variables('connection-1')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2018-07-01-preview",
              "name": "[[variables('AzureSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "properties": {
                "displayName": "[[variables('AzureSentinelConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-1')]"
                }
              }
            },
            {
              "type": "Microsoft.Logic/integrationAccounts",
              "apiVersion": "2016-06-01",
              "name": "[[parameters('IntegrationAccountName')]",
              "location": "[[variables('workspace-location-inline')]",
              "sku": {
                "name": "[[parameters('IntegrationAccountPricingTier')]"
              },
              "properties": {
                "state": "Enabled"
              }
            },
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2019-05-01",
              "name": "[[parameters('PlaybookName')]",
              "location": "[[variables('workspace-location-inline')]",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                "[[resourceId('Microsoft.Logic/integrationAccounts', parameters('IntegrationAccountName'))]"
              ],
              "properties": {
                "state": "Enabled",
                "integrationAccount": {
                  "id": "[[resourceId('Microsoft.Logic/integrationAccounts', parameters('IntegrationAccountName'))]"
                },
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    },
                    "TaniumApiToken": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The Tanium API Token provides access to the Tanium Server. Access is restricted to the level of access available to the user who generated the token."
                      }
                    },
                    "TaniumApiGatewayApi": {
                      "type": "String"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Add_comment_to_incident_(V3)_2": {
                      "runAfter": {
                        "Create_HTML_table": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "incidentArmId": "@triggerBody()?['object']?['id']",
                          "message": "<p>@{body('Create_HTML_table')}</p>"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/Incidents/Comment"
                      }
                    },
                    "Create_HTML_table": {
                      "runAfter": {
                        "Flatten_API_Gateway_endpoints": [
                          "Succeeded"
                        ]
                      },
                      "type": "Table",
                      "inputs": {
                        "format": "HTML",
                        "from": "@body('Flatten_API_Gateway_endpoints')"
                      }
                    },
                    "Entities_-_Get_Hosts": {
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/host"
                      }
                    },
                    "Exit_early_if_no_hosts_are_found": {
                      "actions": {
                        "Add_comment_to_incident_(V3)": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['object']?['id']",
                              "message": "<p>No hosts found for this incident.</p>"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                          }
                        },
                        "Terminate": {
                          "runAfter": {
                            "Add_comment_to_incident_(V3)": [
                              "Succeeded"
                            ]
                          },
                          "type": "Terminate",
                          "inputs": {
                            "runStatus": "Succeeded"
                          }
                        }
                      },
                      "runAfter": {
                        "Entities_-_Get_Hosts": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "less": [
                              "@length(body('Entities_-_Get_Hosts')?['Hosts'])",
                              1
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Flatten_API_Gateway_endpoints": {
                      "runAfter": {
                        "Parse_endpoints_array": [
                          "Succeeded"
                        ]
                      },
                      "type": "JavaScriptCode",
                      "inputs": {
                        "code": "var e = workflowContext.actions.Parse_endpoints_array.outputs.body;\r\n\r\nfunction sensorReadings(r) {\r\n\treturn r.columns.map(c => {\r\n\t\tif (c.sensor && c.sensor.name) {\r\n\t\t\treturn { name: [c.sensor.name, c.name].join(' - '), value: c.values.join(' ') };\r\n\t\t} else {\r\n\t\t\treturn { name: c.name, value: c.values.join(' ') };\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction flatten(obj, pk = '') {\r\n\tif (pk !== '') pk += ' ';\r\n\tlet flat = {};\r\n\tObject.keys(obj).forEach((key) => {\r\n\t\tif (key === 'sensorReadings') {\r\n\t\t\tsensorReadings(obj[key]).forEach((r) => {\r\n\t\t\t\tflat[r.name] = r.value;\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tif (typeof obj[key] === 'object' && obj[key] !== null) {\r\n\t\t\t\tObject.assign(flat, flatten(obj[key], pk + key));\r\n\t\t\t} else {\r\n\t\t\t\tflat[pk + key] = obj[key];\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\treturn flat;\r\n}\r\n\r\nreturn e.map(function(e) { return flatten(e.node); });"
                      }
                    },
                    "For_each_incident_host": {
                      "foreach": "@body('Entities_-_Get_Hosts')?['Hosts']",
                      "actions": {
                        "If_ip_address": {
                          "actions": {
                            "Append_to_endpoint_filters": {
                              "runAfter": {
                                "Compose_endpoint_filter_for_host_and_ip_address": [
                                  "Succeeded"
                                ]
                              },
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "endpoint filters",
                                "value": "@outputs('Compose_endpoint_filter_for_host_and_ip_address')"
                              }
                            },
                            "Compose_endpoint_filter_for_host_and_ip_address": {
                              "type": "Compose",
                              "inputs": {
                                "filters": [
                                  {
                                    "op": "CONTAINS",
                                    "path": "ipAddress",
                                    "value": "@{body('Parse_host_json')?['additionalData']?['LastIpAddress']}"
                                  },
                                  {
                                    "path": "name",
                                    "value": "@{body('Parse_host_json')?['hostName']}"
                                  }
                                ]
                              }
                            }
                          },
                          "runAfter": {
                            "Parse_host_json": [
                              "Succeeded"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Append_host_only_to_endpoint_filters": {
                                "runAfter": {
                                  "Compose_endpoint_filter_for_host_only": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "AppendToArrayVariable",
                                "inputs": {
                                  "name": "endpoint filters",
                                  "value": "@outputs('Compose_endpoint_filter_for_host_only')"
                                }
                              },
                              "Compose_endpoint_filter_for_host_only": {
                                "type": "Compose",
                                "inputs": {
                                  "filters": [
                                    {
                                      "path": "name",
                                      "value": "@{body('Parse_host_json')?['hostName']}"
                                    }
                                  ]
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "not": {
                                  "equals": [
                                    "@body('Parse_host_json')?['additionalData']?['LastIpAddress']",
                                    "@null"
                                  ]
                                }
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Parse_host_json": {
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@items('For_each_incident_host')",
                            "schema": {
                              "properties": {
                                "Type": {
                                  "type": "string"
                                },
                                "additionalData": {
                                  "properties": {
                                    "AvStatus": {
                                      "type": "string"
                                    },
                                    "FQDN": {
                                      "type": "string"
                                    },
                                    "HealthStatus": {
                                      "type": "string"
                                    },
                                    "LastExternalIpAddress": {
                                      "type": "string"
                                    },
                                    "LastIpAddress": {
                                      "type": "string"
                                    },
                                    "LastSeen": {
                                      "type": "string"
                                    },
                                    "LoggedOnUsers": {
                                      "type": "string"
                                    },
                                    "MdatpDeviceId": {
                                      "type": "string"
                                    },
                                    "OnboardingStatus": {
                                      "type": "string"
                                    },
                                    "RiskScore": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "friendlyName": {
                                  "type": "string"
                                },
                                "hostName": {
                                  "type": "string"
                                },
                                "osFamily": {
                                  "type": "string"
                                },
                                "osVersion": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_Endpoint_Filters_array": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "Initialize_API_Gateway_Query": {
                      "runAfter": {
                        "Exit_early_if_no_hosts_are_found": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api gateway query",
                            "type": "string",
                            "value": "query ($incidentHosts: EndpointFieldFilter, $endCursor: Cursor, $source: EndpointSource) {\n  endpoints(source: $source, first: 10, after: $endCursor, filter: $incidentHosts) {\n    edges {\n      node {\n        name\n        ipAddress\n        sensorReadings(\n          sensors: [{name: \"Comply - Compliance Percentage\"}]\n        ) {\n          columns {\n            sensor {\n              name\n            }\n            name\n            values\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}"
                          }
                        ]
                      },
                      "description": "To check this query against a Tanium Server question use this in the query variables: {\"source\":{\"ts\":{\"stableWaitTime\":10}}}"
                    },
                    "Initialize_API_Gateway_Query_Variables": {
                      "runAfter": {
                        "Initialize_Tanium_Endpoint_Source_to_TDS": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api gateway query variables",
                            "type": "string",
                            "value": "{\n  \"source\": @{variables('Tanium Endpoint Source')},\n  \"incidentHosts\": {\n    \"any\": true,\n    \"filters\": @{variables('endpoint filters')}\n  }\n}"
                          }
                        ]
                      }
                    },
                    "Initialize_API_Gateway_Response": {
                      "runAfter": {
                        "Query_API_Gateway": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "API Gateway Response",
                            "type": "object",
                            "value": "@body('Query_API_Gateway')"
                          }
                        ]
                      }
                    },
                    "Initialize_API_Gateway_query_cursor": {
                      "runAfter": {
                        "Parse_API_Gateway_response": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "cursor",
                            "type": "string",
                            "value": "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['endCursor']"
                          }
                        ]
                      }
                    },
                    "Initialize_Endpoint_Filters_array": {
                      "runAfter": {
                        "Initialize_API_Gateway_Query": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "endpoint filters",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Tanium_Endpoint_Source_to_TDS": {
                      "runAfter": {
                        "For_each_incident_host": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "tanium endpoint source",
                            "type": "object",
                            "value": {
                              "tds": {
                                "allNamespaces": false
                              }
                            }
                          }
                        ]
                      }
                    },
                    "Initialize_endpoints_array": {
                      "runAfter": {
                        "Initialize_API_Gateway_query_cursor": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "endpoints",
                            "type": "array",
                            "value": "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['edges']"
                          }
                        ]
                      }
                    },
                    "Paginate_API_Gateway_query_if_needed": {
                      "actions": {
                        "Until": {
                          "actions": {
                            "For_each_endpoint_in_paginated_API_Gateway_response": {
                              "foreach": "@body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['edges']",
                              "actions": {
                                "Append_endpoint_to_endpoints": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "endpoints",
                                    "value": "@items('For_each_endpoint_in_paginated_API_Gateway_response')"
                                  }
                                }
                              },
                              "runAfter": {
                                "Update_API_Gateway_query_cursor": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Foreach",
                              "runtimeConfiguration": {
                                "concurrency": {
                                  "repetitions": 1
                                }
                              }
                            },
                            "Paginate_API_Gateway": {
                              "runAfter": {
                                "Update_API_Gateway_query_variables": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Http",
                              "inputs": {
                                "body": {
                                  "query": "@variables('api gateway query')",
                                  "variables": "@variables('api gateway query variables')"
                                },
                                "headers": {
                                  "Content-Type": "application/json",
                                  "session": "@parameters('TaniumApiToken')"
                                },
                                "method": "POST",
                                "uri": "@parameters('TaniumApiGatewayApi')"
                              },
                              "runtimeConfiguration": {
                                "secureData": {
                                  "properties": [
                                    "inputs"
                                  ]
                                }
                              }
                            },
                            "Parse_paginated_API_Gateway_response": {
                              "runAfter": {
                                "Paginate_API_Gateway": [
                                  "Succeeded"
                                ]
                              },
                              "type": "ParseJson",
                              "inputs": {
                                "content": "@body('Paginate_API_Gateway')",
                                "schema": {
                                  "properties": {
                                    "data": {
                                      "properties": {
                                        "endpoints": {
                                          "properties": {
                                            "edges": {
                                              "items": {
                                                "properties": {
                                                  "node": {
                                                    "type": "object"
                                                  }
                                                },
                                                "required": [
                                                  "node"
                                                ],
                                                "type": "object"
                                              },
                                              "type": "array"
                                            },
                                            "pageInfo": {
                                              "properties": {
                                                "endCursor": {
                                                  "type": "string"
                                                },
                                                "hasNextPage": {
                                                  "type": "boolean"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              }
                            },
                            "Update_API_Gateway_query_cursor": {
                              "runAfter": {
                                "Parse_paginated_API_Gateway_response": [
                                  "Succeeded"
                                ]
                              },
                              "type": "SetVariable",
                              "inputs": {
                                "name": "cursor",
                                "value": "@body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['endCursor']"
                              }
                            },
                            "Update_API_Gateway_query_variables": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "api gateway query variables",
                                "value": "{\n  \"source\": @{variables('tanium endpoint source')},\n  \"endCursor\": \"@{variables('cursor')}\"\n}"
                              }
                            }
                          },
                          "expression": "@equals(body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['hasNextPage'], false)",
                          "limit": {
                            "count": 60,
                            "timeout": "PT1H"
                          },
                          "type": "Until"
                        }
                      },
                      "runAfter": {
                        "Initialize_endpoints_array": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['hasNextPage']",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Parse_API_Gateway_response": {
                      "runAfter": {
                        "Switch_to_TS_from_TDS_if_needed": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@variables('API Gateway Response')",
                        "schema": {
                          "properties": {
                            "data": {
                              "properties": {
                                "endpoints": {
                                  "properties": {
                                    "edges": {
                                      "items": {
                                        "properties": {
                                          "node": {
                                            "type": "object"
                                          }
                                        },
                                        "required": [
                                          "node"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "pageInfo": {
                                      "properties": {
                                        "endCursor": {
                                          "type": "string"
                                        },
                                        "hasNextPage": {
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "errors": {
                              "items": {
                                "properties": {
                                  "message": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "message"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "Parse_endpoints_array": {
                      "runAfter": {
                        "Paginate_API_Gateway_query_if_needed": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@variables('endpoints')",
                        "schema": {
                          "type": "array"
                        }
                      },
                      "description": "We need an action's output to use in the JavaScript code since it can't read from a variable"
                    },
                    "Query_API_Gateway": {
                      "runAfter": {
                        "Initialize_API_Gateway_Query_Variables": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "body": {
                          "query": "@variables('api gateway query')",
                          "variables": "@variables('api gateway query variables')"
                        },
                        "headers": {
                          "Content-Type": "application/json",
                          "session": "@parameters('TaniumApiToken')"
                        },
                        "method": "POST",
                        "uri": "@parameters('TaniumApiGatewayApi')"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "inputs"
                          ]
                        }
                      }
                    },
                    "Switch_to_TS_from_TDS_if_needed": {
                      "actions": {
                        "Requery_the_API_Gateway": {
                          "runAfter": {
                            "Update_API_Query_variables_to_get_new_source": [
                              "Succeeded"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "body": {
                              "query": "@variables('api gateway query')",
                              "variables": "@variables('api gateway query variables')"
                            },
                            "headers": {
                              "Content-Type": "application/json",
                              "session": "@parameters('TaniumApiToken')"
                            },
                            "method": "POST",
                            "uri": "@parameters('TaniumApiGatewayApi')"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs"
                              ]
                            }
                          }
                        },
                        "Set_Tanium_Endpoint_Source_to_TS": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "tanium endpoint source",
                            "value": {
                              "ts": {
                                "stableWaitTime": 30
                              }
                            }
                          }
                        },
                        "Update_API_Gateway_Response": {
                          "runAfter": {
                            "Requery_the_API_Gateway": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "API Gateway Response",
                            "value": "@body('Requery_the_API_Gateway')"
                          }
                        },
                        "Update_API_Query_variables_to_get_new_source": {
                          "runAfter": {
                            "Set_Tanium_Endpoint_Source_to_TS": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "api gateway query variables",
                            "value": "{\n  \"source\": @{variables('Tanium Endpoint Source')},\n  \"incidentHosts\": {\n    \"any\": true,\n    \"filters\": @{variables('endpoint filters')}\n  }\n}"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_API_Gateway_Response": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "contains": [
                              "@string(body('Query_API_Gateway'))",
                              "must refer to an existing sensor"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionName": "[[variables('AzureSentinelConnectionName')]",
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                        "id": "[[concat('/subscriptions/',subscription().subscriptionId, '/providers/Microsoft.Web/locations/',variables('workspace-location-inline'),'/managedApis/azuresentinel')]"
                      }
                    }
                  },
                  "TaniumApiToken": {
                    "value": "[[parameters('TaniumApiToken')]"
                  },
                  "TaniumApiGatewayApi": {
                    "value": "[[variables('TaniumApiGatewayApi')]"
                  }
                }
              },
              "tags": {
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId1'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId1')]",
                "contentId": "[variables('_playbookContentId1')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion1')]",
                "source": {
                  "kind": "Solution",
                  "name": "Tanium",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Tanium",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Tanium Inc.",
                  "email": "support@tanium.com",
                  "tier": "Partner",
                  "link": "https://support.tanium.com"
                }
              }
            }
          ],
          "metadata": {
            "title": "Tanium-ComplyFindings",
            "description": "This playbook starts with a Microsoft Sentinel incident, gets the hosts associated with that incident, queries the Tanium API Gateway for Comply Findings for those hosts, and then adds a comment to the incident with that information.",
            "prerequisites": [
              "1. Microsoft Sentinel incidents with associated hosts.",
              "2. A [Tanium API Token](https://docs.tanium.com/platform_user/platform_user/console_api_tokens.html) granting access to your Tanium environment: the query will be made with the user priviledges of that token.",
              "3. A hostname for your Tanium environment reachable from Logic Apps."
            ],
            "postDeploymentSteps": [
              "1. Ensure the Logic App API connection to Microsoft Sentinel is authenticated."
            ],
            "entities": [
              "host"
            ],
            "tags": [
              "Enrichment"
            ],
            "lastUpdateTime": "2022-09-15T00:00:00Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/templateSpecs",
      "apiVersion": "2021-05-01",
      "name": "[variables('playbookTemplateSpecName2')]",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-sentinelWorkspaceId": "[variables('workspaceResourceId')]",
        "hidden-sentinelContentType": "Playbook"
      },
      "properties": {
        "description": "Tanium-GeneralHostInfo playbook",
        "displayName": "Tanium-GeneralHostInfo playbook"
      }
    },
    {
      "type": "Microsoft.Resources/templateSpecs/versions",
      "apiVersion": "2021-05-01",
      "name": "[concat(variables('playbookTemplateSpecName2'),'/',variables('playbookVersion2'))]",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-sentinelWorkspaceId": "[variables('workspaceResourceId')]",
        "hidden-sentinelContentType": "Playbook"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/templateSpecs', variables('playbookTemplateSpecName2'))]"
      ],
      "properties": {
        "description": "Tanium-GeneralHostInfo Playbook with template version 2.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion2')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "Tanium-GeneralHostInfo",
              "type": "string"
            },
            "IntegrationAccountName": {
              "defaultValue": "Tanium-GeneralHostInfo-Integration",
              "type": "string",
              "metadata": {
                "description": "An Integration Account is required to run inline JavaScript actions"
              }
            },
            "IntegrationAccountPricingTier": {
              "type": "string",
              "defaultValue": "Free",
              "allowedValues": [
                "Free",
                "Basic",
                "Standard"
              ],
              "metadata": {
                "description": "Specify the Pricing Tier of the Integration Account."
              }
            },
            "TaniumApiToken": {
              "defaultValue": "",
              "type": "securestring",
              "metadata": {
                "description": "The Tanium API Token used for this logic app. The logic app will be restricted to the level of access available to the user who generated the token."
              }
            },
            "TaniumServerHostname": {
              "defaultValue": "hostname",
              "type": "String",
              "metadata": {
                "description": "The hostname for your Tanium server e.g. tanium.example.com"
              }
            }
          },
          "variables": {
            "AzureSentinelConnectionName": "[[concat('azuresentinel-', parameters('PlaybookName'))]",
            "TaniumApiGatewayApi": "[[uri(concat('https://',parameters('TaniumServerHostname')),'/plugin/products/gateway/graphql')]",
            "connection-1": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azuresentinel')]",
            "_connection-1": "[[variables('connection-1')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2018-07-01-preview",
              "name": "[[variables('AzureSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "properties": {
                "displayName": "[[variables('AzureSentinelConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-1')]"
                }
              }
            },
            {
              "type": "Microsoft.Logic/integrationAccounts",
              "apiVersion": "2016-06-01",
              "name": "[[parameters('IntegrationAccountName')]",
              "location": "[[variables('workspace-location-inline')]",
              "sku": {
                "name": "[[parameters('IntegrationAccountPricingTier')]"
              },
              "properties": {
                "state": "Enabled"
              }
            },
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2019-05-01",
              "name": "[[parameters('PlaybookName')]",
              "location": "[[variables('workspace-location-inline')]",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                "[[resourceId('Microsoft.Logic/integrationAccounts', parameters('IntegrationAccountName'))]"
              ],
              "properties": {
                "state": "Enabled",
                "integrationAccount": {
                  "id": "[[resourceId('Microsoft.Logic/integrationAccounts', parameters('IntegrationAccountName'))]"
                },
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    },
                    "TaniumApiToken": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The Tanium API Token provides access to the Tanium Server. Access is restricted to the level of access available to the user who generated the token."
                      }
                    },
                    "TaniumApiGatewayApi": {
                      "type": "String"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Add_comment_to_incident_(V3)_2": {
                      "runAfter": {
                        "Create_HTML_table": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "incidentArmId": "@triggerBody()?['object']?['id']",
                          "message": "<p>@{body('Create_HTML_table')}</p>"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/Incidents/Comment"
                      }
                    },
                    "Create_HTML_table": {
                      "runAfter": {
                        "Flatten_API_Gateway_endpoints": [
                          "Succeeded"
                        ]
                      },
                      "type": "Table",
                      "inputs": {
                        "format": "HTML",
                        "from": "@body('Flatten_API_Gateway_endpoints')"
                      }
                    },
                    "Entities_-_Get_Hosts": {
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/host"
                      }
                    },
                    "Exit_early_if_no_hosts_are_found": {
                      "actions": {
                        "Add_comment_to_incident_(V3)": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['object']?['id']",
                              "message": "<p>No hosts found for this incident.</p>"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                          }
                        },
                        "Terminate": {
                          "runAfter": {
                            "Add_comment_to_incident_(V3)": [
                              "Succeeded"
                            ]
                          },
                          "type": "Terminate",
                          "inputs": {
                            "runStatus": "Succeeded"
                          }
                        }
                      },
                      "runAfter": {
                        "Entities_-_Get_Hosts": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "less": [
                              "@length(body('Entities_-_Get_Hosts')?['Hosts'])",
                              1
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Flatten_API_Gateway_endpoints": {
                      "runAfter": {
                        "Parse_endpoints_array": [
                          "Succeeded"
                        ]
                      },
                      "type": "JavaScriptCode",
                      "inputs": {
                        "code": "var e = workflowContext.actions.Parse_endpoints_array.outputs.body;\r\n\r\nfunction sensorReadings(r) {\r\n\treturn r.columns.map(c => {\r\n\t\tif (c.sensor && c.sensor.name) {\r\n\t\t\treturn { name: [c.sensor.name, c.name].join(' - '), value: c.values.join(' ') };\r\n\t\t} else {\r\n\t\t\treturn { name: c.name, value: c.values.join(' ') };\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction flatten(obj, pk = '') {\r\n\tif (pk !== '') pk += ' ';\r\n\tlet flat = {};\r\n\tObject.keys(obj).forEach((key) => {\r\n\t\tif (key === 'sensorReadings') {\r\n\t\t\tsensorReadings(obj[key]).forEach((r) => {\r\n\t\t\t\tflat[r.name] = r.value;\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tif (typeof obj[key] === 'object' && obj[key] !== null) {\r\n\t\t\t\tObject.assign(flat, flatten(obj[key], pk + key));\r\n\t\t\t} else {\r\n\t\t\t\tflat[pk + key] = obj[key];\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\treturn flat;\r\n}\r\n\r\nreturn e.map(function(e) { return flatten(e.node); });"
                      }
                    },
                    "For_each_incident_host": {
                      "foreach": "@body('Entities_-_Get_Hosts')?['Hosts']",
                      "actions": {
                        "If_ip_address": {
                          "actions": {
                            "Append_to_endpoint_filters": {
                              "runAfter": {
                                "Compose_endpoint_filter_for_host_and_ip_address": [
                                  "Succeeded"
                                ]
                              },
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "endpoint filters",
                                "value": "@outputs('Compose_endpoint_filter_for_host_and_ip_address')"
                              }
                            },
                            "Compose_endpoint_filter_for_host_and_ip_address": {
                              "type": "Compose",
                              "inputs": {
                                "filters": [
                                  {
                                    "op": "CONTAINS",
                                    "path": "ipAddress",
                                    "value": "@{body('Parse_host_json')?['additionalData']?['LastIpAddress']}"
                                  },
                                  {
                                    "path": "name",
                                    "value": "@{body('Parse_host_json')?['hostName']}"
                                  }
                                ]
                              }
                            }
                          },
                          "runAfter": {
                            "Parse_host_json": [
                              "Succeeded"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Append_host_only_to_endpoint_filters": {
                                "runAfter": {
                                  "Compose_endpoint_filter_for_host_only": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "AppendToArrayVariable",
                                "inputs": {
                                  "name": "endpoint filters",
                                  "value": "@outputs('Compose_endpoint_filter_for_host_only')"
                                }
                              },
                              "Compose_endpoint_filter_for_host_only": {
                                "type": "Compose",
                                "inputs": {
                                  "filters": [
                                    {
                                      "path": "name",
                                      "value": "@{body('Parse_host_json')?['hostName']}"
                                    }
                                  ]
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "not": {
                                  "equals": [
                                    "@body('Parse_host_json')?['additionalData']?['LastIpAddress']",
                                    "@null"
                                  ]
                                }
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Parse_host_json": {
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@items('For_each_incident_host')",
                            "schema": {
                              "properties": {
                                "Type": {
                                  "type": "string"
                                },
                                "additionalData": {
                                  "properties": {
                                    "AvStatus": {
                                      "type": "string"
                                    },
                                    "FQDN": {
                                      "type": "string"
                                    },
                                    "HealthStatus": {
                                      "type": "string"
                                    },
                                    "LastExternalIpAddress": {
                                      "type": "string"
                                    },
                                    "LastIpAddress": {
                                      "type": "string"
                                    },
                                    "LastSeen": {
                                      "type": "string"
                                    },
                                    "LoggedOnUsers": {
                                      "type": "string"
                                    },
                                    "MdatpDeviceId": {
                                      "type": "string"
                                    },
                                    "OnboardingStatus": {
                                      "type": "string"
                                    },
                                    "RiskScore": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "friendlyName": {
                                  "type": "string"
                                },
                                "hostName": {
                                  "type": "string"
                                },
                                "osFamily": {
                                  "type": "string"
                                },
                                "osVersion": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_Endpoint_Filters_array": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "Initialize_API_Gateway_Query": {
                      "runAfter": {
                        "Exit_early_if_no_hosts_are_found": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api gateway query",
                            "type": "string",
                            "value": "query ($incidentHosts: EndpointFieldFilter, $endCursor: Cursor, $source: EndpointSource) {\n  endpoints(\n    source: $source\n    first: 10\n    after: $endCursor\n    filter: $incidentHosts\n  ) {\n    edges {\n      node {\n        id\n        name\n        ipAddress\n        os { platform generation }\n        disks {\n          name\n          free\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}"
                          }
                        ]
                      },
                      "description": "To check this query against a Tanium Server question use this in the query variables: {\"source\":{\"ts\":{\"stableWaitTime\":10}}}"
                    },
                    "Initialize_API_Gateway_Query_Variables": {
                      "runAfter": {
                        "Initialize_Tanium_Endpoint_Source_to_TDS": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api gateway query variables",
                            "type": "string",
                            "value": "{\n  \"source\": @{variables('Tanium Endpoint Source')},\n  \"incidentHosts\": {\n    \"any\": true,\n    \"filters\": @{variables('endpoint filters')}\n  }\n}"
                          }
                        ]
                      }
                    },
                    "Initialize_API_Gateway_Response": {
                      "runAfter": {
                        "Query_API_Gateway": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "API Gateway Response",
                            "type": "object",
                            "value": "@body('Query_API_Gateway')"
                          }
                        ]
                      }
                    },
                    "Initialize_API_Gateway_query_cursor": {
                      "runAfter": {
                        "Parse_API_Gateway_response": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "cursor",
                            "type": "string",
                            "value": "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['endCursor']"
                          }
                        ]
                      }
                    },
                    "Initialize_Endpoint_Filters_array": {
                      "runAfter": {
                        "Initialize_API_Gateway_Query": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "endpoint filters",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Tanium_Endpoint_Source_to_TDS": {
                      "runAfter": {
                        "For_each_incident_host": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "tanium endpoint source",
                            "type": "object",
                            "value": {
                              "tds": {
                                "allNamespaces": false
                              }
                            }
                          }
                        ]
                      }
                    },
                    "Initialize_endpoints_array": {
                      "runAfter": {
                        "Initialize_API_Gateway_query_cursor": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "endpoints",
                            "type": "array",
                            "value": "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['edges']"
                          }
                        ]
                      }
                    },
                    "Paginate_API_Gateway_query_if_needed": {
                      "actions": {
                        "Until": {
                          "actions": {
                            "For_each_endpoint_in_paginated_API_Gateway_response": {
                              "foreach": "@body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['edges']",
                              "actions": {
                                "Append_endpoint_to_endpoints": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "endpoints",
                                    "value": "@items('For_each_endpoint_in_paginated_API_Gateway_response')"
                                  }
                                }
                              },
                              "runAfter": {
                                "Update_API_Gateway_query_cursor": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Foreach",
                              "runtimeConfiguration": {
                                "concurrency": {
                                  "repetitions": 1
                                }
                              }
                            },
                            "Paginate_API_Gateway": {
                              "runAfter": {
                                "Update_API_Gateway_query_variables": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Http",
                              "inputs": {
                                "body": {
                                  "query": "@variables('api gateway query')",
                                  "variables": "@variables('api gateway query variables')"
                                },
                                "headers": {
                                  "Content-Type": "application/json",
                                  "session": "@parameters('TaniumApiToken')"
                                },
                                "method": "POST",
                                "uri": "@parameters('TaniumApiGatewayApi')"
                              },
                              "runtimeConfiguration": {
                                "secureData": {
                                  "properties": [
                                    "inputs"
                                  ]
                                }
                              }
                            },
                            "Parse_paginated_API_Gateway_response": {
                              "runAfter": {
                                "Paginate_API_Gateway": [
                                  "Succeeded"
                                ]
                              },
                              "type": "ParseJson",
                              "inputs": {
                                "content": "@body('Paginate_API_Gateway')",
                                "schema": {
                                  "properties": {
                                    "data": {
                                      "properties": {
                                        "endpoints": {
                                          "properties": {
                                            "edges": {
                                              "items": {
                                                "properties": {
                                                  "node": {
                                                    "type": "object"
                                                  }
                                                },
                                                "required": [
                                                  "node"
                                                ],
                                                "type": "object"
                                              },
                                              "type": "array"
                                            },
                                            "pageInfo": {
                                              "properties": {
                                                "endCursor": {
                                                  "type": "string"
                                                },
                                                "hasNextPage": {
                                                  "type": "boolean"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              }
                            },
                            "Update_API_Gateway_query_cursor": {
                              "runAfter": {
                                "Parse_paginated_API_Gateway_response": [
                                  "Succeeded"
                                ]
                              },
                              "type": "SetVariable",
                              "inputs": {
                                "name": "cursor",
                                "value": "@body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['endCursor']"
                              }
                            },
                            "Update_API_Gateway_query_variables": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "api gateway query variables",
                                "value": "{\n  \"source\": @{variables('tanium endpoint source')},\n  \"endCursor\": \"@{variables('cursor')}\"\n}"
                              }
                            }
                          },
                          "expression": "@equals(body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['hasNextPage'], false)",
                          "limit": {
                            "count": 60,
                            "timeout": "PT1H"
                          },
                          "type": "Until"
                        }
                      },
                      "runAfter": {
                        "Initialize_endpoints_array": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['hasNextPage']",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Parse_API_Gateway_response": {
                      "runAfter": {
                        "Switch_to_TS_from_TDS_if_needed": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@variables('API Gateway Response')",
                        "schema": {
                          "properties": {
                            "data": {
                              "properties": {
                                "endpoints": {
                                  "properties": {
                                    "edges": {
                                      "items": {
                                        "properties": {
                                          "node": {
                                            "type": "object"
                                          }
                                        },
                                        "required": [
                                          "node"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "pageInfo": {
                                      "properties": {
                                        "endCursor": {
                                          "type": "string"
                                        },
                                        "hasNextPage": {
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "errors": {
                              "items": {
                                "properties": {
                                  "message": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "message"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "Parse_endpoints_array": {
                      "runAfter": {
                        "Paginate_API_Gateway_query_if_needed": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@variables('endpoints')",
                        "schema": {
                          "type": "array"
                        }
                      },
                      "description": "We need an action's output to use in the JavaScript code since it can't read from a variable"
                    },
                    "Query_API_Gateway": {
                      "runAfter": {
                        "Initialize_API_Gateway_Query_Variables": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "body": {
                          "query": "@variables('api gateway query')",
                          "variables": "@variables('api gateway query variables')"
                        },
                        "headers": {
                          "Content-Type": "application/json",
                          "session": "@parameters('TaniumApiToken')"
                        },
                        "method": "POST",
                        "uri": "@parameters('TaniumApiGatewayApi')"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "inputs"
                          ]
                        }
                      }
                    },
                    "Switch_to_TS_from_TDS_if_needed": {
                      "actions": {
                        "Requery_the_API_Gateway": {
                          "runAfter": {
                            "Update_API_Query_variables_to_get_new_source": [
                              "Succeeded"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "body": {
                              "query": "@variables('api gateway query')",
                              "variables": "@variables('api gateway query variables')"
                            },
                            "headers": {
                              "Content-Type": "application/json",
                              "session": "@parameters('TaniumApiToken')"
                            },
                            "method": "POST",
                            "uri": "@parameters('TaniumApiGatewayApi')"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs"
                              ]
                            }
                          }
                        },
                        "Set_Tanium_Endpoint_Source_to_TS": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "tanium endpoint source",
                            "value": {
                              "ts": {
                                "stableWaitTime": 30
                              }
                            }
                          }
                        },
                        "Update_API_Gateway_Response": {
                          "runAfter": {
                            "Requery_the_API_Gateway": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "API Gateway Response",
                            "value": "@body('Requery_the_API_Gateway')"
                          }
                        },
                        "Update_API_Query_variables_to_get_new_source": {
                          "runAfter": {
                            "Set_Tanium_Endpoint_Source_to_TS": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "api gateway query variables",
                            "value": "{\n  \"source\": @{variables('Tanium Endpoint Source')},\n  \"incidentHosts\": {\n    \"any\": true,\n    \"filters\": @{variables('endpoint filters')}\n  }\n}"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_API_Gateway_Response": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "contains": [
                              "@string(body('Query_API_Gateway'))",
                              "must refer to an existing sensor"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionName": "[[variables('AzureSentinelConnectionName')]",
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                        "id": "[[concat('/subscriptions/',subscription().subscriptionId, '/providers/Microsoft.Web/locations/',variables('workspace-location-inline'),'/managedApis/azuresentinel')]"
                      }
                    }
                  },
                  "TaniumApiToken": {
                    "value": "[[parameters('TaniumApiToken')]"
                  },
                  "TaniumApiGatewayApi": {
                    "value": "[[variables('TaniumApiGatewayApi')]"
                  }
                }
              },
              "tags": {
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId2'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId2')]",
                "contentId": "[variables('_playbookContentId2')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion2')]",
                "source": {
                  "kind": "Solution",
                  "name": "Tanium",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Tanium",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Tanium Inc.",
                  "email": "support@tanium.com",
                  "tier": "Partner",
                  "link": "https://support.tanium.com"
                }
              }
            }
          ],
          "metadata": {
            "title": "Tanium-GeneralHostInfo",
            "description": "This playbook starts with a Microsoft Sentinel incident, gets the hosts associated with that incident, queries the Tanium API Gateway for general endpoint information for those hosts, and then adds a comment to the incident with that information.",
            "prerequisites": [
              "1. Microsoft Sentinel incidents with associated hosts.",
              "2. A [Tanium API Token](https://docs.tanium.com/platform_user/platform_user/console_api_tokens.html) granting access to your Tanium environment: the query will be made with the user priviledges of that token.",
              "3. A hostname for your Tanium environment reachable from Logic Apps."
            ],
            "postDeploymentSteps": [
              "1. Ensure the Logic App API connection to Microsoft Sentinel is authenticated."
            ],
            "entities": [
              "host"
            ],
            "tags": [
              "Enrichment"
            ],
            "lastUpdateTime": "2022-09-15T00:00:00Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/templateSpecs",
      "apiVersion": "2021-05-01",
      "name": "[variables('playbookTemplateSpecName3')]",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-sentinelWorkspaceId": "[variables('workspaceResourceId')]",
        "hidden-sentinelContentType": "Playbook"
      },
      "properties": {
        "description": "Tanium-MSDefenderHealth playbook",
        "displayName": "Tanium-MSDefenderHealth playbook"
      }
    },
    {
      "type": "Microsoft.Resources/templateSpecs/versions",
      "apiVersion": "2021-05-01",
      "name": "[concat(variables('playbookTemplateSpecName3'),'/',variables('playbookVersion3'))]",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-sentinelWorkspaceId": "[variables('workspaceResourceId')]",
        "hidden-sentinelContentType": "Playbook"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/templateSpecs', variables('playbookTemplateSpecName3'))]"
      ],
      "properties": {
        "description": "Tanium-MSDefenderHealth Playbook with template version 2.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion3')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "Tanium-MSDefenderHealth",
              "type": "string"
            },
            "IntegrationAccountName": {
              "defaultValue": "Tanium-MSDefenderHealth-Integration",
              "type": "string",
              "metadata": {
                "description": "An Integration Account is required to run inline JavaScript actions"
              }
            },
            "IntegrationAccountPricingTier": {
              "type": "string",
              "defaultValue": "Free",
              "allowedValues": [
                "Free",
                "Basic",
                "Standard"
              ],
              "metadata": {
                "description": "Specify the Pricing Tier of the Integration Account."
              }
            },
            "TaniumApiToken": {
              "defaultValue": "",
              "type": "securestring",
              "metadata": {
                "description": "The Tanium API Token used for this logic app. The logic app will be restricted to the level of access available to the user who generated the token."
              }
            },
            "TaniumServerHostname": {
              "defaultValue": "hostname",
              "type": "String",
              "metadata": {
                "description": "The hostname for your Tanium server e.g. tanium.example.com"
              }
            }
          },
          "variables": {
            "AzureSentinelConnectionName": "[[concat('azuresentinel-', parameters('PlaybookName'))]",
            "TaniumApiGatewayApi": "[[uri(concat('https://',parameters('TaniumServerHostname')),'/plugin/products/gateway/graphql')]",
            "connection-1": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azuresentinel')]",
            "_connection-1": "[[variables('connection-1')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2018-07-01-preview",
              "name": "[[variables('AzureSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "properties": {
                "displayName": "[[variables('AzureSentinelConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-1')]"
                }
              }
            },
            {
              "type": "Microsoft.Logic/integrationAccounts",
              "apiVersion": "2016-06-01",
              "name": "[[parameters('IntegrationAccountName')]",
              "location": "[[variables('workspace-location-inline')]",
              "sku": {
                "name": "[[parameters('IntegrationAccountPricingTier')]"
              },
              "properties": {
                "state": "Enabled"
              }
            },
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2019-05-01",
              "name": "[[parameters('PlaybookName')]",
              "location": "[[variables('workspace-location-inline')]",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                "[[resourceId('Microsoft.Logic/integrationAccounts', parameters('IntegrationAccountName'))]"
              ],
              "properties": {
                "state": "Enabled",
                "integrationAccount": {
                  "id": "[[resourceId('Microsoft.Logic/integrationAccounts', parameters('IntegrationAccountName'))]"
                },
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    },
                    "TaniumApiToken": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The Tanium API Token provides access to the Tanium Server. Access is restricted to the level of access available to the user who generated the token."
                      }
                    },
                    "TaniumApiGatewayApi": {
                      "type": "String"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Add_comment_to_incident_(V3)_2": {
                      "runAfter": {
                        "Create_HTML_table": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "incidentArmId": "@triggerBody()?['object']?['id']",
                          "message": "<p>@{body('Create_HTML_table')}</p>"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/Incidents/Comment"
                      }
                    },
                    "Create_HTML_table": {
                      "runAfter": {
                        "Flatten_API_Gateway_endpoints": [
                          "Succeeded"
                        ]
                      },
                      "type": "Table",
                      "inputs": {
                        "format": "HTML",
                        "from": "@body('Flatten_API_Gateway_endpoints')"
                      }
                    },
                    "Entities_-_Get_Hosts": {
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/host"
                      }
                    },
                    "Exit_early_if_no_hosts_are_found": {
                      "actions": {
                        "Add_comment_to_incident_(V3)": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['object']?['id']",
                              "message": "<p>No hosts found for this incident.</p>"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                          }
                        },
                        "Terminate": {
                          "runAfter": {
                            "Add_comment_to_incident_(V3)": [
                              "Succeeded"
                            ]
                          },
                          "type": "Terminate",
                          "inputs": {
                            "runStatus": "Succeeded"
                          }
                        }
                      },
                      "runAfter": {
                        "Entities_-_Get_Hosts": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "less": [
                              "@length(body('Entities_-_Get_Hosts')?['Hosts'])",
                              1
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Flatten_API_Gateway_endpoints": {
                      "runAfter": {
                        "Parse_endpoints_array": [
                          "Succeeded"
                        ]
                      },
                      "type": "JavaScriptCode",
                      "inputs": {
                        "code": "var e = workflowContext.actions.Parse_endpoints_array.outputs.body;\r\n\r\nfunction sensorReadings(r) {\r\n\treturn r.columns.map(c => {\r\n\t\tif (c.sensor && c.sensor.name) {\r\n\t\t\treturn { name: [c.sensor.name, c.name].join(' - '), value: c.values.join(' ') };\r\n\t\t} else {\r\n\t\t\treturn { name: c.name, value: c.values.join(' ') };\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction flatten(obj, pk = '') {\r\n\tif (pk !== '') pk += ' ';\r\n\tlet flat = {};\r\n\tObject.keys(obj).forEach((key) => {\r\n\t\tif (key === 'sensorReadings') {\r\n\t\t\tsensorReadings(obj[key]).forEach((r) => {\r\n\t\t\t\tflat[r.name] = r.value;\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tif (typeof obj[key] === 'object' && obj[key] !== null) {\r\n\t\t\t\tObject.assign(flat, flatten(obj[key], pk + key));\r\n\t\t\t} else {\r\n\t\t\t\tflat[pk + key] = obj[key];\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\treturn flat;\r\n}\r\n\r\nreturn e.map(function(e) { return flatten(e.node); });"
                      }
                    },
                    "For_each_incident_host": {
                      "foreach": "@body('Entities_-_Get_Hosts')?['Hosts']",
                      "actions": {
                        "If_ip_address": {
                          "actions": {
                            "Append_to_endpoint_filters": {
                              "runAfter": {
                                "Compose_endpoint_filter_for_host_and_ip_address": [
                                  "Succeeded"
                                ]
                              },
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "endpoint filters",
                                "value": "@outputs('Compose_endpoint_filter_for_host_and_ip_address')"
                              }
                            },
                            "Compose_endpoint_filter_for_host_and_ip_address": {
                              "type": "Compose",
                              "inputs": {
                                "filters": [
                                  {
                                    "op": "CONTAINS",
                                    "path": "ipAddress",
                                    "value": "@{body('Parse_host_json')?['additionalData']?['LastIpAddress']}"
                                  },
                                  {
                                    "path": "name",
                                    "value": "@{body('Parse_host_json')?['hostName']}"
                                  }
                                ]
                              }
                            }
                          },
                          "runAfter": {
                            "Parse_host_json": [
                              "Succeeded"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Append_host_only_to_endpoint_filters": {
                                "runAfter": {
                                  "Compose_endpoint_filter_for_host_only": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "AppendToArrayVariable",
                                "inputs": {
                                  "name": "endpoint filters",
                                  "value": "@outputs('Compose_endpoint_filter_for_host_only')"
                                }
                              },
                              "Compose_endpoint_filter_for_host_only": {
                                "type": "Compose",
                                "inputs": {
                                  "filters": [
                                    {
                                      "path": "name",
                                      "value": "@{body('Parse_host_json')?['hostName']}"
                                    }
                                  ]
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "not": {
                                  "equals": [
                                    "@body('Parse_host_json')?['additionalData']?['LastIpAddress']",
                                    "@null"
                                  ]
                                }
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Parse_host_json": {
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@items('For_each_incident_host')",
                            "schema": {
                              "properties": {
                                "Type": {
                                  "type": "string"
                                },
                                "additionalData": {
                                  "properties": {
                                    "AvStatus": {
                                      "type": "string"
                                    },
                                    "FQDN": {
                                      "type": "string"
                                    },
                                    "HealthStatus": {
                                      "type": "string"
                                    },
                                    "LastExternalIpAddress": {
                                      "type": "string"
                                    },
                                    "LastIpAddress": {
                                      "type": "string"
                                    },
                                    "LastSeen": {
                                      "type": "string"
                                    },
                                    "LoggedOnUsers": {
                                      "type": "string"
                                    },
                                    "MdatpDeviceId": {
                                      "type": "string"
                                    },
                                    "OnboardingStatus": {
                                      "type": "string"
                                    },
                                    "RiskScore": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "friendlyName": {
                                  "type": "string"
                                },
                                "hostName": {
                                  "type": "string"
                                },
                                "osFamily": {
                                  "type": "string"
                                },
                                "osVersion": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_Endpoint_Filters_array": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "Initialize_API_Gateway_Query": {
                      "runAfter": {
                        "Exit_early_if_no_hosts_are_found": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api gateway query",
                            "type": "string",
                            "value": "query ($incidentHosts: EndpointFieldFilter, $endCursor: Cursor, $source: EndpointSource) {\n  endpoints(source: $source, first: 10, after: $endCursor, filter: $incidentHosts) {\n    edges {\n      node {\n        name\n        ipAddress\n        sensorReadings(\n          sensors: [{name: \"Microsoft Defender Installed\"}, {name: \"Microsoft Defender Health Details\"}]\n        ) {\n          columns {\n            sensor {\n              name\n            }\n            name\n            values\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}"
                          }
                        ]
                      },
                      "description": "To check this query against a Tanium Server question use this in the query variables: {\"source\":{\"ts\":{\"stableWaitTime\":10}}}"
                    },
                    "Initialize_API_Gateway_Query_Variables": {
                      "runAfter": {
                        "Initialize_Tanium_Endpoint_Source_to_TDS": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api gateway query variables",
                            "type": "string",
                            "value": "{\n  \"source\": @{variables('Tanium Endpoint Source')},\n  \"incidentHosts\": {\n    \"any\": true,\n    \"filters\": @{variables('endpoint filters')}\n  }\n}"
                          }
                        ]
                      }
                    },
                    "Initialize_API_Gateway_Response": {
                      "runAfter": {
                        "Query_API_Gateway": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "API Gateway Response",
                            "type": "object",
                            "value": "@body('Query_API_Gateway')"
                          }
                        ]
                      }
                    },
                    "Initialize_API_Gateway_query_cursor": {
                      "runAfter": {
                        "Parse_API_Gateway_response": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "cursor",
                            "type": "string",
                            "value": "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['endCursor']"
                          }
                        ]
                      }
                    },
                    "Initialize_Endpoint_Filters_array": {
                      "runAfter": {
                        "Initialize_API_Gateway_Query": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "endpoint filters",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Tanium_Endpoint_Source_to_TDS": {
                      "runAfter": {
                        "For_each_incident_host": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "tanium endpoint source",
                            "type": "object",
                            "value": {
                              "tds": {
                                "allNamespaces": false
                              }
                            }
                          }
                        ]
                      }
                    },
                    "Initialize_endpoints_array": {
                      "runAfter": {
                        "Initialize_API_Gateway_query_cursor": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "endpoints",
                            "type": "array",
                            "value": "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['edges']"
                          }
                        ]
                      }
                    },
                    "Paginate_API_Gateway_query_if_needed": {
                      "actions": {
                        "Until": {
                          "actions": {
                            "For_each_endpoint_in_paginated_API_Gateway_response": {
                              "foreach": "@body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['edges']",
                              "actions": {
                                "Append_endpoint_to_endpoints": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "endpoints",
                                    "value": "@items('For_each_endpoint_in_paginated_API_Gateway_response')"
                                  }
                                }
                              },
                              "runAfter": {
                                "Update_API_Gateway_query_cursor": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Foreach",
                              "runtimeConfiguration": {
                                "concurrency": {
                                  "repetitions": 1
                                }
                              }
                            },
                            "Paginate_API_Gateway": {
                              "runAfter": {
                                "Update_API_Gateway_query_variables": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Http",
                              "inputs": {
                                "body": {
                                  "query": "@variables('api gateway query')",
                                  "variables": "@variables('api gateway query variables')"
                                },
                                "headers": {
                                  "Content-Type": "application/json",
                                  "session": "@parameters('TaniumApiToken')"
                                },
                                "method": "POST",
                                "uri": "@parameters('TaniumApiGatewayApi')"
                              },
                              "runtimeConfiguration": {
                                "secureData": {
                                  "properties": [
                                    "inputs"
                                  ]
                                }
                              }
                            },
                            "Parse_paginated_API_Gateway_response": {
                              "runAfter": {
                                "Paginate_API_Gateway": [
                                  "Succeeded"
                                ]
                              },
                              "type": "ParseJson",
                              "inputs": {
                                "content": "@body('Paginate_API_Gateway')",
                                "schema": {
                                  "properties": {
                                    "data": {
                                      "properties": {
                                        "endpoints": {
                                          "properties": {
                                            "edges": {
                                              "items": {
                                                "properties": {
                                                  "node": {
                                                    "type": "object"
                                                  }
                                                },
                                                "required": [
                                                  "node"
                                                ],
                                                "type": "object"
                                              },
                                              "type": "array"
                                            },
                                            "pageInfo": {
                                              "properties": {
                                                "endCursor": {
                                                  "type": "string"
                                                },
                                                "hasNextPage": {
                                                  "type": "boolean"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              }
                            },
                            "Update_API_Gateway_query_cursor": {
                              "runAfter": {
                                "Parse_paginated_API_Gateway_response": [
                                  "Succeeded"
                                ]
                              },
                              "type": "SetVariable",
                              "inputs": {
                                "name": "cursor",
                                "value": "@body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['endCursor']"
                              }
                            },
                            "Update_API_Gateway_query_variables": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "api gateway query variables",
                                "value": "{\n  \"source\": @{variables('tanium endpoint source')},\n  \"endCursor\": \"@{variables('cursor')}\"\n}"
                              }
                            }
                          },
                          "expression": "@equals(body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['hasNextPage'], false)",
                          "limit": {
                            "count": 60,
                            "timeout": "PT1H"
                          },
                          "type": "Until"
                        }
                      },
                      "runAfter": {
                        "Initialize_endpoints_array": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['hasNextPage']",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Parse_API_Gateway_response": {
                      "runAfter": {
                        "Switch_to_TS_from_TDS_if_needed": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@variables('API Gateway Response')",
                        "schema": {
                          "properties": {
                            "data": {
                              "properties": {
                                "endpoints": {
                                  "properties": {
                                    "edges": {
                                      "items": {
                                        "properties": {
                                          "node": {
                                            "type": "object"
                                          }
                                        },
                                        "required": [
                                          "node"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "pageInfo": {
                                      "properties": {
                                        "endCursor": {
                                          "type": "string"
                                        },
                                        "hasNextPage": {
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "errors": {
                              "items": {
                                "properties": {
                                  "message": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "message"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "Parse_endpoints_array": {
                      "runAfter": {
                        "Paginate_API_Gateway_query_if_needed": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@variables('endpoints')",
                        "schema": {
                          "type": "array"
                        }
                      },
                      "description": "We need an action's output to use in the JavaScript code since it can't read from a variable"
                    },
                    "Query_API_Gateway": {
                      "runAfter": {
                        "Initialize_API_Gateway_Query_Variables": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "body": {
                          "query": "@variables('api gateway query')",
                          "variables": "@variables('api gateway query variables')"
                        },
                        "headers": {
                          "Content-Type": "application/json",
                          "session": "@parameters('TaniumApiToken')"
                        },
                        "method": "POST",
                        "uri": "@parameters('TaniumApiGatewayApi')"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "inputs"
                          ]
                        }
                      }
                    },
                    "Switch_to_TS_from_TDS_if_needed": {
                      "actions": {
                        "Requery_the_API_Gateway": {
                          "runAfter": {
                            "Update_API_Query_variables_to_get_new_source": [
                              "Succeeded"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "body": {
                              "query": "@variables('api gateway query')",
                              "variables": "@variables('api gateway query variables')"
                            },
                            "headers": {
                              "Content-Type": "application/json",
                              "session": "@parameters('TaniumApiToken')"
                            },
                            "method": "POST",
                            "uri": "@parameters('TaniumApiGatewayApi')"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs"
                              ]
                            }
                          }
                        },
                        "Set_Tanium_Endpoint_Source_to_TS": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "tanium endpoint source",
                            "value": {
                              "ts": {
                                "stableWaitTime": 30
                              }
                            }
                          }
                        },
                        "Update_API_Gateway_Response": {
                          "runAfter": {
                            "Requery_the_API_Gateway": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "API Gateway Response",
                            "value": "@body('Requery_the_API_Gateway')"
                          }
                        },
                        "Update_API_Query_variables_to_get_new_source": {
                          "runAfter": {
                            "Set_Tanium_Endpoint_Source_to_TS": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "api gateway query variables",
                            "value": "{\n  \"source\": @{variables('Tanium Endpoint Source')},\n  \"incidentHosts\": {\n    \"any\": true,\n    \"filters\": @{variables('endpoint filters')}\n  }\n}"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_API_Gateway_Response": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "contains": [
                              "@string(body('Query_API_Gateway'))",
                              "must refer to an existing sensor"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionName": "[[variables('AzureSentinelConnectionName')]",
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                        "id": "[[concat('/subscriptions/',subscription().subscriptionId, '/providers/Microsoft.Web/locations/',variables('workspace-location-inline'),'/managedApis/azuresentinel')]"
                      }
                    }
                  },
                  "TaniumApiToken": {
                    "value": "[[parameters('TaniumApiToken')]"
                  },
                  "TaniumApiGatewayApi": {
                    "value": "[[variables('TaniumApiGatewayApi')]"
                  }
                }
              },
              "tags": {
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId3'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId3')]",
                "contentId": "[variables('_playbookContentId3')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion3')]",
                "source": {
                  "kind": "Solution",
                  "name": "Tanium",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Tanium",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Tanium Inc.",
                  "email": "support@tanium.com",
                  "tier": "Partner",
                  "link": "https://support.tanium.com"
                }
              }
            }
          ],
          "metadata": {
            "title": "Tanium-MSDefenderHealth",
            "description": "This playbook starts with a Microsoft Sentinel incident, gets the hosts associated with that incident, queries the Tanium API Gateway for the Microsoft Defender Health for those hosts, and then adds a comment to the incident with that information.",
            "prerequisites": [
              "1. Microsoft Sentinel incidents with associated hosts.",
              "2. A [Tanium API Token](https://docs.tanium.com/platform_user/platform_user/console_api_tokens.html) granting access to your Tanium environment: the query will be made with the user priviledges of that token.",
              "3. A hostname for your Tanium environment reachable from Logic Apps."
            ],
            "postDeploymentSteps": [
              "1. Ensure the Logic App API connection to Microsoft Sentinel is authenticated."
            ],
            "entities": [
              "host"
            ],
            "tags": [
              "Enrichment"
            ],
            "lastUpdateTime": "2022-09-15T00:00:00Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/templateSpecs",
      "apiVersion": "2021-05-01",
      "name": "[variables('playbookTemplateSpecName4')]",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-sentinelWorkspaceId": "[variables('workspaceResourceId')]",
        "hidden-sentinelContentType": "Playbook"
      },
      "properties": {
        "description": "Tanium-QuarantineHosts playbook",
        "displayName": "Tanium-QuarantineHosts playbook"
      }
    },
    {
      "type": "Microsoft.Resources/templateSpecs/versions",
      "apiVersion": "2021-05-01",
      "name": "[concat(variables('playbookTemplateSpecName4'),'/',variables('playbookVersion4'))]",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-sentinelWorkspaceId": "[variables('workspaceResourceId')]",
        "hidden-sentinelContentType": "Playbook"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/templateSpecs', variables('playbookTemplateSpecName4'))]"
      ],
      "properties": {
        "description": "Tanium-QuarantineHosts Playbook with template version 2.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion4')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "Tanium-QuarantineHosts",
              "type": "string"
            },
            "IntegrationAccountName": {
              "defaultValue": "Tanium-QuarantineHosts-Integration",
              "type": "string",
              "metadata": {
                "description": "An Integration Account is required to run inline JavaScript actions"
              }
            },
            "IntegrationAccountPricingTier": {
              "type": "string",
              "defaultValue": "Free",
              "allowedValues": [
                "Free",
                "Basic",
                "Standard"
              ],
              "metadata": {
                "description": "Specify the Pricing Tier of the Integration Account."
              }
            },
            "TaniumApiToken": {
              "defaultValue": "",
              "type": "securestring",
              "metadata": {
                "description": "The Tanium API Token used for this logic app. The logic app will be restricted to the level of access available to the user who generated the token."
              }
            },
            "TaniumServerHostname": {
              "defaultValue": "hostname",
              "type": "String",
              "metadata": {
                "description": "The hostname for your Tanium server e.g. tanium.example.com"
              }
            }
          },
          "variables": {
            "AzureSentinelConnectionName": "[[concat('azuresentinel-', parameters('PlaybookName'))]",
            "TaniumActionsApi": "[[uri(concat('https://', parameters('TaniumServerHostname')), '/api/v2/actions')]",
            "TaniumAllComputersUrl": "[[uri(concat('https://', parameters('TaniumServerHostname')), '/api/v2/groups/by-name/All%20Computers')]",
            "TaniumPackagesByNameUrlFragment": "[[uri(concat('https://', parameters('TaniumServerHostname')), '/api/v2/packages/by-name/')]",
            "TaniumActionResultDataUrlFragment": "[[uri(concat('https://', parameters('TaniumServerHostname')), '/api/v2/result_data/action/')]",
            "TaniumApiGatewayApi": "[[uri(concat('https://', parameters('TaniumServerHostname')), '/plugin/products/gateway/graphql')]",
            "connection-1": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azuresentinel')]",
            "_connection-1": "[[variables('connection-1')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2018-07-01-preview",
              "name": "[[variables('AzureSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "properties": {
                "displayName": "[[variables('AzureSentinelConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-1')]"
                }
              }
            },
            {
              "type": "Microsoft.Logic/integrationAccounts",
              "apiVersion": "2016-06-01",
              "name": "[[parameters('IntegrationAccountName')]",
              "location": "[[variables('workspace-location-inline')]",
              "sku": {
                "name": "[[parameters('IntegrationAccountPricingTier')]"
              },
              "properties": {
                "state": "Enabled"
              }
            },
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2019-05-01",
              "name": "[[parameters('PlaybookName')]",
              "location": "[[variables('workspace-location-inline')]",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                "[[resourceId('Microsoft.Logic/integrationAccounts', parameters('IntegrationAccountName'))]"
              ],
              "properties": {
                "state": "Enabled",
                "integrationAccount": {
                  "id": "[[resourceId('Microsoft.Logic/integrationAccounts', parameters('IntegrationAccountName'))]"
                },
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    },
                    "TaniumApiToken": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The Tanium API Token provides access to the Tanium Server. Access is restricted to the level of access available to the user who generated the token."
                      }
                    },
                    "TaniumActionsApi": {
                      "type": "String"
                    },
                    "TaniumAllComputersUrl": {
                      "type": "String"
                    },
                    "TaniumPackagesByNameUrlFragment": {
                      "type": "String"
                    },
                    "TaniumActionResultDataUrlFragment": {
                      "type": "String"
                    },
                    "TaniumApiGatewayApi": {
                      "type": "String"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Add_comment_to_incident_(V3)_2": {
                      "runAfter": {
                        "Create_HTML_table_of_issued_actions": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "incidentArmId": "@triggerBody()?['object']?['id']",
                          "message": "<p>ISSUED TANIUM ACTIONS<br>\n@{body('Create_HTML_table_of_issued_actions')}</p>"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/Incidents/Comment"
                      }
                    },
                    "Add_comment_to_incident_-_hosts_that_will_be_targeted": {
                      "runAfter": {
                        "Create_HTML_table_of_matched_endpoints": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "incidentArmId": "@triggerBody()?['object']?['id']",
                          "message": "<p>Preparing to issue quarantine actions targeting these endpoints associated with this incident<br>\n@{body('Create_HTML_table_of_matched_endpoints')}</p>"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/Incidents/Comment"
                      }
                    },
                    "Check_issued_actions": {
                      "actions": {
                        "Terminate_-_no_actions_were_successfully_issued": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "message": "Unable to issue actions"
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "If_Linux_endpoints": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "less": [
                              "@length(variables('issued actions'))",
                              1
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Collect_action_results_for_each_issued_action": {
                      "foreach": "@variables('issued actions')",
                      "actions": {
                        "Get_action_result": {
                          "type": "Http",
                          "inputs": {
                            "headers": {
                              "Content-Type": "application/json",
                              "session": "@parameters('TaniumApiToken')"
                            },
                            "method": "GET",
                            "uri": "@{concat(parameters('TaniumActionResultDataUrlFragment'), items('Collect_action_results_for_each_issued_action')?['id'])}"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs"
                              ]
                            }
                          }
                        },
                        "If_action_result_could_be_determined": {
                          "actions": {
                            "For_each_action_result_set": {
                              "foreach": "@body('Parse_action_result')",
                              "actions": {
                                "Append_to_action_results": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "action results",
                                    "value": "@item()"
                                  }
                                }
                              },
                              "type": "Foreach"
                            }
                          },
                          "runAfter": {
                            "Parse_action_result": [
                              "Succeeded"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Append_to_unknown_action_results": {
                                "runAfter": {
                                  "Compose_unknown_action_result": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "AppendToArrayVariable",
                                "inputs": {
                                  "name": "unknown action results",
                                  "value": "@outputs('Compose_unknown_action_result')"
                                }
                              },
                              "Compose_unknown_action_result": {
                                "type": "Compose",
                                "inputs": {
                                  "action id": "@item()?['id']",
                                  "status": "Completed with unknown result"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "greater": [
                                  "@length(outputs('Parse_action_result')['body'])",
                                  0
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Parse_action_result": {
                          "runAfter": {
                            "Parse_current_issued_action": [
                              "Succeeded"
                            ]
                          },
                          "type": "JavaScriptCode",
                          "inputs": {
                            "code": "var action_results = workflowContext.actions.Get_action_result.outputs.body.data;\r\nvar action_id = workflowContext.actions.Parse_current_issued_action.outputs.body.id;\r\nvar columns = action_results.result_sets[0].columns.map(c => c.name);\r\nvar robjects = [];\r\n\r\naction_results.result_sets.forEach(function(rs) {\r\n\trs.rows.forEach(function(row) {\r\n\t\tvar robject = {'action id': action_id};\r\n\t\tcolumns.forEach(function(c, i) {\r\n\t\t\trobject[c] = row.data[i][0].text;\r\n\t\t});\r\n\t\trobjects.push(robject);\r\n\t});\r\n});\r\n\r\nreturn robjects;"
                          }
                        },
                        "Parse_current_issued_action": {
                          "runAfter": {
                            "Get_action_result": [
                              "Succeeded"
                            ]
                          },
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@items('Collect_action_results_for_each_issued_action')",
                            "schema": {
                              "properties": {
                                "action_group": {
                                  "properties": {
                                    "id": {
                                      "type": "integer"
                                    },
                                    "name": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "approver": {
                                  "properties": {
                                    "id": {
                                      "type": "integer"
                                    },
                                    "name": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "comment": {
                                  "type": "string"
                                },
                                "creation_time": {
                                  "type": "string"
                                },
                                "distribute_seconds": {
                                  "type": "integer"
                                },
                                "expiration_time": {
                                  "type": "string"
                                },
                                "expire_seconds": {
                                  "type": "integer"
                                },
                                "history_saved_question": {
                                  "properties": {
                                    "id": {
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "id": {
                                  "type": "integer"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "package_spec": {
                                  "properties": {
                                    "available_time": {
                                      "type": "string"
                                    },
                                    "command": {
                                      "type": "string"
                                    },
                                    "command_timeout": {
                                      "type": "integer"
                                    },
                                    "content_set": {
                                      "properties": {
                                        "id": {
                                          "type": "integer"
                                        },
                                        "name": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "creation_time": {
                                      "type": "string"
                                    },
                                    "deleted_flag": {
                                      "type": "boolean"
                                    },
                                    "display_name": {
                                      "type": "string"
                                    },
                                    "expire_seconds": {
                                      "type": "integer"
                                    },
                                    "hidden_flag": {
                                      "type": "boolean"
                                    },
                                    "id": {
                                      "type": "integer"
                                    },
                                    "last_modified_by": {
                                      "type": "string"
                                    },
                                    "last_update": {
                                      "type": "string"
                                    },
                                    "mod_user": {
                                      "properties": {
                                        "display_name": {
                                          "type": "string"
                                        },
                                        "domain": {
                                          "type": "string"
                                        },
                                        "id": {
                                          "type": "integer"
                                        },
                                        "name": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "modification_time": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "parameter_definition": {
                                      "type": "string"
                                    },
                                    "process_group_flag": {
                                      "type": "boolean"
                                    },
                                    "skip_lock_flag": {
                                      "type": "boolean"
                                    },
                                    "source_hash": {
                                      "type": "string"
                                    },
                                    "verify_expire_seconds": {
                                      "type": "integer"
                                    },
                                    "verify_group": {
                                      "properties": {
                                        "id": {
                                          "type": "integer"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "verify_group_id": {
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "saved_action": {
                                  "properties": {
                                    "id": {
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "skip_lock_flag": {
                                  "type": "boolean"
                                },
                                "start_time": {
                                  "type": "string"
                                },
                                "status": {
                                  "type": "string"
                                },
                                "stopped_flag": {
                                  "type": "boolean"
                                },
                                "target_group": {
                                  "properties": {
                                    "id": {
                                      "type": "integer"
                                    },
                                    "name": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "user": {
                                  "properties": {
                                    "creation_time": {
                                      "type": "string"
                                    },
                                    "deleted_flag": {
                                      "type": "boolean"
                                    },
                                    "display_name": {
                                      "type": "string"
                                    },
                                    "domain": {
                                      "type": "string"
                                    },
                                    "effective_group_id": {
                                      "type": "integer"
                                    },
                                    "external_flag": {
                                      "type": "integer"
                                    },
                                    "group_id": {
                                      "type": "integer"
                                    },
                                    "id": {
                                      "type": "integer"
                                    },
                                    "last_login": {
                                      "type": "string"
                                    },
                                    "locked_out": {
                                      "type": "integer"
                                    },
                                    "mod_user": {
                                      "properties": {
                                        "display_name": {
                                          "type": "string"
                                        },
                                        "domain": {
                                          "type": "string"
                                        },
                                        "id": {
                                          "type": "integer"
                                        },
                                        "name": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "modification_time": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "previous_login": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_action_results": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach",
                      "runtimeConfiguration": {
                        "concurrency": {
                          "repetitions": 1
                        }
                      }
                    },
                    "Create_HTML_table_of_action_results": {
                      "runAfter": {
                        "Collect_action_results_for_each_issued_action": [
                          "Succeeded"
                        ]
                      },
                      "type": "Table",
                      "inputs": {
                        "format": "HTML",
                        "from": "@variables('action results')"
                      }
                    },
                    "Create_HTML_table_of_issued_actions": {
                      "runAfter": {
                        "Check_issued_actions": [
                          "Succeeded"
                        ]
                      },
                      "type": "Table",
                      "inputs": {
                        "columns": [
                          {
                            "header": "action id",
                            "value": "@item()?['id']"
                          },
                          {
                            "header": "name",
                            "value": "@item()?['name']"
                          },
                          {
                            "header": "status",
                            "value": "@item()?['status']"
                          }
                        ],
                        "format": "HTML",
                        "from": "@variables('issued actions')"
                      }
                    },
                    "Create_HTML_table_of_matched_endpoints": {
                      "runAfter": {
                        "Flatten_API_Gateway_endpoints": [
                          "Succeeded"
                        ]
                      },
                      "type": "Table",
                      "inputs": {
                        "format": "HTML",
                        "from": "@body('Flatten_API_Gateway_endpoints')"
                      }
                    },
                    "Create_HTML_table_of_unknown_action_results": {
                      "runAfter": {
                        "Create_HTML_table_of_action_results": [
                          "Succeeded"
                        ]
                      },
                      "type": "Table",
                      "inputs": {
                        "format": "HTML",
                        "from": "@variables('unknown action results')"
                      }
                    },
                    "Entities_-_Get_Hosts": {
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/host"
                      }
                    },
                    "Exit_early_if_no_hosts_are_found": {
                      "actions": {
                        "Add_comment_to_incident_(V3)": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['object']?['id']",
                              "message": "<p>No hosts found for this incident.</p>"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                          }
                        },
                        "Terminate": {
                          "runAfter": {
                            "Add_comment_to_incident_(V3)": [
                              "Succeeded"
                            ]
                          },
                          "type": "Terminate",
                          "inputs": {
                            "runStatus": "Succeeded"
                          }
                        }
                      },
                      "runAfter": {
                        "Entities_-_Get_Hosts": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "less": [
                              "@length(body('Entities_-_Get_Hosts')?['Hosts'])",
                              1
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Flatten_API_Gateway_endpoints": {
                      "runAfter": {
                        "Parse_endpoints_array": [
                          "Succeeded"
                        ]
                      },
                      "type": "JavaScriptCode",
                      "inputs": {
                        "code": "var e = workflowContext.actions.Parse_endpoints_array.outputs.body;\r\n\r\nfunction sensorReadings(r) {\r\n\treturn r.columns.map(c => {\r\n\t\tif (c.sensor && c.sensor.name) {\r\n\t\t\treturn { name: [c.sensor.name, c.name].join(' - '), value: c.values.join(' ') };\r\n\t\t} else {\r\n\t\t\treturn { name: c.name, value: c.values.join(' ') };\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction flatten(obj, pk = '') {\r\n\tif (pk !== '') pk += ' ';\r\n\tvar flat = {};\r\n\tObject.keys(obj).forEach((key) => {\r\n\t\tif (key === 'sensorReadings') {\r\n\t\t\tsensorReadings(obj[key]).forEach((r) => {\r\n\t\t\t\tflat[r.name] = r.value;\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tif (typeof obj[key] === 'object' && obj[key] !== null) {\r\n\t\t\t\tObject.assign(flat, flatten(obj[key], pk + key));\r\n\t\t\t} else {\r\n\t\t\t\tflat[pk + key] = obj[key];\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\treturn flat;\r\n}\r\n\r\nreturn e.map(function(e) { return flatten(e.node); });"
                      }
                    },
                    "For_each_endpoint": {
                      "foreach": "@variables('endpoints')",
                      "actions": {
                        "Compose_endpoint_filter_for_packages": {
                          "runAfter": {
                            "Parse_endpoint_JSON_data": [
                              "Succeeded"
                            ]
                          },
                          "type": "Compose",
                          "inputs": {
                            "and_flag": true,
                            "filters": [
                              {
                                "operator": "Equal",
                                "sensor": {
                                  "name": "Computer Name"
                                },
                                "value": "@body('Parse_endpoint_JSON_data')?['node']?['name']"
                              },
                              {
                                "operator": "RegexMatch",
                                "sensor": {
                                  "name": "IP Address"
                                },
                                "value": "@body('Parse_endpoint_JSON_data')?['node']?['ipAddress']"
                              }
                            ]
                          }
                        },
                        "Parse_endpoint_JSON_data": {
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@items('For_each_endpoint')",
                            "schema": {
                              "properties": {
                                "node": {
                                  "properties": {
                                    "ipAddress": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "os": {
                                      "properties": {
                                        "platform": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          }
                        },
                        "Switch": {
                          "runAfter": {
                            "Compose_endpoint_filter_for_packages": [
                              "Succeeded"
                            ]
                          },
                          "cases": {
                            "Linux": {
                              "case": "Linux",
                              "actions": {
                                "Append_to_Linux_endpoint_filters": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "linux endpoint filters",
                                    "value": "@outputs('Compose_endpoint_filter_for_packages')"
                                  }
                                }
                              }
                            },
                            "Mac": {
                              "case": "Mac",
                              "actions": {
                                "Append_to_macOS_endpoint_filters": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "macos endpoint filters",
                                    "value": "@outputs('Compose_endpoint_filter_for_packages')"
                                  }
                                }
                              }
                            },
                            "Windows": {
                              "case": "Windows",
                              "actions": {
                                "Append_to_Windows_endpoint_filters": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "windows endpoint filters",
                                    "value": "@outputs('Compose_endpoint_filter_for_packages')"
                                  }
                                }
                              }
                            }
                          },
                          "expression": "@body('Parse_endpoint_JSON_data')?['node']?['os']?['platform']",
                          "type": "Switch"
                        }
                      },
                      "runAfter": {
                        "Initialize_all_computers_id": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "For_each_incident_host": {
                      "foreach": "@body('Entities_-_Get_Hosts')?['Hosts']",
                      "actions": {
                        "If_ip_address": {
                          "actions": {
                            "Append_to_endpoint_filters": {
                              "runAfter": {
                                "Compose_endpoint_filter_for_host_and_ip_address": [
                                  "Succeeded"
                                ]
                              },
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "endpoint filters",
                                "value": "@outputs('Compose_endpoint_filter_for_host_and_ip_address')"
                              }
                            },
                            "Compose_endpoint_filter_for_host_and_ip_address": {
                              "type": "Compose",
                              "inputs": {
                                "filters": [
                                  {
                                    "op": "CONTAINS",
                                    "path": "ipAddress",
                                    "value": "@{body('Parse_host_json')?['additionalData']?['LastIpAddress']}"
                                  },
                                  {
                                    "path": "name",
                                    "value": "@{body('Parse_host_json')?['hostName']}"
                                  }
                                ]
                              }
                            }
                          },
                          "runAfter": {
                            "Parse_host_json": [
                              "Succeeded"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Append_host_only_to_endpoint_filters": {
                                "runAfter": {
                                  "Compose_endpoint_filter_for_host_only": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "AppendToArrayVariable",
                                "inputs": {
                                  "name": "endpoint filters",
                                  "value": "@outputs('Compose_endpoint_filter_for_host_only')"
                                }
                              },
                              "Compose_endpoint_filter_for_host_only": {
                                "type": "Compose",
                                "inputs": {
                                  "filters": [
                                    {
                                      "path": "name",
                                      "value": "@{body('Parse_host_json')?['hostName']}"
                                    }
                                  ]
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "not": {
                                  "equals": [
                                    "@body('Parse_host_json')?['additionalData']?['LastIpAddress']",
                                    "@null"
                                  ]
                                }
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Parse_host_json": {
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@items('For_each_incident_host')",
                            "schema": {
                              "properties": {
                                "Type": {
                                  "type": "string"
                                },
                                "additionalData": {
                                  "properties": {
                                    "AvStatus": {
                                      "type": "string"
                                    },
                                    "FQDN": {
                                      "type": "string"
                                    },
                                    "HealthStatus": {
                                      "type": "string"
                                    },
                                    "LastExternalIpAddress": {
                                      "type": "string"
                                    },
                                    "LastIpAddress": {
                                      "type": "string"
                                    },
                                    "LastSeen": {
                                      "type": "string"
                                    },
                                    "LoggedOnUsers": {
                                      "type": "string"
                                    },
                                    "MdatpDeviceId": {
                                      "type": "string"
                                    },
                                    "OnboardingStatus": {
                                      "type": "string"
                                    },
                                    "RiskScore": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "friendlyName": {
                                  "type": "string"
                                },
                                "hostName": {
                                  "type": "string"
                                },
                                "osFamily": {
                                  "type": "string"
                                },
                                "osVersion": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_Endpoint_Filters_array": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "Get_the_\"All_Computers\"_group": {
                      "runAfter": {
                        "Initialize_unknown_action_results": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "headers": {
                          "Content-Type": "application/json",
                          "session": "@parameters('TaniumApiToken')"
                        },
                        "method": "GET",
                        "uri": "@parameters('TaniumAllComputersUrl')"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "inputs"
                          ]
                        }
                      }
                    },
                    "If_Linux_endpoints": {
                      "actions": {
                        "Check_Linux_issued_action_result": {
                          "actions": {
                            "Append_Linux_issued_action_result_to_issued_actions": {
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "issued actions",
                                "value": "@body('Issue_Linux_action')?['data']"
                              }
                            }
                          },
                          "runAfter": {
                            "Issue_Linux_action": [
                              "Succeeded"
                            ]
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('Issue_Linux_action')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Compose_Linux_action": {
                          "runAfter": {
                            "Compose_Linux_target_group": [
                              "Succeeded"
                            ]
                          },
                          "type": "Compose",
                          "inputs": {
                            "action_group": {
                              "id": "@variables('all computers id')"
                            },
                            "distribute_seconds": 0,
                            "expire_seconds": "@body('Parse_Linux_package_json')?['data']?['expire_seconds']",
                            "name": "Apply from Microsoft Sentinel: @{variables('linux package name')}",
                            "package_spec": "@outputs('Compose_Linux_action_package_declaration')",
                            "target_group": "@outputs('Compose_Linux_target_group')"
                          }
                        },
                        "Compose_Linux_action_package_declaration": {
                          "runAfter": {
                            "Parse_Linux_package_json": [
                              "Succeeded"
                            ]
                          },
                          "type": "Compose",
                          "inputs": {
                            "expire_seconds": "@body('Parse_Linux_package_json')?['data']?['expire_seconds']",
                            "parameters": "@variables('package parameters')",
                            "source_id": "@body('Parse_Linux_package_json')?['data']?['id']"
                          }
                        },
                        "Compose_Linux_target_group": {
                          "runAfter": {
                            "Compose_Linux_action_package_declaration": [
                              "Succeeded"
                            ]
                          },
                          "type": "Compose",
                          "inputs": {
                            "and_flag": false,
                            "sub_groups": "@variables('linux endpoint filters')"
                          }
                        },
                        "Get_Linux_package": {
                          "type": "Http",
                          "inputs": {
                            "headers": {
                              "Content-Type": "application/json",
                              "session": "@parameters('TaniumApiToken')"
                            },
                            "method": "GET",
                            "uri": "@{concat(parameters('TaniumPackagesByNameUrlFragment'), join(split(variables('linux package name'), ' '), '%20'))}"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs"
                              ]
                            }
                          }
                        },
                        "Issue_Linux_action": {
                          "runAfter": {
                            "Compose_Linux_action": [
                              "Succeeded"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "body": "@outputs('Compose_Linux_action')",
                            "headers": {
                              "Content-Type": "application/json",
                              "session": "@parameters('TaniumApiToken')"
                            },
                            "method": "POST",
                            "uri": "@parameters('TaniumActionsApi')"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs"
                              ]
                            }
                          }
                        },
                        "Parse_Linux_package_json": {
                          "runAfter": {
                            "Get_Linux_package": [
                              "Succeeded"
                            ]
                          },
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@body('Get_Linux_package')",
                            "schema": {
                              "properties": {
                                "data": {
                                  "properties": {
                                    "available_time": {
                                      "type": "string"
                                    },
                                    "command": {
                                      "type": "string"
                                    },
                                    "command_timeout": {
                                      "type": "integer"
                                    },
                                    "content_set": {
                                      "properties": {
                                        "id": {
                                          "type": "integer"
                                        },
                                        "name": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "creation_time": {
                                      "type": "string"
                                    },
                                    "deleted_flag": {
                                      "type": "boolean"
                                    },
                                    "display_name": {
                                      "type": "string"
                                    },
                                    "expire_seconds": {
                                      "type": "integer"
                                    },
                                    "hidden_flag": {
                                      "type": "boolean"
                                    },
                                    "id": {
                                      "type": "integer"
                                    },
                                    "last_modified_by": {
                                      "type": "string"
                                    },
                                    "last_update": {
                                      "type": "string"
                                    },
                                    "mod_user": {
                                      "properties": {
                                        "display_name": {
                                          "type": "string"
                                        },
                                        "domain": {
                                          "type": "string"
                                        },
                                        "id": {
                                          "type": "integer"
                                        },
                                        "name": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "modification_time": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "parameter_definition": {
                                      "type": "string"
                                    },
                                    "process_group_flag": {
                                      "type": "boolean"
                                    },
                                    "skip_lock_flag": {
                                      "type": "boolean"
                                    },
                                    "source_hash": {
                                      "type": "string"
                                    },
                                    "source_id": {
                                      "type": "integer"
                                    },
                                    "verify_expire_seconds": {
                                      "type": "integer"
                                    },
                                    "verify_group": {
                                      "properties": {
                                        "id": {
                                          "type": "integer"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "verify_group_id": {
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "If_macOS_endpoints": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "greater": [
                              "@length(variables('linux endpoint filters'))",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "If_Windows_endpoints": {
                      "actions": {
                        "Check_Windows_issued_action_result": {
                          "actions": {
                            "Append_Windows_issued_action_result_to_issued_actions": {
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "issued actions",
                                "value": "@body('Issue_Windows_action')?['data']"
                              }
                            }
                          },
                          "runAfter": {
                            "Issue_Windows_action": [
                              "Succeeded"
                            ]
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('Issue_Windows_action')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Compose_Windows_action_package_declaration": {
                          "runAfter": {
                            "Parse_Windows_package_json": [
                              "Succeeded"
                            ]
                          },
                          "type": "Compose",
                          "inputs": {
                            "expire_seconds": "@body('Parse_Windows_package_json')?['data']?['expire_seconds']",
                            "parameters": "@variables('package parameters')",
                            "source_id": "@body('Parse_Windows_package_json')?['data']?['id']"
                          }
                        },
                        "Compose_Windows_target_group": {
                          "runAfter": {
                            "Compose_Windows_action_package_declaration": [
                              "Succeeded"
                            ]
                          },
                          "type": "Compose",
                          "inputs": {
                            "and_flag": false,
                            "sub_groups": "@variables('windows endpoint filters')"
                          }
                        },
                        "Compose_windows_action": {
                          "runAfter": {
                            "Compose_Windows_target_group": [
                              "Succeeded"
                            ]
                          },
                          "type": "Compose",
                          "inputs": {
                            "action_group": {
                              "id": "@variables('all computers id')"
                            },
                            "distribute_seconds": 0,
                            "expire_seconds": "@body('Parse_Windows_package_json')?['data']?['expire_seconds']",
                            "name": "Apply from Microsoft Sentinel: @{variables('windows package name')}",
                            "package_spec": "@outputs('Compose_Windows_action_package_declaration')",
                            "target_group": "@outputs('Compose_Windows_target_group')"
                          }
                        },
                        "Get_Windows_package": {
                          "type": "Http",
                          "inputs": {
                            "headers": {
                              "Content-Type": "application/json",
                              "session": "@parameters('TaniumApiToken')"
                            },
                            "method": "GET",
                            "uri": "@{concat(parameters('TaniumPackagesByNameUrlFragment'), join(split(variables('windows package name'), ' '), '%20'))}"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs"
                              ]
                            }
                          }
                        },
                        "Issue_Windows_action": {
                          "runAfter": {
                            "Compose_windows_action": [
                              "Succeeded"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "body": "@outputs('Compose_windows_action')",
                            "headers": {
                              "Content-Type": "application/json",
                              "session": "@parameters('TaniumApiToken')"
                            },
                            "method": "POST",
                            "uri": "@parameters('TaniumActionsApi')"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs"
                              ]
                            }
                          }
                        },
                        "Parse_Windows_package_json": {
                          "runAfter": {
                            "Get_Windows_package": [
                              "Succeeded"
                            ]
                          },
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@body('Get_Windows_package')",
                            "schema": {
                              "properties": {
                                "data": {
                                  "properties": {
                                    "available_time": {
                                      "type": "string"
                                    },
                                    "command": {
                                      "type": "string"
                                    },
                                    "command_timeout": {
                                      "type": "integer"
                                    },
                                    "content_set": {
                                      "properties": {
                                        "id": {
                                          "type": "integer"
                                        },
                                        "name": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "creation_time": {
                                      "type": "string"
                                    },
                                    "deleted_flag": {
                                      "type": "boolean"
                                    },
                                    "display_name": {
                                      "type": "string"
                                    },
                                    "expire_seconds": {
                                      "type": "integer"
                                    },
                                    "hidden_flag": {
                                      "type": "boolean"
                                    },
                                    "id": {
                                      "type": "integer"
                                    },
                                    "last_modified_by": {
                                      "type": "string"
                                    },
                                    "last_update": {
                                      "type": "string"
                                    },
                                    "mod_user": {
                                      "properties": {
                                        "display_name": {
                                          "type": "string"
                                        },
                                        "domain": {
                                          "type": "string"
                                        },
                                        "id": {
                                          "type": "integer"
                                        },
                                        "name": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "modification_time": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "parameter_definition": {
                                      "type": "string"
                                    },
                                    "process_group_flag": {
                                      "type": "boolean"
                                    },
                                    "skip_lock_flag": {
                                      "type": "boolean"
                                    },
                                    "source_hash": {
                                      "type": "string"
                                    },
                                    "source_id": {
                                      "type": "integer"
                                    },
                                    "verify_expire_seconds": {
                                      "type": "integer"
                                    },
                                    "verify_group": {
                                      "properties": {
                                        "id": {
                                          "type": "integer"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "verify_group_id": {
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "For_each_endpoint": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "greater": [
                              "@length(variables('windows endpoint filters'))",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "If_action_results": {
                      "actions": {
                        "Add_comment_to_incident_(V3)_-_action_results": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['object']?['id']",
                              "message": "<p>QUARANTINE ACTION RESULTS<br>\n@{body('Create_HTML_table_of_action_results')}</p>"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                          }
                        }
                      },
                      "runAfter": {
                        "If_action_results_and_unknown_action_results": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Add_comment_to_incident_(V3)_-_unknown_action_results": {
                            "type": "ApiConnection",
                            "inputs": {
                              "body": {
                                "incidentArmId": "@triggerBody()?['object']?['id']",
                                "message": "<p>QUARANTINE ACTION RESULTS<br>\n@{body('Create_HTML_table_of_unknown_action_results')}</p>"
                              },
                              "host": {
                                "connection": {
                                  "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                }
                              },
                              "method": "post",
                              "path": "/Incidents/Comment"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "greater": [
                              "@length(variables('action results'))",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "If_action_results_and_unknown_action_results": {
                      "actions": {
                        "Add_comment_to_incident_(V3)_-_known_and_unknown_action_results": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['object']?['id']",
                              "message": "<p>QUARANTINE ACTION RESULTS<br>\n@{body('Create_HTML_table_of_action_results')}<br>\n<br>\n@{body('Create_HTML_table_of_unknown_action_results')}</p>"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                          }
                        },
                        "Terminate_2": {
                          "runAfter": {
                            "Add_comment_to_incident_(V3)_-_known_and_unknown_action_results": [
                              "Succeeded"
                            ]
                          },
                          "type": "Terminate",
                          "inputs": {
                            "runStatus": "Succeeded"
                          }
                        }
                      },
                      "runAfter": {
                        "Create_HTML_table_of_unknown_action_results": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "greater": [
                              "@length(variables('action results'))",
                              0
                            ]
                          },
                          {
                            "greater": [
                              "@length(variables('unknown action results'))",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "If_macOS_endpoints": {
                      "actions": {
                        "Check_macOS_issued_action_result": {
                          "actions": {
                            "Append_macOS_issued_action_result_to_issued_actions": {
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "issued actions",
                                "value": "@body('Issue_macOS_action')?['data']"
                              }
                            }
                          },
                          "runAfter": {
                            "Issue_macOS_action": [
                              "Succeeded"
                            ]
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@body('Issue_macOS_action')",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Compose_macOS_action": {
                          "runAfter": {
                            "Compose_macOS_target_group": [
                              "Succeeded"
                            ]
                          },
                          "type": "Compose",
                          "inputs": {
                            "action_group": {
                              "id": "@variables('all computers id')"
                            },
                            "distribute_seconds": 0,
                            "expire_seconds": "@body('Parse_macOS_package_json')?['data']?['expire_seconds']",
                            "name": "Apply from Microsoft Sentinel @{variables('macos package name')}",
                            "package_spec": "@outputs('Compose_macOS_action_package_declaration')",
                            "target_group": "@outputs('Compose_macOS_target_group')"
                          }
                        },
                        "Compose_macOS_action_package_declaration": {
                          "runAfter": {
                            "Parse_macOS_package_json": [
                              "Succeeded"
                            ]
                          },
                          "type": "Compose",
                          "inputs": {
                            "expire_seconds": "@body('Parse_macOS_package_json')?['data']?['expire_seconds']",
                            "parameters": "@variables('package parameters')",
                            "source_id": "@body('Parse_macOS_package_json')?['data']?['id']"
                          }
                        },
                        "Compose_macOS_target_group": {
                          "runAfter": {
                            "Compose_macOS_action_package_declaration": [
                              "Succeeded"
                            ]
                          },
                          "type": "Compose",
                          "inputs": {
                            "and_flag": false,
                            "sub_groups": "@variables('macos endpoint filters')"
                          }
                        },
                        "Get_macOS_package": {
                          "type": "Http",
                          "inputs": {
                            "headers": {
                              "Content-Type": "application/json",
                              "session": "@parameters('TaniumApiToken')"
                            },
                            "method": "GET",
                            "uri": "@{concat(parameters('TaniumPackagesByNameUrlFragment'), join(split(variables('macos package name'), ' '), '%20'))}"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs"
                              ]
                            }
                          }
                        },
                        "Issue_macOS_action": {
                          "runAfter": {
                            "Compose_macOS_action": [
                              "Succeeded"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "body": "@outputs('Compose_macOS_action')",
                            "headers": {
                              "Content-Type": "application/json",
                              "session": "@parameters('TaniumApiToken')"
                            },
                            "method": "POST",
                            "uri": "@parameters('TaniumActionsApi')"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs"
                              ]
                            }
                          }
                        },
                        "Parse_macOS_package_json": {
                          "runAfter": {
                            "Get_macOS_package": [
                              "Succeeded"
                            ]
                          },
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@body('Get_macOS_package')",
                            "schema": {
                              "properties": {
                                "data": {
                                  "properties": {
                                    "available_time": {
                                      "type": "string"
                                    },
                                    "command": {
                                      "type": "string"
                                    },
                                    "command_timeout": {
                                      "type": "integer"
                                    },
                                    "content_set": {
                                      "properties": {
                                        "id": {
                                          "type": "integer"
                                        },
                                        "name": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "creation_time": {
                                      "type": "string"
                                    },
                                    "deleted_flag": {
                                      "type": "boolean"
                                    },
                                    "display_name": {
                                      "type": "string"
                                    },
                                    "expire_seconds": {
                                      "type": "integer"
                                    },
                                    "hidden_flag": {
                                      "type": "boolean"
                                    },
                                    "id": {
                                      "type": "integer"
                                    },
                                    "last_modified_by": {
                                      "type": "string"
                                    },
                                    "last_update": {
                                      "type": "string"
                                    },
                                    "mod_user": {
                                      "properties": {
                                        "display_name": {
                                          "type": "string"
                                        },
                                        "domain": {
                                          "type": "string"
                                        },
                                        "id": {
                                          "type": "integer"
                                        },
                                        "name": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "modification_time": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "parameter_definition": {
                                      "type": "string"
                                    },
                                    "process_group_flag": {
                                      "type": "boolean"
                                    },
                                    "skip_lock_flag": {
                                      "type": "boolean"
                                    },
                                    "source_hash": {
                                      "type": "string"
                                    },
                                    "source_id": {
                                      "type": "integer"
                                    },
                                    "verify_expire_seconds": {
                                      "type": "integer"
                                    },
                                    "verify_group": {
                                      "properties": {
                                        "id": {
                                          "type": "integer"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "verify_group_id": {
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "If_Windows_endpoints": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "greater": [
                              "@length(variables('macos endpoint filters'))",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Initialize_API_Gateway_Query": {
                      "runAfter": {
                        "Initialize_package_parameters": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api gateway query",
                            "type": "string",
                            "value": "query ($incidentHosts: EndpointFieldFilter, $endCursor: Cursor, $source: EndpointSource) {\n  endpoints(\n    source: $source\n    first: 10\n    after: $endCursor\n    filter: $incidentHosts\n  ) {\n    edges {\n      node {\n        name\n        ipAddress\n        os { platform }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}"
                          }
                        ]
                      }
                    },
                    "Initialize_API_Gateway_Query_Variables": {
                      "runAfter": {
                        "Initialize_Tanium_Endpoint_Source_to_TDS": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api gateway query variables",
                            "type": "string",
                            "value": "{\n  \"source\": @{variables('Tanium Endpoint Source')},\n  \"incidentHosts\": {\n    \"any\": true,\n    \"filters\": @{variables('endpoint filters')}\n  }\n}"
                          }
                        ]
                      }
                    },
                    "Initialize_API_Gateway_Response": {
                      "runAfter": {
                        "Query_API_Gateway": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "API Gateway Response",
                            "type": "object",
                            "value": "@body('Query_API_Gateway')"
                          }
                        ]
                      }
                    },
                    "Initialize_API_Gateway_query_cursor": {
                      "runAfter": {
                        "Parse_API_Gateway_response": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "cursor",
                            "type": "string",
                            "value": "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['endCursor']"
                          }
                        ]
                      }
                    },
                    "Initialize_Endpoint_Filters_array": {
                      "runAfter": {
                        "Initialize_API_Gateway_Query": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "endpoint filters",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Linux_endpoint_filters": {
                      "runAfter": {
                        "Initialize_Windows_endpoint_filters": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "linux endpoint filters",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Linux_package_name": {
                      "runAfter": {
                        "Initialize_MacOS_package_name": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "linux package name",
                            "type": "string",
                            "value": "Apply Linux IPTables Quarantine"
                          }
                        ]
                      }
                    },
                    "Initialize_MacOS_package_name": {
                      "runAfter": {
                        "Initialize_Windows_package_name": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "macos package name",
                            "type": "string",
                            "value": "Apply Mac PF Quarantine"
                          }
                        ]
                      }
                    },
                    "Initialize_Tanium_Endpoint_Source_to_TDS": {
                      "runAfter": {
                        "For_each_incident_host": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "tanium endpoint source",
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "Initialize_Windows_endpoint_filters": {
                      "runAfter": {
                        "Add_comment_to_incident_-_hosts_that_will_be_targeted": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "windows endpoint filters",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Windows_package_name": {
                      "runAfter": {
                        "Exit_early_if_no_hosts_are_found": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "windows package name",
                            "type": "string",
                            "value": "Apply Windows IPsec Quarantine"
                          }
                        ]
                      }
                    },
                    "Initialize_action_results": {
                      "runAfter": {
                        "Wait_for_the_max_expire_seconds_from_the_issued_actions": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "action results",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_all_computers_id": {
                      "runAfter": {
                        "Get_the_\"All_Computers\"_group": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "all computers id",
                            "type": "string",
                            "value": "@{body('Get_the_\"All_Computers\"_group')?['data']?['id']}"
                          }
                        ]
                      }
                    },
                    "Initialize_endpoints_array": {
                      "runAfter": {
                        "Initialize_API_Gateway_query_cursor": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "endpoints",
                            "type": "array",
                            "value": "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['edges']"
                          }
                        ]
                      }
                    },
                    "Initialize_issued_actions": {
                      "runAfter": {
                        "Initialize_macOS_endpoint_filters": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "issued actions",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_macOS_endpoint_filters": {
                      "runAfter": {
                        "Initialize_Linux_endpoint_filters": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "macos endpoint filters",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_package_parameters": {
                      "runAfter": {
                        "Initialize_Linux_package_name": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "package parameters",
                            "type": "array",
                            "value": [
                              {
                                "key": "$1",
                                "value": "0"
                              },
                              {
                                "key": "$2",
                                "value": "1"
                              },
                              {
                                "key": "$3",
                                "value": "1"
                              },
                              {
                                "key": "$4",
                                "value": "1"
                              },
                              {
                                "key": "$5",
                                "value": "1"
                              },
                              {
                                "key": "$6",
                                "value": "Quarantine via Tanium and Microsoft Sentinel"
                              },
                              {
                                "key": "$7",
                                "value": "[variables('blanks')]"
                              },
                              {
                                "key": "$8",
                                "value": "[variables('blanks')]"
                              },
                              {
                                "key": "$9",
                                "value": "[variables('blanks')]"
                              }
                            ]
                          }
                        ]
                      },
                      "description": "The quarantine packages use the same parameters across operating systems"
                    },
                    "Initialize_unknown_action_results": {
                      "runAfter": {
                        "Initialize_issued_actions": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "unknown action results",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Paginate_API_Gateway_query_if_needed": {
                      "actions": {
                        "Until_there_are_no_more_pages_in_the_API_gateway_response": {
                          "actions": {
                            "For_each_endpoint_in_paginated_API_Gateway_response": {
                              "foreach": "@body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['edges']",
                              "actions": {
                                "Append_endpoint_to_endpoints": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "endpoints",
                                    "value": "@items('For_each_endpoint_in_paginated_API_Gateway_response')"
                                  }
                                }
                              },
                              "runAfter": {
                                "Update_API_Gateway_query_cursor": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Foreach",
                              "runtimeConfiguration": {
                                "concurrency": {
                                  "repetitions": 1
                                }
                              }
                            },
                            "Paginate_API_Gateway": {
                              "runAfter": {
                                "Update_API_Gateway_query_variables": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Http",
                              "inputs": {
                                "body": {
                                  "query": "@variables('api gateway query')",
                                  "variables": "@variables('api gateway query variables')"
                                },
                                "headers": {
                                  "Content-Type": "application/json",
                                  "session": "@parameters('TaniumApiToken')"
                                },
                                "method": "POST",
                                "uri": "@parameters('TaniumApiGatewayApi')"
                              },
                              "runtimeConfiguration": {
                                "secureData": {
                                  "properties": [
                                    "inputs"
                                  ]
                                }
                              }
                            },
                            "Parse_paginated_API_Gateway_response": {
                              "runAfter": {
                                "Paginate_API_Gateway": [
                                  "Succeeded"
                                ]
                              },
                              "type": "ParseJson",
                              "inputs": {
                                "content": "@body('Paginate_API_Gateway')",
                                "schema": {
                                  "properties": {
                                    "data": {
                                      "properties": {
                                        "endpoints": {
                                          "properties": {
                                            "edges": {
                                              "items": {
                                                "properties": {
                                                  "node": {
                                                    "type": "object"
                                                  }
                                                },
                                                "required": [
                                                  "node"
                                                ],
                                                "type": "object"
                                              },
                                              "type": "array"
                                            },
                                            "pageInfo": {
                                              "properties": {
                                                "endCursor": {
                                                  "type": "string"
                                                },
                                                "hasNextPage": {
                                                  "type": "boolean"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              }
                            },
                            "Update_API_Gateway_query_cursor": {
                              "runAfter": {
                                "Parse_paginated_API_Gateway_response": [
                                  "Succeeded"
                                ]
                              },
                              "type": "SetVariable",
                              "inputs": {
                                "name": "cursor",
                                "value": "@body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['endCursor']"
                              }
                            },
                            "Update_API_Gateway_query_variables": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "api gateway query variables",
                                "value": "{\n  \"source\": @{variables('tanium endpoint source')},\n  \"endCursor\": \"@{variables('cursor')}\"\n}"
                              }
                            }
                          },
                          "expression": "@equals(body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['hasNextPage'], false)",
                          "limit": {
                            "count": 60,
                            "timeout": "PT1H"
                          },
                          "type": "Until"
                        }
                      },
                      "runAfter": {
                        "Initialize_endpoints_array": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['hasNextPage']",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Parse_API_Gateway_response": {
                      "runAfter": {
                        "Switch_to_TS_from_TDS_if_needed": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@variables('API Gateway Response')",
                        "schema": {
                          "properties": {
                            "data": {
                              "properties": {
                                "endpoints": {
                                  "properties": {
                                    "edges": {
                                      "items": {
                                        "properties": {
                                          "node": {
                                            "type": "object"
                                          }
                                        },
                                        "required": [
                                          "node"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "pageInfo": {
                                      "properties": {
                                        "endCursor": {
                                          "type": "string"
                                        },
                                        "hasNextPage": {
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "errors": {
                              "items": {
                                "properties": {
                                  "message": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "message"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "Parse_endpoints_array": {
                      "runAfter": {
                        "Paginate_API_Gateway_query_if_needed": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@variables('endpoints')",
                        "schema": {
                          "type": "array"
                        }
                      },
                      "description": "We need an action's output to use in the JavaScript code since it can't read from a variable"
                    },
                    "Query_API_Gateway": {
                      "runAfter": {
                        "Initialize_API_Gateway_Query_Variables": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "body": {
                          "query": "@variables('api gateway query')",
                          "variables": "@variables('api gateway query variables')"
                        },
                        "headers": {
                          "Content-Type": "application/json",
                          "session": "@parameters('TaniumApiToken')"
                        },
                        "method": "POST",
                        "uri": "@parameters('TaniumApiGatewayApi')"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "inputs"
                          ]
                        }
                      }
                    },
                    "Select_expire_seconds": {
                      "runAfter": {
                        "Add_comment_to_incident_(V3)_2": [
                          "Succeeded"
                        ]
                      },
                      "type": "Select",
                      "inputs": {
                        "from": "@variables('issued actions')",
                        "select": "@int(item()?['expire_seconds'])"
                      }
                    },
                    "Switch_to_TS_from_TDS_if_needed": {
                      "actions": {
                        "Requery_the_API_Gateway": {
                          "runAfter": {
                            "Update_API_Query_variables_to_get_new_source": [
                              "Succeeded"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "body": {
                              "query": "@variables('api gateway query')",
                              "variables": "@variables('api gateway query variables')"
                            },
                            "headers": {
                              "Content-Type": "application/json",
                              "session": "@parameters('TaniumApiToken')"
                            },
                            "method": "POST",
                            "uri": "@parameters('TaniumApiGatewayApi')"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs"
                              ]
                            }
                          }
                        },
                        "Set_Tanium_Endpoint_Source_to_TS": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "tanium endpoint source",
                            "value": {
                              "ts": {
                                "stableWaitTime": 30
                              }
                            }
                          }
                        },
                        "Update_API_Gateway_Response": {
                          "runAfter": {
                            "Requery_the_API_Gateway": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "API Gateway Response",
                            "value": "@body('Requery_the_API_Gateway')"
                          }
                        },
                        "Update_API_Query_variables_to_get_new_source": {
                          "runAfter": {
                            "Set_Tanium_Endpoint_Source_to_TS": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "api gateway query variables",
                            "value": "{\n  \"source\": @{variables('Tanium Endpoint Source')},\n  \"incidentHosts\": {\n    \"any\": true,\n    \"filters\": @{variables('endpoint filters')}\n  }\n}"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_API_Gateway_Response": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "contains": [
                              "@string(body('Query_API_Gateway'))",
                              "must refer to an existing sensor"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Wait_for_the_max_expire_seconds_from_the_issued_actions": {
                      "runAfter": {
                        "Select_expire_seconds": [
                          "Succeeded"
                        ]
                      },
                      "type": "Wait",
                      "inputs": {
                        "interval": {
                          "count": "@max(body('Select_expire_seconds'))",
                          "unit": "Second"
                        }
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionName": "[[variables('AzureSentinelConnectionName')]",
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                        "id": "[[concat('/subscriptions/',subscription().subscriptionId, '/providers/Microsoft.Web/locations/',variables('workspace-location-inline'),'/managedApis/azuresentinel')]"
                      }
                    }
                  },
                  "TaniumApiToken": {
                    "value": "[[parameters('TaniumApiToken')]"
                  },
                  "TaniumActionsApi": {
                    "value": "[[variables('TaniumActionsApi')]"
                  },
                  "TaniumAllComputersUrl": {
                    "value": "[[variables('TaniumAllComputersUrl')]"
                  },
                  "TaniumPackagesByNameUrlFragment": {
                    "value": "[[variables('TaniumPackagesByNameUrlFragment')]"
                  },
                  "TaniumActionResultDataUrlFragment": {
                    "value": "[[variables('TaniumActionResultDataUrlFragment')]"
                  },
                  "TaniumApiGatewayApi": {
                    "value": "[[variables('TaniumApiGatewayApi')]"
                  }
                }
              },
              "tags": {
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId4'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId4')]",
                "contentId": "[variables('_playbookContentId4')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion4')]",
                "source": {
                  "kind": "Solution",
                  "name": "Tanium",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Tanium",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Tanium Inc.",
                  "email": "support@tanium.com",
                  "tier": "Partner",
                  "link": "https://support.tanium.com"
                }
              }
            }
          ],
          "metadata": {
            "title": "Tanium-QuarantineHosts",
            "description": "This playbook starts with a Microsoft Sentinel incident, gets the hosts associated with that incident, then directs Tanium to quarantine those hosts. The status of the quarantine operation is commented on the Sentinel incident.",
            "prerequisites": [
              "1. Microsoft Sentinel incidents with associated hosts.",
              "2. A [Tanium API Token](https://docs.tanium.com/platform_user/platform_user/console_api_tokens.html) granting access to your Tanium environment: the query will be made with the user priviledges of that token.",
              "3. A hostname for your Tanium environment reachable from Logic Apps."
            ],
            "postDeploymentSteps": [
              "1. Ensure the Logic App API connection to Microsoft Sentinel is authenticated."
            ],
            "entities": [
              "host"
            ],
            "tags": [
              "Remediation"
            ],
            "lastUpdateTime": "2022-09-15T00:00:00Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/templateSpecs",
      "apiVersion": "2021-05-01",
      "name": "[variables('playbookTemplateSpecName5')]",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-sentinelWorkspaceId": "[variables('workspaceResourceId')]",
        "hidden-sentinelContentType": "Playbook"
      },
      "properties": {
        "description": "Tanium-ResolveThreatResponseAlert playbook",
        "displayName": "Tanium-ResolveThreatResponseAlert playbook"
      }
    },
    {
      "type": "Microsoft.Resources/templateSpecs/versions",
      "apiVersion": "2021-05-01",
      "name": "[concat(variables('playbookTemplateSpecName5'),'/',variables('playbookVersion5'))]",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-sentinelWorkspaceId": "[variables('workspaceResourceId')]",
        "hidden-sentinelContentType": "Playbook"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/templateSpecs', variables('playbookTemplateSpecName5'))]"
      ],
      "properties": {
        "description": "Tanium-ResolveThreatResponseAlert Playbook with template version 2.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion5')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "Tanium-ResolveThreatResponseAlert",
              "type": "string"
            },
            "IntegrationAccountName": {
              "defaultValue": "Tanium-ResolveThreatResponseAlert-Integration",
              "type": "string",
              "metadata": {
                "description": "An Integration Account is required to run inline JavaScript actions"
              }
            },
            "IntegrationAccountPricingTier": {
              "type": "string",
              "defaultValue": "Free",
              "allowedValues": [
                "Free",
                "Basic",
                "Standard"
              ],
              "metadata": {
                "description": "Specify the Pricing Tier of the Integration Account."
              }
            },
            "TaniumApiToken": {
              "defaultValue": "",
              "type": "securestring",
              "metadata": {
                "description": "The Tanium API Token used for this logic app. The logic app will be restricted to the level of access available to the user who generated the token."
              }
            },
            "TaniumServerHostname": {
              "defaultValue": "hostname",
              "type": "String",
              "metadata": {
                "description": "The hostname for your Tanium server e.g. tanium.example.com"
              }
            }
          },
          "variables": {
            "AzureSentinelConnectionName": "[[concat('azuresentinel-', parameters('PlaybookName'))]",
            "TaniumApiGatewayApi": "[[uri(concat('https://',parameters('TaniumServerHostname')),'/plugin/products/gateway/graphql')]",
            "connection-1": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azuresentinel')]",
            "_connection-1": "[[variables('connection-1')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2018-07-01-preview",
              "name": "[[variables('AzureSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "properties": {
                "displayName": "[[variables('AzureSentinelConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-1')]"
                }
              }
            },
            {
              "type": "Microsoft.Logic/integrationAccounts",
              "apiVersion": "2016-06-01",
              "name": "[[parameters('IntegrationAccountName')]",
              "location": "[[variables('workspace-location-inline')]",
              "sku": {
                "name": "[[parameters('IntegrationAccountPricingTier')]"
              },
              "properties": {
                "state": "Enabled"
              }
            },
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2019-05-01",
              "name": "[[parameters('PlaybookName')]",
              "location": "[[variables('workspace-location-inline')]",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                "[[resourceId('Microsoft.Logic/integrationAccounts', parameters('IntegrationAccountName'))]"
              ],
              "properties": {
                "state": "Enabled",
                "integrationAccount": {
                  "id": "[[resourceId('Microsoft.Logic/integrationAccounts', parameters('IntegrationAccountName'))]"
                },
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    },
                    "TaniumApiGatewayApi": {
                      "type": "String"
                    },
                    "TaniumApiToken": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The Tanium API Token provides access to the Tanium Server. Access is restricted to the level of access available to the user who generated the token."
                      }
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Check_API_Gateway_response": {
                      "actions": {
                        "Comment_success": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['object']?['id']",
                              "message": "<p><span style=\"font-size: 16px\"><strong>Resolved Tanium Threat Response Alert</strong></span></p><p><span style=\"font-size: 12px\">\nThreat Response alert </span><span style=\"font-size: 12px\">@{body('Extract_Threat_Response_Alert_GUID')}</span><span style=\"font-size: 12px\"> is now resolved</span></p>"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                          }
                        }
                      },
                      "runAfter": {
                        "Resolve_Threat_Response_Alert_using_Tanium_API_Gateway": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Comment_failure": {
                            "type": "ApiConnection",
                            "inputs": {
                              "body": {
                                "incidentArmId": "@triggerBody()?['object']?['id']",
                                "message": "<p><span style=\"font-size: 16px\"><strong>Failed to resolve Tanium Threat Response Alert</strong></span></p><p>Threat Response alert @{body('Extract_Threat_Response_Alert_GUID')['body']} failed to resolve<br>\nError: @{body('Resolve_Threat_Response_Alert_using_Tanium_API_Gateway')?['errors']?[0]['message']}</p>"
                              },
                              "host": {
                                "connection": {
                                  "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                }
                              },
                              "method": "post",
                              "path": "/Incidents/Comment"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@body('Resolve_Threat_Response_Alert_using_Tanium_API_Gateway')?['errors']",
                              "@null"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Extract_Threat_Response_Alert_GUID": {
                      "type": "JavaScriptCode",
                      "inputs": {
                        "code": "var sentinel = workflowContext.trigger.outputs.body;\r\n\r\nreturn JSON.parse(sentinel.object.properties.relatedEntities.find(function(e) {\r\n\treturn e.kind === 'Url';\r\n}).properties.url.replace(/\\\\/g, '')).alert_guid;"
                      }
                    },
                    "Initialize_API_Gateway_mutation": {
                      "runAfter": {
                        "Extract_Threat_Response_Alert_GUID": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api gateway mutation",
                            "type": "string",
                            "value": "mutation($threatResponseAlert: ThreatResponseAlertRef!) {\n  threatResponseAlertResolve(ref: $threatResponseAlert) {\n    error {\n      message\n      retryable\n      timedOut\n    }\n    guid\n    resolved\n  }\n}"
                          }
                        ]
                      }
                    },
                    "Initialize_API_Gateway_mutation_variables": {
                      "runAfter": {
                        "Initialize_API_Gateway_mutation": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api gateway mutation variables",
                            "type": "object",
                            "value": {
                              "threatResponseAlert": {
                                "guid": "@body('Extract_Threat_Response_Alert_GUID')"
                              }
                            }
                          }
                        ]
                      }
                    },
                    "Resolve_Threat_Response_Alert_using_Tanium_API_Gateway": {
                      "runAfter": {
                        "Initialize_API_Gateway_mutation_variables": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "body": {
                          "query": "@variables('api gateway mutation')",
                          "variables": "@variables('api gateway mutation variables')"
                        },
                        "headers": {
                          "Content-Type": "application/json",
                          "session": "@parameters('TaniumApiToken')"
                        },
                        "method": "POST",
                        "uri": "@parameters('TaniumApiGatewayApi')"
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionName": "[[variables('AzureSentinelConnectionName')]",
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                        "id": "[[concat('/subscriptions/',subscription().subscriptionId, '/providers/Microsoft.Web/locations/',variables('workspace-location-inline'),'/managedApis/azuresentinel')]"
                      }
                    }
                  },
                  "TaniumApiToken": {
                    "value": "[[parameters('TaniumApiToken')]"
                  },
                  "TaniumApiGatewayApi": {
                    "value": "[[variables('TaniumApiGatewayApi')]"
                  }
                }
              },
              "tags": {
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId5'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId5')]",
                "contentId": "[variables('_playbookContentId5')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion5')]",
                "source": {
                  "kind": "Solution",
                  "name": "Tanium",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Tanium",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Tanium Inc.",
                  "email": "support@tanium.com",
                  "tier": "Partner",
                  "link": "https://support.tanium.com"
                }
              }
            }
          ],
          "metadata": {
            "title": "Tanium-ResolveThreatResponseAlert",
            "description": "This playbook will resolve any Tanium Threat Response alerts associated with a Microsoft Sentinel incident.",
            "prerequisites": [
              "1. Microsoft Sentinel incidents created from Tanium Threat Response alerts by the analytics rules shipped by the Tanium solution for Microsoft Sentinel",
              "2. A [Tanium API Token](https://docs.tanium.com/platform_user/platform_user/console_api_tokens.html) granting access to your Tanium environment: the query will be made with the user priviledges of that token.",
              "3. A hostname for your Tanium environment reachable from Logic Apps."
            ],
            "postDeploymentSteps": [
              "1. Ensure the Logic App API connection to Microsoft Sentinel is authenticated."
            ],
            "entities": [
              "host"
            ],
            "tags": [
              "Remediation"
            ],
            "lastUpdateTime": "2022-09-15T00:00:00Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/templateSpecs",
      "apiVersion": "2021-05-01",
      "name": "[variables('playbookTemplateSpecName6')]",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-sentinelWorkspaceId": "[variables('workspaceResourceId')]",
        "hidden-sentinelContentType": "Playbook"
      },
      "properties": {
        "description": "Tanium-SCCMClientHealth playbook",
        "displayName": "Tanium-SCCMClientHealth playbook"
      }
    },
    {
      "type": "Microsoft.Resources/templateSpecs/versions",
      "apiVersion": "2021-05-01",
      "name": "[concat(variables('playbookTemplateSpecName6'),'/',variables('playbookVersion6'))]",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-sentinelWorkspaceId": "[variables('workspaceResourceId')]",
        "hidden-sentinelContentType": "Playbook"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/templateSpecs', variables('playbookTemplateSpecName6'))]"
      ],
      "properties": {
        "description": "Tanium-SCCMClientHealth Playbook with template version 2.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion6')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "Tanium-SCCMClientHealth",
              "type": "string"
            },
            "IntegrationAccountName": {
              "defaultValue": "Tanium-SCCMClientHealth-Integration",
              "type": "string",
              "metadata": {
                "description": "An Integration Account is required to run inline JavaScript actions"
              }
            },
            "IntegrationAccountPricingTier": {
              "type": "string",
              "defaultValue": "Free",
              "allowedValues": [
                "Free",
                "Basic",
                "Standard"
              ],
              "metadata": {
                "description": "Specify the Pricing Tier of the Integration Account."
              }
            },
            "TaniumApiToken": {
              "defaultValue": "",
              "type": "securestring",
              "metadata": {
                "description": "The Tanium API Token used for this logic app. The logic app will be restricted to the level of access available to the user who generated the token."
              }
            },
            "TaniumServerHostname": {
              "defaultValue": "hostname",
              "type": "String",
              "metadata": {
                "description": "The hostname for your Tanium server e.g. tanium.example.com"
              }
            }
          },
          "variables": {
            "AzureSentinelConnectionName": "[[concat('azuresentinel-', parameters('PlaybookName'))]",
            "TaniumApiGatewayApi": "[[uri(concat('https://',parameters('TaniumServerHostname')),'/plugin/products/gateway/graphql')]",
            "connection-1": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azuresentinel')]",
            "_connection-1": "[[variables('connection-1')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2018-07-01-preview",
              "name": "[[variables('AzureSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "properties": {
                "displayName": "[[variables('AzureSentinelConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-1')]"
                }
              }
            },
            {
              "type": "Microsoft.Logic/integrationAccounts",
              "apiVersion": "2016-06-01",
              "name": "[[parameters('IntegrationAccountName')]",
              "location": "[[variables('workspace-location-inline')]",
              "sku": {
                "name": "[[parameters('IntegrationAccountPricingTier')]"
              },
              "properties": {
                "state": "Enabled"
              }
            },
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2019-05-01",
              "name": "[[parameters('PlaybookName')]",
              "location": "[[variables('workspace-location-inline')]",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                "[[resourceId('Microsoft.Logic/integrationAccounts', parameters('IntegrationAccountName'))]"
              ],
              "properties": {
                "state": "Enabled",
                "integrationAccount": {
                  "id": "[[resourceId('Microsoft.Logic/integrationAccounts', parameters('IntegrationAccountName'))]"
                },
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    },
                    "TaniumApiToken": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The Tanium API Token provides access to the Tanium Server. Access is restricted to the level of access available to the user who generated the token."
                      }
                    },
                    "TaniumApiGatewayApi": {
                      "type": "String"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Add_comment_to_incident_(V3)_2": {
                      "runAfter": {
                        "Create_HTML_table": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "incidentArmId": "@triggerBody()?['object']?['id']",
                          "message": "<p>@{body('Create_HTML_table')}</p>"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/Incidents/Comment"
                      }
                    },
                    "Create_HTML_table": {
                      "runAfter": {
                        "Flatten_API_Gateway_endpoints": [
                          "Succeeded"
                        ]
                      },
                      "type": "Table",
                      "inputs": {
                        "format": "HTML",
                        "from": "@body('Flatten_API_Gateway_endpoints')"
                      }
                    },
                    "Entities_-_Get_Hosts": {
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/host"
                      }
                    },
                    "Exit_early_if_no_hosts_are_found": {
                      "actions": {
                        "Add_comment_to_incident_(V3)": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['object']?['id']",
                              "message": "<p>No hosts found for this incident.</p>"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                          }
                        },
                        "Terminate": {
                          "runAfter": {
                            "Add_comment_to_incident_(V3)": [
                              "Succeeded"
                            ]
                          },
                          "type": "Terminate",
                          "inputs": {
                            "runStatus": "Succeeded"
                          }
                        }
                      },
                      "runAfter": {
                        "Entities_-_Get_Hosts": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "less": [
                              "@length(body('Entities_-_Get_Hosts')?['Hosts'])",
                              1
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Flatten_API_Gateway_endpoints": {
                      "runAfter": {
                        "Parse_endpoints_array": [
                          "Succeeded"
                        ]
                      },
                      "type": "JavaScriptCode",
                      "inputs": {
                        "code": "var e = workflowContext.actions.Parse_endpoints_array.outputs.body;\r\n\r\nfunction sensorReadings(r) {\r\n\treturn r.columns.map(c => {\r\n\t\tif (c.sensor && c.sensor.name) {\r\n\t\t\treturn { name: [c.sensor.name, c.name].join(' - '), value: c.values.join(' ') };\r\n\t\t} else {\r\n\t\t\treturn { name: c.name, value: c.values.join(' ') };\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction flatten(obj, pk = '') {\r\n\tif (pk !== '') pk += ' ';\r\n\tlet flat = {};\r\n\tObject.keys(obj).forEach((key) => {\r\n\t\tif (key === 'sensorReadings') {\r\n\t\t\tsensorReadings(obj[key]).forEach((r) => {\r\n\t\t\t\tflat[r.name] = r.value;\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tif (typeof obj[key] === 'object' && obj[key] !== null) {\r\n\t\t\t\tObject.assign(flat, flatten(obj[key], pk + key));\r\n\t\t\t} else {\r\n\t\t\t\tflat[pk + key] = obj[key];\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\treturn flat;\r\n}\r\n\r\nreturn e.map(function(e) { return flatten(e.node); });"
                      }
                    },
                    "For_each_incident_host": {
                      "foreach": "@body('Entities_-_Get_Hosts')?['Hosts']",
                      "actions": {
                        "If_ip_address": {
                          "actions": {
                            "Append_to_endpoint_filters": {
                              "runAfter": {
                                "Compose_endpoint_filter_for_host_and_ip_address": [
                                  "Succeeded"
                                ]
                              },
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "endpoint filters",
                                "value": "@outputs('Compose_endpoint_filter_for_host_and_ip_address')"
                              }
                            },
                            "Compose_endpoint_filter_for_host_and_ip_address": {
                              "type": "Compose",
                              "inputs": {
                                "filters": [
                                  {
                                    "op": "CONTAINS",
                                    "path": "ipAddress",
                                    "value": "@{body('Parse_host_json')?['additionalData']?['LastIpAddress']}"
                                  },
                                  {
                                    "path": "name",
                                    "value": "@{body('Parse_host_json')?['hostName']}"
                                  }
                                ]
                              }
                            }
                          },
                          "runAfter": {
                            "Parse_host_json": [
                              "Succeeded"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Append_host_only_to_endpoint_filters": {
                                "runAfter": {
                                  "Compose_endpoint_filter_for_host_only": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "AppendToArrayVariable",
                                "inputs": {
                                  "name": "endpoint filters",
                                  "value": "@outputs('Compose_endpoint_filter_for_host_only')"
                                }
                              },
                              "Compose_endpoint_filter_for_host_only": {
                                "type": "Compose",
                                "inputs": {
                                  "filters": [
                                    {
                                      "path": "name",
                                      "value": "@{body('Parse_host_json')?['hostName']}"
                                    }
                                  ]
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "not": {
                                  "equals": [
                                    "@body('Parse_host_json')?['additionalData']?['LastIpAddress']",
                                    "@null"
                                  ]
                                }
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Parse_host_json": {
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@items('For_each_incident_host')",
                            "schema": {
                              "properties": {
                                "Type": {
                                  "type": "string"
                                },
                                "additionalData": {
                                  "properties": {
                                    "AvStatus": {
                                      "type": "string"
                                    },
                                    "FQDN": {
                                      "type": "string"
                                    },
                                    "HealthStatus": {
                                      "type": "string"
                                    },
                                    "LastExternalIpAddress": {
                                      "type": "string"
                                    },
                                    "LastIpAddress": {
                                      "type": "string"
                                    },
                                    "LastSeen": {
                                      "type": "string"
                                    },
                                    "LoggedOnUsers": {
                                      "type": "string"
                                    },
                                    "MdatpDeviceId": {
                                      "type": "string"
                                    },
                                    "OnboardingStatus": {
                                      "type": "string"
                                    },
                                    "RiskScore": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "friendlyName": {
                                  "type": "string"
                                },
                                "hostName": {
                                  "type": "string"
                                },
                                "osFamily": {
                                  "type": "string"
                                },
                                "osVersion": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_Endpoint_Filters_array": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "Initialize_API_Gateway_Query": {
                      "runAfter": {
                        "Exit_early_if_no_hosts_are_found": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api gateway query",
                            "type": "string",
                            "value": "query ($incidentHosts: EndpointFieldFilter, $endCursor: Cursor, $source: EndpointSource) {\n  endpoints(source: $source, first: 10, after: $endCursor, filter: $incidentHosts) {\n    edges {\n      node {\n        name\n        ipAddress\n        sensorReadings(sensors: [{name: \"SCCM Client Health\"}]) {\n          columns {\n            sensor {\n              name\n            }\n            name\n            values\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n"
                          }
                        ]
                      },
                      "description": "To check this query against a Tanium Server question use this in the query variables: {\"source\":{\"ts\":{\"stableWaitTime\":10}}}"
                    },
                    "Initialize_API_Gateway_Query_Variables": {
                      "runAfter": {
                        "Initialize_Tanium_Endpoint_Source_to_TDS": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api gateway query variables",
                            "type": "string",
                            "value": "{\n  \"source\": @{variables('Tanium Endpoint Source')},\n  \"incidentHosts\": {\n    \"any\": true,\n    \"filters\": @{variables('endpoint filters')}\n  }\n}"
                          }
                        ]
                      }
                    },
                    "Initialize_API_Gateway_Response": {
                      "runAfter": {
                        "Query_API_Gateway": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "API Gateway Response",
                            "type": "object",
                            "value": "@body('Query_API_Gateway')"
                          }
                        ]
                      }
                    },
                    "Initialize_API_Gateway_query_cursor": {
                      "runAfter": {
                        "Parse_API_Gateway_response": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "cursor",
                            "type": "string",
                            "value": "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['endCursor']"
                          }
                        ]
                      }
                    },
                    "Initialize_Endpoint_Filters_array": {
                      "runAfter": {
                        "Initialize_API_Gateway_Query": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "endpoint filters",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Tanium_Endpoint_Source_to_TDS": {
                      "runAfter": {
                        "For_each_incident_host": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "tanium endpoint source",
                            "type": "object",
                            "value": {
                              "tds": {
                                "allNamespaces": false
                              }
                            }
                          }
                        ]
                      }
                    },
                    "Initialize_endpoints_array": {
                      "runAfter": {
                        "Initialize_API_Gateway_query_cursor": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "endpoints",
                            "type": "array",
                            "value": "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['edges']"
                          }
                        ]
                      }
                    },
                    "Paginate_API_Gateway_query_if_needed": {
                      "actions": {
                        "Until": {
                          "actions": {
                            "For_each_endpoint_in_paginated_API_Gateway_response": {
                              "foreach": "@body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['edges']",
                              "actions": {
                                "Append_endpoint_to_endpoints": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "endpoints",
                                    "value": "@items('For_each_endpoint_in_paginated_API_Gateway_response')"
                                  }
                                }
                              },
                              "runAfter": {
                                "Update_API_Gateway_query_cursor": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Foreach",
                              "runtimeConfiguration": {
                                "concurrency": {
                                  "repetitions": 1
                                }
                              }
                            },
                            "Paginate_API_Gateway": {
                              "runAfter": {
                                "Update_API_Gateway_query_variables": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Http",
                              "inputs": {
                                "body": {
                                  "query": "@variables('api gateway query')",
                                  "variables": "@variables('api gateway query variables')"
                                },
                                "headers": {
                                  "Content-Type": "application/json",
                                  "session": "@parameters('TaniumApiToken')"
                                },
                                "method": "POST",
                                "uri": "@parameters('TaniumApiGatewayApi')"
                              },
                              "runtimeConfiguration": {
                                "secureData": {
                                  "properties": [
                                    "inputs"
                                  ]
                                }
                              }
                            },
                            "Parse_paginated_API_Gateway_response": {
                              "runAfter": {
                                "Paginate_API_Gateway": [
                                  "Succeeded"
                                ]
                              },
                              "type": "ParseJson",
                              "inputs": {
                                "content": "@body('Paginate_API_Gateway')",
                                "schema": {
                                  "properties": {
                                    "data": {
                                      "properties": {
                                        "endpoints": {
                                          "properties": {
                                            "edges": {
                                              "items": {
                                                "properties": {
                                                  "node": {
                                                    "type": "object"
                                                  }
                                                },
                                                "required": [
                                                  "node"
                                                ],
                                                "type": "object"
                                              },
                                              "type": "array"
                                            },
                                            "pageInfo": {
                                              "properties": {
                                                "endCursor": {
                                                  "type": "string"
                                                },
                                                "hasNextPage": {
                                                  "type": "boolean"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              }
                            },
                            "Update_API_Gateway_query_cursor": {
                              "runAfter": {
                                "Parse_paginated_API_Gateway_response": [
                                  "Succeeded"
                                ]
                              },
                              "type": "SetVariable",
                              "inputs": {
                                "name": "cursor",
                                "value": "@body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['endCursor']"
                              }
                            },
                            "Update_API_Gateway_query_variables": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "api gateway query variables",
                                "value": "{\n  \"source\": @{variables('tanium endpoint source')},\n  \"endCursor\": \"@{variables('cursor')}\"\n}"
                              }
                            }
                          },
                          "expression": "@equals(body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['hasNextPage'], false)",
                          "limit": {
                            "count": 60,
                            "timeout": "PT1H"
                          },
                          "type": "Until"
                        }
                      },
                      "runAfter": {
                        "Initialize_endpoints_array": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['hasNextPage']",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Parse_API_Gateway_response": {
                      "runAfter": {
                        "Switch_to_TS_from_TDS_if_needed": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@variables('API Gateway Response')",
                        "schema": {
                          "properties": {
                            "data": {
                              "properties": {
                                "endpoints": {
                                  "properties": {
                                    "edges": {
                                      "items": {
                                        "properties": {
                                          "node": {
                                            "type": "object"
                                          }
                                        },
                                        "required": [
                                          "node"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "pageInfo": {
                                      "properties": {
                                        "endCursor": {
                                          "type": "string"
                                        },
                                        "hasNextPage": {
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "errors": {
                              "items": {
                                "properties": {
                                  "message": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "message"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "Parse_endpoints_array": {
                      "runAfter": {
                        "Paginate_API_Gateway_query_if_needed": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@variables('endpoints')",
                        "schema": {
                          "type": "array"
                        }
                      },
                      "description": "We need an action's output to use in the JavaScript code since it can't read from a variable"
                    },
                    "Query_API_Gateway": {
                      "runAfter": {
                        "Initialize_API_Gateway_Query_Variables": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "body": {
                          "query": "@variables('api gateway query')",
                          "variables": "@variables('api gateway query variables')"
                        },
                        "headers": {
                          "Content-Type": "application/json",
                          "session": "@parameters('TaniumApiToken')"
                        },
                        "method": "POST",
                        "uri": "@parameters('TaniumApiGatewayApi')"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "inputs"
                          ]
                        }
                      }
                    },
                    "Switch_to_TS_from_TDS_if_needed": {
                      "actions": {
                        "Requery_the_API_Gateway": {
                          "runAfter": {
                            "Update_API_Query_variables_to_get_new_source": [
                              "Succeeded"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "body": {
                              "query": "@variables('api gateway query')",
                              "variables": "@variables('api gateway query variables')"
                            },
                            "headers": {
                              "Content-Type": "application/json",
                              "session": "@parameters('TaniumApiToken')"
                            },
                            "method": "POST",
                            "uri": "@parameters('TaniumApiGatewayApi')"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs"
                              ]
                            }
                          }
                        },
                        "Set_Tanium_Endpoint_Source_to_TS": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "tanium endpoint source",
                            "value": {
                              "ts": {
                                "stableWaitTime": 30
                              }
                            }
                          }
                        },
                        "Update_API_Gateway_Response": {
                          "runAfter": {
                            "Requery_the_API_Gateway": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "API Gateway Response",
                            "value": "@body('Requery_the_API_Gateway')"
                          }
                        },
                        "Update_API_Query_variables_to_get_new_source": {
                          "runAfter": {
                            "Set_Tanium_Endpoint_Source_to_TS": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "api gateway query variables",
                            "value": "{\n  \"source\": @{variables('Tanium Endpoint Source')},\n  \"incidentHosts\": {\n    \"any\": true,\n    \"filters\": @{variables('endpoint filters')}\n  }\n}"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_API_Gateway_Response": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "contains": [
                              "@string(body('Query_API_Gateway'))",
                              "must refer to an existing sensor"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionName": "[[variables('AzureSentinelConnectionName')]",
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                        "id": "[[concat('/subscriptions/',subscription().subscriptionId, '/providers/Microsoft.Web/locations/',variables('workspace-location-inline'),'/managedApis/azuresentinel')]"
                      }
                    }
                  },
                  "TaniumApiToken": {
                    "value": "[[parameters('TaniumApiToken')]"
                  },
                  "TaniumApiGatewayApi": {
                    "value": "[[variables('TaniumApiGatewayApi')]"
                  }
                }
              },
              "tags": {
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId6'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId6')]",
                "contentId": "[variables('_playbookContentId6')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion6')]",
                "source": {
                  "kind": "Solution",
                  "name": "Tanium",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Tanium",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Tanium Inc.",
                  "email": "support@tanium.com",
                  "tier": "Partner",
                  "link": "https://support.tanium.com"
                }
              }
            }
          ],
          "metadata": {
            "title": "Tanium-SCCMClientHealth",
            "description": "This playbook starts with a Microsoft Sentinel incident, gets the hosts associated with that incident, queries the Tanium API Gateway for the SCCM Client Health for those hosts, and then adds a comment to the incident with that information.",
            "prerequisites": [
              "1. Microsoft Sentinel incidents with associated hosts.",
              "2. A [Tanium API Token](https://docs.tanium.com/platform_user/platform_user/console_api_tokens.html) granting access to your Tanium environment: the query will be made with the user priviledges of that token.",
              "3. A hostname for your Tanium environment reachable from Logic Apps."
            ],
            "postDeploymentSteps": [
              "1. Ensure the Logic App API connection to Microsoft Sentinel is authenticated."
            ],
            "entities": [
              "host"
            ],
            "tags": [
              "Enrichment"
            ],
            "lastUpdateTime": "2022-09-15T00:00:00Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/templateSpecs",
      "apiVersion": "2021-05-01",
      "name": "[variables('playbookTemplateSpecName7')]",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-sentinelWorkspaceId": "[variables('workspaceResourceId')]",
        "hidden-sentinelContentType": "Playbook"
      },
      "properties": {
        "description": "Tanium-UnquarantineHosts playbook",
        "displayName": "Tanium-UnquarantineHosts playbook"
      }
    },
    {
      "type": "Microsoft.Resources/templateSpecs/versions",
      "apiVersion": "2021-05-01",
      "name": "[concat(variables('playbookTemplateSpecName7'),'/',variables('playbookVersion7'))]",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-sentinelWorkspaceId": "[variables('workspaceResourceId')]",
        "hidden-sentinelContentType": "Playbook"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/templateSpecs', variables('playbookTemplateSpecName7'))]"
      ],
      "properties": {
        "description": "Tanium-UnquarantineHosts Playbook with template version 2.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion7')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "Tanium-UnquarantineHosts",
              "type": "string"
            },
            "IntegrationAccountName": {
              "defaultValue": "Tanium-UnquarantineHosts-Integration",
              "type": "string",
              "metadata": {
                "description": "An Integration Account is required to run inline JavaScript actions"
              }
            },
            "IntegrationAccountPricingTier": {
              "type": "string",
              "defaultValue": "Free",
              "allowedValues": [
                "Free",
                "Basic",
                "Standard"
              ],
              "metadata": {
                "description": "Specify the Pricing Tier of the Integration Account."
              }
            },
            "TaniumApiToken": {
              "defaultValue": "",
              "type": "securestring",
              "metadata": {
                "description": "The Tanium API Token used for this logic app. The logic app will be restricted to the level of access available to the user who generated the token."
              }
            },
            "TaniumServerHostname": {
              "defaultValue": "hostname",
              "type": "String",
              "metadata": {
                "description": "The hostname for your Tanium server e.g. tanium.example.com"
              }
            }
          },
          "variables": {
            "AzureSentinelConnectionName": "[[concat('azuresentinel-', parameters('PlaybookName'))]",
            "TaniumActionsApi": "[[uri(concat('https://', parameters('TaniumServerHostname')), '/api/v2/actions')]",
            "TaniumAllComputersUrl": "[[uri(concat('https://', parameters('TaniumServerHostname')), '/api/v2/groups/by-name/All%20Computers')]",
            "TaniumPackagesByNameUrlFragment": "[[uri(concat('https://', parameters('TaniumServerHostname')), '/api/v2/packages/by-name/')]",
            "TaniumActionResultDataUrlFragment": "[[uri(concat('https://', parameters('TaniumServerHostname')), '/api/v2/result_data/action/')]",
            "TaniumApiGatewayApi": "[[uri(concat('https://', parameters('TaniumServerHostname')), '/plugin/products/gateway/graphql')]",
            "connection-1": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azuresentinel')]",
            "_connection-1": "[[variables('connection-1')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2018-07-01-preview",
              "name": "[[variables('AzureSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "properties": {
                "displayName": "[[variables('AzureSentinelConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-1')]"
                }
              }
            },
            {
              "type": "Microsoft.Logic/integrationAccounts",
              "apiVersion": "2016-06-01",
              "name": "[[parameters('IntegrationAccountName')]",
              "location": "[[variables('workspace-location-inline')]",
              "sku": {
                "name": "[[parameters('IntegrationAccountPricingTier')]"
              },
              "properties": {
                "state": "Enabled"
              }
            },
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2019-05-01",
              "name": "[[parameters('PlaybookName')]",
              "location": "[[variables('workspace-location-inline')]",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                "[[resourceId('Microsoft.Logic/integrationAccounts', parameters('IntegrationAccountName'))]"
              ],
              "properties": {
                "state": "Enabled",
                "integrationAccount": {
                  "id": "[[resourceId('Microsoft.Logic/integrationAccounts', parameters('IntegrationAccountName'))]"
                },
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    },
                    "TaniumApiToken": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The Tanium API Token provides access to the Tanium Server. Access is restricted to the level of access available to the user who generated the token."
                      }
                    },
                    "TaniumActionsApi": {
                      "type": "String"
                    },
                    "TaniumAllComputersUrl": {
                      "type": "String"
                    },
                    "TaniumPackagesByNameUrlFragment": {
                      "type": "String"
                    },
                    "TaniumActionResultDataUrlFragment": {
                      "type": "String"
                    },
                    "TaniumApiGatewayApi": {
                      "type": "String"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Add_comment_to_incident_(V3)_2": {
                      "runAfter": {
                        "Create_HTML_table_of_issued_actions": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "incidentArmId": "@triggerBody()?['object']?['id']",
                          "message": "<p>ISSUED TANIUM ACTIONS<br>\n@{body('Create_HTML_table_of_issued_actions')}</p>"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/Incidents/Comment"
                      }
                    },
                    "Add_comment_to_incident_-_hosts_that_will_be_targeted": {
                      "runAfter": {
                        "Create_HTML_table_of_matched_endpoints": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "incidentArmId": "@triggerBody()?['object']?['id']",
                          "message": "<p>Preparing to issue quarantine actions targeting these endpoints associated with this incident<br>\n@{body('Create_HTML_table_of_matched_endpoints')}</p>"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/Incidents/Comment"
                      }
                    },
                    "Check_issued_actions": {
                      "actions": {
                        "Terminate_-_no_actions_were_successfully_issued": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "message": "Unable to issue actions"
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "If_Linux_endpoints": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "less": [
                              "@length(variables('issued actions'))",
                              1
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Collect_action_results_for_each_issued_action": {
                      "foreach": "@variables('issued actions')",
                      "actions": {
                        "Get_action_result": {
                          "type": "Http",
                          "inputs": {
                            "headers": {
                              "Content-Type": "application/json",
                              "session": "@parameters('TaniumApiToken')"
                            },
                            "method": "GET",
                            "uri": "@{concat(parameters('TaniumActionResultDataUrlFragment'), items('Collect_action_results_for_each_issued_action')?['id'])}"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs"
                              ]
                            }
                          }
                        },
                        "If_action_result_could_be_determined": {
                          "actions": {
                            "For_each_action_result_set": {
                              "foreach": "@body('Parse_action_result')",
                              "actions": {
                                "Append_to_action_results": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "action results",
                                    "value": "@item()"
                                  }
                                }
                              },
                              "type": "Foreach"
                            }
                          },
                          "runAfter": {
                            "Parse_action_result": [
                              "Succeeded"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Append_to_unknown_action_results": {
                                "runAfter": {
                                  "Compose_unknown_action_result": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "AppendToArrayVariable",
                                "inputs": {
                                  "name": "unknown action results",
                                  "value": "@outputs('Compose_unknown_action_result')"
                                }
                              },
                              "Compose_unknown_action_result": {
                                "type": "Compose",
                                "inputs": {
                                  "action id": "@item()?['id']",
                                  "status": "Completed with unknown result"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "greater": [
                                  "@length(outputs('Parse_action_result')['body'])",
                                  0
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Parse_action_result": {
                          "runAfter": {
                            "Parse_current_issued_action": [
                              "Succeeded"
                            ]
                          },
                          "type": "JavaScriptCode",
                          "inputs": {
                            "code": "var action_results = workflowContext.actions.Get_action_result.outputs.body.data;\r\nvar action_id = workflowContext.actions.Parse_current_issued_action.outputs.body.id;\r\nvar columns = action_results.result_sets[0].columns.map(c => c.name);\r\nvar robjects = [];\r\n\r\naction_results.result_sets.forEach(function(rs) {\r\n\trs.rows.forEach(function(row) {\r\n\t\tlet robject = {'action id': action_id};\r\n\t\tcolumns.forEach(function(c, i) {\r\n\t\t\trobject[c] = row.data[i][0].text;\r\n\t\t});\r\n\t\trobjects.push(robject);\r\n\t});\r\n});\r\n\r\nreturn robjects;"
                          }
                        },
                        "Parse_current_issued_action": {
                          "runAfter": {
                            "Get_action_result": [
                              "Succeeded"
                            ]
                          },
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@items('Collect_action_results_for_each_issued_action')",
                            "schema": {
                              "properties": {
                                "action_group": {
                                  "properties": {
                                    "id": {
                                      "type": "integer"
                                    },
                                    "name": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "approver": {
                                  "properties": {
                                    "id": {
                                      "type": "integer"
                                    },
                                    "name": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "comment": {
                                  "type": "string"
                                },
                                "creation_time": {
                                  "type": "string"
                                },
                                "distribute_seconds": {
                                  "type": "integer"
                                },
                                "expiration_time": {
                                  "type": "string"
                                },
                                "expire_seconds": {
                                  "type": "integer"
                                },
                                "history_saved_question": {
                                  "properties": {
                                    "id": {
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "id": {
                                  "type": "integer"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "package_spec": {
                                  "properties": {
                                    "available_time": {
                                      "type": "string"
                                    },
                                    "command": {
                                      "type": "string"
                                    },
                                    "command_timeout": {
                                      "type": "integer"
                                    },
                                    "content_set": {
                                      "properties": {
                                        "id": {
                                          "type": "integer"
                                        },
                                        "name": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "creation_time": {
                                      "type": "string"
                                    },
                                    "deleted_flag": {
                                      "type": "boolean"
                                    },
                                    "display_name": {
                                      "type": "string"
                                    },
                                    "expire_seconds": {
                                      "type": "integer"
                                    },
                                    "hidden_flag": {
                                      "type": "boolean"
                                    },
                                    "id": {
                                      "type": "integer"
                                    },
                                    "last_modified_by": {
                                      "type": "string"
                                    },
                                    "last_update": {
                                      "type": "string"
                                    },
                                    "mod_user": {
                                      "properties": {
                                        "display_name": {
                                          "type": "string"
                                        },
                                        "domain": {
                                          "type": "string"
                                        },
                                        "id": {
                                          "type": "integer"
                                        },
                                        "name": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "modification_time": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "parameter_definition": {
                                      "type": "string"
                                    },
                                    "process_group_flag": {
                                      "type": "boolean"
                                    },
                                    "skip_lock_flag": {
                                      "type": "boolean"
                                    },
                                    "source_hash": {
                                      "type": "string"
                                    },
                                    "verify_expire_seconds": {
                                      "type": "integer"
                                    },
                                    "verify_group": {
                                      "properties": {
                                        "id": {
                                          "type": "integer"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "verify_group_id": {
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "saved_action": {
                                  "properties": {
                                    "id": {
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "skip_lock_flag": {
                                  "type": "boolean"
                                },
                                "start_time": {
                                  "type": "string"
                                },
                                "status": {
                                  "type": "string"
                                },
                                "stopped_flag": {
                                  "type": "boolean"
                                },
                                "target_group": {
                                  "properties": {
                                    "id": {
                                      "type": "integer"
                                    },
                                    "name": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "user": {
                                  "properties": {
                                    "creation_time": {
                                      "type": "string"
                                    },
                                    "deleted_flag": {
                                      "type": "boolean"
                                    },
                                    "display_name": {
                                      "type": "string"
                                    },
                                    "domain": {
                                      "type": "string"
                                    },
                                    "effective_group_id": {
                                      "type": "integer"
                                    },
                                    "external_flag": {
                                      "type": "integer"
                                    },
                                    "group_id": {
                                      "type": "integer"
                                    },
                                    "id": {
                                      "type": "integer"
                                    },
                                    "last_login": {
                                      "type": "string"
                                    },
                                    "locked_out": {
                                      "type": "integer"
                                    },
                                    "mod_user": {
                                      "properties": {
                                        "display_name": {
                                          "type": "string"
                                        },
                                        "domain": {
                                          "type": "string"
                                        },
                                        "id": {
                                          "type": "integer"
                                        },
                                        "name": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "modification_time": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "previous_login": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_action_results": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach",
                      "runtimeConfiguration": {
                        "concurrency": {
                          "repetitions": 1
                        }
                      }
                    },
                    "Create_HTML_table_of_action_results": {
                      "runAfter": {
                        "Collect_action_results_for_each_issued_action": [
                          "Succeeded"
                        ]
                      },
                      "type": "Table",
                      "inputs": {
                        "format": "HTML",
                        "from": "@variables('action results')"
                      }
                    },
                    "Create_HTML_table_of_issued_actions": {
                      "runAfter": {
                        "Check_issued_actions": [
                          "Succeeded"
                        ]
                      },
                      "type": "Table",
                      "inputs": {
                        "columns": [
                          {
                            "header": "action id",
                            "value": "@item()?['id']"
                          },
                          {
                            "header": "name",
                            "value": "@item()?['name']"
                          },
                          {
                            "header": "status",
                            "value": "@item()?['status']"
                          }
                        ],
                        "format": "HTML",
                        "from": "@variables('issued actions')"
                      }
                    },
                    "Create_HTML_table_of_matched_endpoints": {
                      "runAfter": {
                        "Flatten_API_Gateway_endpoints": [
                          "Succeeded"
                        ]
                      },
                      "type": "Table",
                      "inputs": {
                        "format": "HTML",
                        "from": "@body('Flatten_API_Gateway_endpoints')"
                      }
                    },
                    "Create_HTML_table_of_unknown_action_results": {
                      "runAfter": {
                        "Create_HTML_table_of_action_results": [
                          "Succeeded"
                        ]
                      },
                      "type": "Table",
                      "inputs": {
                        "format": "HTML",
                        "from": "@variables('unknown action results')"
                      }
                    },
                    "Entities_-_Get_Hosts": {
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/host"
                      }
                    },
                    "Exit_early_if_no_hosts_are_found": {
                      "actions": {
                        "Add_comment_to_incident_(V3)": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['object']?['id']",
                              "message": "<p>No hosts found for this incident.</p>"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                          }
                        },
                        "Terminate": {
                          "runAfter": {
                            "Add_comment_to_incident_(V3)": [
                              "Succeeded"
                            ]
                          },
                          "type": "Terminate",
                          "inputs": {
                            "runStatus": "Succeeded"
                          }
                        }
                      },
                      "runAfter": {
                        "Entities_-_Get_Hosts": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "less": [
                              "@length(body('Entities_-_Get_Hosts')?['Hosts'])",
                              1
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Flatten_API_Gateway_endpoints": {
                      "runAfter": {
                        "Parse_endpoints_array": [
                          "Succeeded"
                        ]
                      },
                      "type": "JavaScriptCode",
                      "inputs": {
                        "code": "var e = workflowContext.actions.Parse_endpoints_array.outputs.body;\r\n\r\nfunction sensorReadings(r) {\r\n\treturn r.columns.map(c => {\r\n\t\tif (c.sensor && c.sensor.name) {\r\n\t\t\treturn { name: [c.sensor.name, c.name].join(' - '), value: c.values.join(' ') };\r\n\t\t} else {\r\n\t\t\treturn { name: c.name, value: c.values.join(' ') };\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction flatten(obj, pk = '') {\r\n\tif (pk !== '') pk += ' ';\r\n\tlet flat = {};\r\n\tObject.keys(obj).forEach((key) => {\r\n\t\tif (key === 'sensorReadings') {\r\n\t\t\tsensorReadings(obj[key]).forEach((r) => {\r\n\t\t\t\tflat[r.name] = r.value;\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tif (typeof obj[key] === 'object' && obj[key] !== null) {\r\n\t\t\t\tObject.assign(flat, flatten(obj[key], pk + key));\r\n\t\t\t} else {\r\n\t\t\t\tflat[pk + key] = obj[key];\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\treturn flat;\r\n}\r\n\r\nreturn e.map(function(e) { return flatten(e.node); });"
                      }
                    },
                    "For_each_endpoint": {
                      "foreach": "@variables('endpoints')",
                      "actions": {
                        "Compose_endpoint_filter_for_packages": {
                          "runAfter": {
                            "Parse_endpoint_JSON_data": [
                              "Succeeded"
                            ]
                          },
                          "type": "Compose",
                          "inputs": {
                            "and_flag": true,
                            "filters": [
                              {
                                "operator": "Equal",
                                "sensor": {
                                  "name": "Computer Name"
                                },
                                "value": "@body('Parse_endpoint_JSON_data')?['node']?['name']"
                              },
                              {
                                "operator": "RegexMatch",
                                "sensor": {
                                  "name": "IP Address"
                                },
                                "value": "@body('Parse_endpoint_JSON_data')?['node']?['ipAddress']"
                              }
                            ]
                          }
                        },
                        "Parse_endpoint_JSON_data": {
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@items('For_each_endpoint')",
                            "schema": {
                              "properties": {
                                "node": {
                                  "properties": {
                                    "ipAddress": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "os": {
                                      "properties": {
                                        "platform": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          }
                        },
                        "Switch": {
                          "runAfter": {
                            "Compose_endpoint_filter_for_packages": [
                              "Succeeded"
                            ]
                          },
                          "cases": {
                            "Linux": {
                              "case": "Linux",
                              "actions": {
                                "Append_to_Linux_endpoint_filters": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "linux endpoint filters",
                                    "value": "@outputs('Compose_endpoint_filter_for_packages')"
                                  }
                                }
                              }
                            },
                            "Mac": {
                              "case": "Mac",
                              "actions": {
                                "Append_to_macOS_endpoint_filters": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "macos endpoint filters",
                                    "value": "@outputs('Compose_endpoint_filter_for_packages')"
                                  }
                                }
                              }
                            },
                            "Windows": {
                              "case": "Windows",
                              "actions": {
                                "Append_to_Windows_endpoint_filters": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "windows endpoint filters",
                                    "value": "@outputs('Compose_endpoint_filter_for_packages')"
                                  }
                                }
                              }
                            }
                          },
                          "expression": "@body('Parse_endpoint_JSON_data')?['node']?['os']?['platform']",
                          "type": "Switch"
                        }
                      },
                      "runAfter": {
                        "Initialize_all_computers_id": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "For_each_incident_host": {
                      "foreach": "@body('Entities_-_Get_Hosts')?['Hosts']",
                      "actions": {
                        "If_ip_address": {
                          "actions": {
                            "Append_to_endpoint_filters": {
                              "runAfter": {
                                "Compose_endpoint_filter_for_host_and_ip_address": [
                                  "Succeeded"
                                ]
                              },
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "endpoint filters",
                                "value": "@outputs('Compose_endpoint_filter_for_host_and_ip_address')"
                              }
                            },
                            "Compose_endpoint_filter_for_host_and_ip_address": {
                              "type": "Compose",
                              "inputs": {
                                "filters": [
                                  {
                                    "op": "CONTAINS",
                                    "path": "ipAddress",
                                    "value": "@{body('Parse_host_json')?['additionalData']?['LastIpAddress']}"
                                  },
                                  {
                                    "path": "name",
                                    "value": "@{body('Parse_host_json')?['hostName']}"
                                  }
                                ]
                              }
                            }
                          },
                          "runAfter": {
                            "Parse_host_json": [
                              "Succeeded"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Append_host_only_to_endpoint_filters": {
                                "runAfter": {
                                  "Compose_endpoint_filter_for_host_only": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "AppendToArrayVariable",
                                "inputs": {
                                  "name": "endpoint filters",
                                  "value": "@outputs('Compose_endpoint_filter_for_host_only')"
                                }
                              },
                              "Compose_endpoint_filter_for_host_only": {
                                "type": "Compose",
                                "inputs": {
                                  "filters": [
                                    {
                                      "path": "name",
                                      "value": "@{body('Parse_host_json')?['hostName']}"
                                    }
                                  ]
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "not": {
                                  "equals": [
                                    "@body('Parse_host_json')?['additionalData']?['LastIpAddress']",
                                    "@null"
                                  ]
                                }
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Parse_host_json": {
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@items('For_each_incident_host')",
                            "schema": {
                              "properties": {
                                "Type": {
                                  "type": "string"
                                },
                                "additionalData": {
                                  "properties": {
                                    "AvStatus": {
                                      "type": "string"
                                    },
                                    "FQDN": {
                                      "type": "string"
                                    },
                                    "HealthStatus": {
                                      "type": "string"
                                    },
                                    "LastExternalIpAddress": {
                                      "type": "string"
                                    },
                                    "LastIpAddress": {
                                      "type": "string"
                                    },
                                    "LastSeen": {
                                      "type": "string"
                                    },
                                    "LoggedOnUsers": {
                                      "type": "string"
                                    },
                                    "MdatpDeviceId": {
                                      "type": "string"
                                    },
                                    "OnboardingStatus": {
                                      "type": "string"
                                    },
                                    "RiskScore": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "friendlyName": {
                                  "type": "string"
                                },
                                "hostName": {
                                  "type": "string"
                                },
                                "osFamily": {
                                  "type": "string"
                                },
                                "osVersion": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_Endpoint_Filters_array": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "Get_the_\"All_Computers\"_group": {
                      "runAfter": {
                        "Initialize_unknown_action_results": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "headers": {
                          "Content-Type": "application/json",
                          "session": "@parameters('TaniumApiToken')"
                        },
                        "method": "GET",
                        "uri": "@parameters('TaniumAllComputersUrl')"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "inputs"
                          ]
                        }
                      }
                    },
                    "If_Linux_endpoints": {
                      "actions": {
                        "Check_Linux_issued_action_result": {
                          "actions": {
                            "Append_Linux_issued_action_result_to_issued_actions": {
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "issued actions",
                                "value": "@body('Issue_Linux_action')?['data']"
                              }
                            }
                          },
                          "runAfter": {
                            "Issue_Linux_action": [
                              "Succeeded"
                            ]
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('Issue_Linux_action')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Compose_Linux_action": {
                          "runAfter": {
                            "Compose_Linux_target_group": [
                              "Succeeded"
                            ]
                          },
                          "type": "Compose",
                          "inputs": {
                            "action_group": {
                              "id": "@variables('all computers id')"
                            },
                            "distribute_seconds": 0,
                            "expire_seconds": "@body('Parse_Linux_package_json')?['data']?['expire_seconds']",
                            "name": "Apply from Microsoft Sentinel: @{variables('linux package name')}",
                            "package_spec": "@outputs('Compose_Linux_action_package_declaration')",
                            "target_group": "@outputs('Compose_Linux_target_group')"
                          }
                        },
                        "Compose_Linux_action_package_declaration": {
                          "runAfter": {
                            "Parse_Linux_package_json": [
                              "Succeeded"
                            ]
                          },
                          "type": "Compose",
                          "inputs": {
                            "expire_seconds": "@body('Parse_Linux_package_json')?['data']?['expire_seconds']",
                            "parameters": "@variables('package parameters')",
                            "source_id": "@body('Parse_Linux_package_json')?['data']?['id']"
                          }
                        },
                        "Compose_Linux_target_group": {
                          "runAfter": {
                            "Compose_Linux_action_package_declaration": [
                              "Succeeded"
                            ]
                          },
                          "type": "Compose",
                          "inputs": {
                            "and_flag": false,
                            "sub_groups": "@variables('linux endpoint filters')"
                          }
                        },
                        "Get_Linux_package": {
                          "type": "Http",
                          "inputs": {
                            "headers": {
                              "Content-Type": "application/json",
                              "session": "@parameters('TaniumApiToken')"
                            },
                            "method": "GET",
                            "uri": "@{concat(parameters('TaniumPackagesByNameUrlFragment'), join(split(variables('linux package name'), ' '), '%20'))}"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs"
                              ]
                            }
                          }
                        },
                        "Issue_Linux_action": {
                          "runAfter": {
                            "Compose_Linux_action": [
                              "Succeeded"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "body": "@outputs('Compose_Linux_action')",
                            "headers": {
                              "Content-Type": "application/json",
                              "session": "@parameters('TaniumApiToken')"
                            },
                            "method": "POST",
                            "uri": "@parameters('TaniumActionsApi')"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs"
                              ]
                            }
                          }
                        },
                        "Parse_Linux_package_json": {
                          "runAfter": {
                            "Get_Linux_package": [
                              "Succeeded"
                            ]
                          },
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@body('Get_Linux_package')",
                            "schema": {
                              "properties": {
                                "data": {
                                  "properties": {
                                    "available_time": {
                                      "type": "string"
                                    },
                                    "command": {
                                      "type": "string"
                                    },
                                    "command_timeout": {
                                      "type": "integer"
                                    },
                                    "content_set": {
                                      "properties": {
                                        "id": {
                                          "type": "integer"
                                        },
                                        "name": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "creation_time": {
                                      "type": "string"
                                    },
                                    "deleted_flag": {
                                      "type": "boolean"
                                    },
                                    "display_name": {
                                      "type": "string"
                                    },
                                    "expire_seconds": {
                                      "type": "integer"
                                    },
                                    "hidden_flag": {
                                      "type": "boolean"
                                    },
                                    "id": {
                                      "type": "integer"
                                    },
                                    "last_modified_by": {
                                      "type": "string"
                                    },
                                    "last_update": {
                                      "type": "string"
                                    },
                                    "mod_user": {
                                      "properties": {
                                        "display_name": {
                                          "type": "string"
                                        },
                                        "domain": {
                                          "type": "string"
                                        },
                                        "id": {
                                          "type": "integer"
                                        },
                                        "name": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "modification_time": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "parameter_definition": {
                                      "type": "string"
                                    },
                                    "process_group_flag": {
                                      "type": "boolean"
                                    },
                                    "skip_lock_flag": {
                                      "type": "boolean"
                                    },
                                    "source_hash": {
                                      "type": "string"
                                    },
                                    "source_id": {
                                      "type": "integer"
                                    },
                                    "verify_expire_seconds": {
                                      "type": "integer"
                                    },
                                    "verify_group": {
                                      "properties": {
                                        "id": {
                                          "type": "integer"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "verify_group_id": {
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "If_macOS_endpoints": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "greater": [
                              "@length(variables('linux endpoint filters'))",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "If_Windows_endpoints": {
                      "actions": {
                        "Check_Windows_issued_action_result": {
                          "actions": {
                            "Append_Windows_issued_action_result_to_issued_actions": {
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "issued actions",
                                "value": "@body('Issue_Windows_action')?['data']"
                              }
                            }
                          },
                          "runAfter": {
                            "Issue_Windows_action": [
                              "Succeeded"
                            ]
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('Issue_Windows_action')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Compose_Windows_action_package_declaration": {
                          "runAfter": {
                            "Parse_Windows_package_json": [
                              "Succeeded"
                            ]
                          },
                          "type": "Compose",
                          "inputs": {
                            "expire_seconds": "@body('Parse_Windows_package_json')?['data']?['expire_seconds']",
                            "parameters": "@variables('package parameters')",
                            "source_id": "@body('Parse_Windows_package_json')?['data']?['id']"
                          }
                        },
                        "Compose_Windows_target_group": {
                          "runAfter": {
                            "Compose_Windows_action_package_declaration": [
                              "Succeeded"
                            ]
                          },
                          "type": "Compose",
                          "inputs": {
                            "and_flag": false,
                            "sub_groups": "@variables('windows endpoint filters')"
                          }
                        },
                        "Compose_windows_action": {
                          "runAfter": {
                            "Compose_Windows_target_group": [
                              "Succeeded"
                            ]
                          },
                          "type": "Compose",
                          "inputs": {
                            "action_group": {
                              "id": "@variables('all computers id')"
                            },
                            "distribute_seconds": 0,
                            "expire_seconds": "@body('Parse_Windows_package_json')?['data']?['expire_seconds']",
                            "name": "Apply from Microsoft Sentinel: @{variables('windows package name')}",
                            "package_spec": "@outputs('Compose_Windows_action_package_declaration')",
                            "target_group": "@outputs('Compose_Windows_target_group')"
                          }
                        },
                        "Get_Windows_package": {
                          "type": "Http",
                          "inputs": {
                            "headers": {
                              "Content-Type": "application/json",
                              "session": "@parameters('TaniumApiToken')"
                            },
                            "method": "GET",
                            "uri": "@{concat(parameters('TaniumPackagesByNameUrlFragment'), join(split(variables('windows package name'), ' '), '%20'))}"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs"
                              ]
                            }
                          }
                        },
                        "Issue_Windows_action": {
                          "runAfter": {
                            "Compose_windows_action": [
                              "Succeeded"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "body": "@outputs('Compose_windows_action')",
                            "headers": {
                              "Content-Type": "application/json",
                              "session": "@parameters('TaniumApiToken')"
                            },
                            "method": "POST",
                            "uri": "@parameters('TaniumActionsApi')"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs"
                              ]
                            }
                          }
                        },
                        "Parse_Windows_package_json": {
                          "runAfter": {
                            "Get_Windows_package": [
                              "Succeeded"
                            ]
                          },
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@body('Get_Windows_package')",
                            "schema": {
                              "properties": {
                                "data": {
                                  "properties": {
                                    "available_time": {
                                      "type": "string"
                                    },
                                    "command": {
                                      "type": "string"
                                    },
                                    "command_timeout": {
                                      "type": "integer"
                                    },
                                    "content_set": {
                                      "properties": {
                                        "id": {
                                          "type": "integer"
                                        },
                                        "name": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "creation_time": {
                                      "type": "string"
                                    },
                                    "deleted_flag": {
                                      "type": "boolean"
                                    },
                                    "display_name": {
                                      "type": "string"
                                    },
                                    "expire_seconds": {
                                      "type": "integer"
                                    },
                                    "hidden_flag": {
                                      "type": "boolean"
                                    },
                                    "id": {
                                      "type": "integer"
                                    },
                                    "last_modified_by": {
                                      "type": "string"
                                    },
                                    "last_update": {
                                      "type": "string"
                                    },
                                    "mod_user": {
                                      "properties": {
                                        "display_name": {
                                          "type": "string"
                                        },
                                        "domain": {
                                          "type": "string"
                                        },
                                        "id": {
                                          "type": "integer"
                                        },
                                        "name": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "modification_time": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "parameter_definition": {
                                      "type": "string"
                                    },
                                    "process_group_flag": {
                                      "type": "boolean"
                                    },
                                    "skip_lock_flag": {
                                      "type": "boolean"
                                    },
                                    "source_hash": {
                                      "type": "string"
                                    },
                                    "source_id": {
                                      "type": "integer"
                                    },
                                    "verify_expire_seconds": {
                                      "type": "integer"
                                    },
                                    "verify_group": {
                                      "properties": {
                                        "id": {
                                          "type": "integer"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "verify_group_id": {
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "For_each_endpoint": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "greater": [
                              "@length(variables('windows endpoint filters'))",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "If_action_results": {
                      "actions": {
                        "Add_comment_to_incident_(V3)_-_action_results": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['object']?['id']",
                              "message": "<p>QUARANTINE ACTION RESULTS<br>\n@{body('Create_HTML_table_of_action_results')}</p>"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                          }
                        }
                      },
                      "runAfter": {
                        "If_action_results_and_unknown_action_results": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Add_comment_to_incident_(V3)_-_unknown_action_results": {
                            "type": "ApiConnection",
                            "inputs": {
                              "body": {
                                "incidentArmId": "@triggerBody()?['object']?['id']",
                                "message": "<p>QUARANTINE ACTION RESULTS<br>\n@{body('Create_HTML_table_of_unknown_action_results')}</p>"
                              },
                              "host": {
                                "connection": {
                                  "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                }
                              },
                              "method": "post",
                              "path": "/Incidents/Comment"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "greater": [
                              "@length(variables('action results'))",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "If_action_results_and_unknown_action_results": {
                      "actions": {
                        "Add_comment_to_incident_(V3)_-_known_and_unknown_action_results": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['object']?['id']",
                              "message": "<p>QUARANTINE ACTION RESULTS<br>\n@{body('Create_HTML_table_of_action_results')}<br>\n<br>\n@{body('Create_HTML_table_of_unknown_action_results')}</p>"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                          }
                        },
                        "Terminate_2": {
                          "runAfter": {
                            "Add_comment_to_incident_(V3)_-_known_and_unknown_action_results": [
                              "Succeeded"
                            ]
                          },
                          "type": "Terminate",
                          "inputs": {
                            "runStatus": "Succeeded"
                          }
                        }
                      },
                      "runAfter": {
                        "Create_HTML_table_of_unknown_action_results": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "greater": [
                              "@length(variables('action results'))",
                              0
                            ]
                          },
                          {
                            "greater": [
                              "@length(variables('unknown action results'))",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "If_macOS_endpoints": {
                      "actions": {
                        "Check_macOS_issued_action_result": {
                          "actions": {
                            "Append_macOS_issued_action_result_to_issued_actions": {
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "issued actions",
                                "value": "@body('Issue_macOS_action')?['data']"
                              }
                            }
                          },
                          "runAfter": {
                            "Issue_macOS_action": [
                              "Succeeded"
                            ]
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@body('Issue_macOS_action')",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Compose_macOS_action": {
                          "runAfter": {
                            "Compose_macOS_target_group": [
                              "Succeeded"
                            ]
                          },
                          "type": "Compose",
                          "inputs": {
                            "action_group": {
                              "id": "@variables('all computers id')"
                            },
                            "distribute_seconds": 0,
                            "expire_seconds": "@body('Parse_macOS_package_json')?['data']?['expire_seconds']",
                            "name": "Apply from Microsoft Sentinel @{variables('macos package name')}",
                            "package_spec": "@outputs('Compose_macOS_action_package_declaration')",
                            "target_group": "@outputs('Compose_macOS_target_group')"
                          }
                        },
                        "Compose_macOS_action_package_declaration": {
                          "runAfter": {
                            "Parse_macOS_package_json": [
                              "Succeeded"
                            ]
                          },
                          "type": "Compose",
                          "inputs": {
                            "expire_seconds": "@body('Parse_macOS_package_json')?['data']?['expire_seconds']",
                            "parameters": "@variables('package parameters')",
                            "source_id": "@body('Parse_macOS_package_json')?['data']?['id']"
                          }
                        },
                        "Compose_macOS_target_group": {
                          "runAfter": {
                            "Compose_macOS_action_package_declaration": [
                              "Succeeded"
                            ]
                          },
                          "type": "Compose",
                          "inputs": {
                            "and_flag": false,
                            "sub_groups": "@variables('macos endpoint filters')"
                          }
                        },
                        "Get_macOS_package": {
                          "type": "Http",
                          "inputs": {
                            "headers": {
                              "Content-Type": "application/json",
                              "session": "@parameters('TaniumApiToken')"
                            },
                            "method": "GET",
                            "uri": "@{concat(parameters('TaniumPackagesByNameUrlFragment'), join(split(variables('macos package name'), ' '), '%20'))}"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs"
                              ]
                            }
                          }
                        },
                        "Issue_macOS_action": {
                          "runAfter": {
                            "Compose_macOS_action": [
                              "Succeeded"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "body": "@outputs('Compose_macOS_action')",
                            "headers": {
                              "Content-Type": "application/json",
                              "session": "@parameters('TaniumApiToken')"
                            },
                            "method": "POST",
                            "uri": "@parameters('TaniumActionsApi')"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs"
                              ]
                            }
                          }
                        },
                        "Parse_macOS_package_json": {
                          "runAfter": {
                            "Get_macOS_package": [
                              "Succeeded"
                            ]
                          },
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@body('Get_macOS_package')",
                            "schema": {
                              "properties": {
                                "data": {
                                  "properties": {
                                    "available_time": {
                                      "type": "string"
                                    },
                                    "command": {
                                      "type": "string"
                                    },
                                    "command_timeout": {
                                      "type": "integer"
                                    },
                                    "content_set": {
                                      "properties": {
                                        "id": {
                                          "type": "integer"
                                        },
                                        "name": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "creation_time": {
                                      "type": "string"
                                    },
                                    "deleted_flag": {
                                      "type": "boolean"
                                    },
                                    "display_name": {
                                      "type": "string"
                                    },
                                    "expire_seconds": {
                                      "type": "integer"
                                    },
                                    "hidden_flag": {
                                      "type": "boolean"
                                    },
                                    "id": {
                                      "type": "integer"
                                    },
                                    "last_modified_by": {
                                      "type": "string"
                                    },
                                    "last_update": {
                                      "type": "string"
                                    },
                                    "mod_user": {
                                      "properties": {
                                        "display_name": {
                                          "type": "string"
                                        },
                                        "domain": {
                                          "type": "string"
                                        },
                                        "id": {
                                          "type": "integer"
                                        },
                                        "name": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "modification_time": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "parameter_definition": {
                                      "type": "string"
                                    },
                                    "process_group_flag": {
                                      "type": "boolean"
                                    },
                                    "skip_lock_flag": {
                                      "type": "boolean"
                                    },
                                    "source_hash": {
                                      "type": "string"
                                    },
                                    "source_id": {
                                      "type": "integer"
                                    },
                                    "verify_expire_seconds": {
                                      "type": "integer"
                                    },
                                    "verify_group": {
                                      "properties": {
                                        "id": {
                                          "type": "integer"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "verify_group_id": {
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "If_Windows_endpoints": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "greater": [
                              "@length(variables('macos endpoint filters'))",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Initialize_API_Gateway_Query": {
                      "runAfter": {
                        "Initialize_package_parameters": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api gateway query",
                            "type": "string",
                            "value": "query ($incidentHosts: EndpointFieldFilter, $endCursor: Cursor, $source: EndpointSource) {\n  endpoints(\n    source: $source\n    first: 10\n    after: $endCursor\n    filter: $incidentHosts\n  ) {\n    edges {\n      node {\n        name\n        ipAddress\n        os { platform }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}"
                          }
                        ]
                      }
                    },
                    "Initialize_API_Gateway_Query_Variables": {
                      "runAfter": {
                        "Initialize_Tanium_Endpoint_Source_to_TDS": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api gateway query variables",
                            "type": "string",
                            "value": "{\n  \"source\": @{variables('Tanium Endpoint Source')},\n  \"incidentHosts\": {\n    \"any\": true,\n    \"filters\": @{variables('endpoint filters')}\n  }\n}"
                          }
                        ]
                      }
                    },
                    "Initialize_API_Gateway_Response": {
                      "runAfter": {
                        "Query_API_Gateway": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "API Gateway Response",
                            "type": "object",
                            "value": "@body('Query_API_Gateway')"
                          }
                        ]
                      }
                    },
                    "Initialize_API_Gateway_query_cursor": {
                      "runAfter": {
                        "Parse_API_Gateway_response": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "cursor",
                            "type": "string",
                            "value": "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['endCursor']"
                          }
                        ]
                      }
                    },
                    "Initialize_Endpoint_Filters_array": {
                      "runAfter": {
                        "Initialize_API_Gateway_Query": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "endpoint filters",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Linux_endpoint_filters": {
                      "runAfter": {
                        "Initialize_Windows_endpoint_filters": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "linux endpoint filters",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Linux_package_name": {
                      "runAfter": {
                        "Initialize_MacOS_package_name": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "linux package name",
                            "type": "string",
                            "value": "Remove Linux IPTables Quarantine"
                          }
                        ]
                      }
                    },
                    "Initialize_MacOS_package_name": {
                      "runAfter": {
                        "Initialize_Windows_package_name": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "macos package name",
                            "type": "string",
                            "value": "Remove Mac PF Quarantine"
                          }
                        ]
                      }
                    },
                    "Initialize_Tanium_Endpoint_Source_to_TDS": {
                      "runAfter": {
                        "For_each_incident_host": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "tanium endpoint source",
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "Initialize_Windows_endpoint_filters": {
                      "runAfter": {
                        "Add_comment_to_incident_-_hosts_that_will_be_targeted": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "windows endpoint filters",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Windows_package_name": {
                      "runAfter": {
                        "Exit_early_if_no_hosts_are_found": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "windows package name",
                            "type": "string",
                            "value": "Remove Windows IPsec Quarantine"
                          }
                        ]
                      }
                    },
                    "Initialize_action_results": {
                      "runAfter": {
                        "Wait_for_the_max_expire_seconds_from_the_issued_actions": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "action results",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_all_computers_id": {
                      "runAfter": {
                        "Get_the_\"All_Computers\"_group": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "all computers id",
                            "type": "string",
                            "value": "@{body('Get_the_\"All_Computers\"_group')?['data']?['id']}"
                          }
                        ]
                      }
                    },
                    "Initialize_endpoints_array": {
                      "runAfter": {
                        "Initialize_API_Gateway_query_cursor": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "endpoints",
                            "type": "array",
                            "value": "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['edges']"
                          }
                        ]
                      }
                    },
                    "Initialize_issued_actions": {
                      "runAfter": {
                        "Initialize_macOS_endpoint_filters": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "issued actions",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_macOS_endpoint_filters": {
                      "runAfter": {
                        "Initialize_Linux_endpoint_filters": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "macos endpoint filters",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_package_parameters": {
                      "runAfter": {
                        "Initialize_Linux_package_name": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "package parameters",
                            "type": "array"
                          }
                        ]
                      },
                      "description": "The un-quarantine packages have no parameters"
                    },
                    "Initialize_unknown_action_results": {
                      "runAfter": {
                        "Initialize_issued_actions": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "unknown action results",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Paginate_API_Gateway_query_if_needed": {
                      "actions": {
                        "Until_there_are_no_more_pages_in_the_API_gateway_response": {
                          "actions": {
                            "For_each_endpoint_in_paginated_API_Gateway_response": {
                              "foreach": "@body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['edges']",
                              "actions": {
                                "Append_endpoint_to_endpoints": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "endpoints",
                                    "value": "@items('For_each_endpoint_in_paginated_API_Gateway_response')"
                                  }
                                }
                              },
                              "runAfter": {
                                "Update_API_Gateway_query_cursor": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Foreach",
                              "runtimeConfiguration": {
                                "concurrency": {
                                  "repetitions": 1
                                }
                              }
                            },
                            "Paginate_API_Gateway": {
                              "runAfter": {
                                "Update_API_Gateway_query_variables": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Http",
                              "inputs": {
                                "body": {
                                  "query": "@variables('api gateway query')",
                                  "variables": "@variables('api gateway query variables')"
                                },
                                "headers": {
                                  "Content-Type": "application/json",
                                  "session": "@parameters('TaniumApiToken')"
                                },
                                "method": "POST",
                                "uri": "@parameters('TaniumApiGatewayApi')"
                              },
                              "runtimeConfiguration": {
                                "secureData": {
                                  "properties": [
                                    "inputs"
                                  ]
                                }
                              }
                            },
                            "Parse_paginated_API_Gateway_response": {
                              "runAfter": {
                                "Paginate_API_Gateway": [
                                  "Succeeded"
                                ]
                              },
                              "type": "ParseJson",
                              "inputs": {
                                "content": "@body('Paginate_API_Gateway')",
                                "schema": {
                                  "properties": {
                                    "data": {
                                      "properties": {
                                        "endpoints": {
                                          "properties": {
                                            "edges": {
                                              "items": {
                                                "properties": {
                                                  "node": {
                                                    "type": "object"
                                                  }
                                                },
                                                "required": [
                                                  "node"
                                                ],
                                                "type": "object"
                                              },
                                              "type": "array"
                                            },
                                            "pageInfo": {
                                              "properties": {
                                                "endCursor": {
                                                  "type": "string"
                                                },
                                                "hasNextPage": {
                                                  "type": "boolean"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              }
                            },
                            "Update_API_Gateway_query_cursor": {
                              "runAfter": {
                                "Parse_paginated_API_Gateway_response": [
                                  "Succeeded"
                                ]
                              },
                              "type": "SetVariable",
                              "inputs": {
                                "name": "cursor",
                                "value": "@body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['endCursor']"
                              }
                            },
                            "Update_API_Gateway_query_variables": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "api gateway query variables",
                                "value": "{\n  \"source\": @{variables('tanium endpoint source')},\n  \"endCursor\": \"@{variables('cursor')}\"\n}"
                              }
                            }
                          },
                          "expression": "@equals(body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['hasNextPage'], false)",
                          "limit": {
                            "count": 60,
                            "timeout": "PT1H"
                          },
                          "type": "Until"
                        }
                      },
                      "runAfter": {
                        "Initialize_endpoints_array": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['hasNextPage']",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Parse_API_Gateway_response": {
                      "runAfter": {
                        "Switch_to_TS_from_TDS_if_needed": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@variables('API Gateway Response')",
                        "schema": {
                          "properties": {
                            "data": {
                              "properties": {
                                "endpoints": {
                                  "properties": {
                                    "edges": {
                                      "items": {
                                        "properties": {
                                          "node": {
                                            "type": "object"
                                          }
                                        },
                                        "required": [
                                          "node"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "pageInfo": {
                                      "properties": {
                                        "endCursor": {
                                          "type": "string"
                                        },
                                        "hasNextPage": {
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "errors": {
                              "items": {
                                "properties": {
                                  "message": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "message"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "Parse_endpoints_array": {
                      "runAfter": {
                        "Paginate_API_Gateway_query_if_needed": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@variables('endpoints')",
                        "schema": {
                          "type": "array"
                        }
                      },
                      "description": "We need an action's output to use in the JavaScript code since it can't read from a variable"
                    },
                    "Query_API_Gateway": {
                      "runAfter": {
                        "Initialize_API_Gateway_Query_Variables": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "body": {
                          "query": "@variables('api gateway query')",
                          "variables": "@variables('api gateway query variables')"
                        },
                        "headers": {
                          "Content-Type": "application/json",
                          "session": "@parameters('TaniumApiToken')"
                        },
                        "method": "POST",
                        "uri": "@parameters('TaniumApiGatewayApi')"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "inputs"
                          ]
                        }
                      }
                    },
                    "Select_expire_seconds": {
                      "runAfter": {
                        "Add_comment_to_incident_(V3)_2": [
                          "Succeeded"
                        ]
                      },
                      "type": "Select",
                      "inputs": {
                        "from": "@variables('issued actions')",
                        "select": "@int(item()?['expire_seconds'])"
                      }
                    },
                    "Switch_to_TS_from_TDS_if_needed": {
                      "actions": {
                        "Requery_the_API_Gateway": {
                          "runAfter": {
                            "Update_API_Query_variables_to_get_new_source": [
                              "Succeeded"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "body": {
                              "query": "@variables('api gateway query')",
                              "variables": "@variables('api gateway query variables')"
                            },
                            "headers": {
                              "Content-Type": "application/json",
                              "session": "@parameters('TaniumApiToken')"
                            },
                            "method": "POST",
                            "uri": "@parameters('TaniumApiGatewayApi')"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs"
                              ]
                            }
                          }
                        },
                        "Set_Tanium_Endpoint_Source_to_TS": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "tanium endpoint source",
                            "value": {
                              "ts": {
                                "stableWaitTime": 30
                              }
                            }
                          }
                        },
                        "Update_API_Gateway_Response": {
                          "runAfter": {
                            "Requery_the_API_Gateway": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "API Gateway Response",
                            "value": "@body('Requery_the_API_Gateway')"
                          }
                        },
                        "Update_API_Query_variables_to_get_new_source": {
                          "runAfter": {
                            "Set_Tanium_Endpoint_Source_to_TS": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "api gateway query variables",
                            "value": "{\n  \"source\": @{variables('Tanium Endpoint Source')},\n  \"incidentHosts\": {\n    \"any\": true,\n    \"filters\": @{variables('endpoint filters')}\n  }\n}"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_API_Gateway_Response": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "contains": [
                              "@string(body('Query_API_Gateway'))",
                              "must refer to an existing sensor"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Wait_for_the_max_expire_seconds_from_the_issued_actions": {
                      "runAfter": {
                        "Select_expire_seconds": [
                          "Succeeded"
                        ]
                      },
                      "type": "Wait",
                      "inputs": {
                        "interval": {
                          "count": "@max(body('Select_expire_seconds'))",
                          "unit": "Second"
                        }
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionName": "[[variables('AzureSentinelConnectionName')]",
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                        "id": "[[concat('/subscriptions/',subscription().subscriptionId, '/providers/Microsoft.Web/locations/',variables('workspace-location-inline'),'/managedApis/azuresentinel')]"
                      }
                    }
                  },
                  "TaniumApiToken": {
                    "value": "[[parameters('TaniumApiToken')]"
                  },
                  "TaniumActionsApi": {
                    "value": "[[variables('TaniumActionsApi')]"
                  },
                  "TaniumAllComputersUrl": {
                    "value": "[[variables('TaniumAllComputersUrl')]"
                  },
                  "TaniumPackagesByNameUrlFragment": {
                    "value": "[[variables('TaniumPackagesByNameUrlFragment')]"
                  },
                  "TaniumActionResultDataUrlFragment": {
                    "value": "[[variables('TaniumActionResultDataUrlFragment')]"
                  },
                  "TaniumApiGatewayApi": {
                    "value": "[[variables('TaniumApiGatewayApi')]"
                  }
                }
              },
              "tags": {
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId7'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId7')]",
                "contentId": "[variables('_playbookContentId7')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion7')]",
                "source": {
                  "kind": "Solution",
                  "name": "Tanium",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Tanium",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Tanium Inc.",
                  "email": "support@tanium.com",
                  "tier": "Partner",
                  "link": "https://support.tanium.com"
                }
              }
            }
          ],
          "metadata": {
            "title": "Tanium-UnquarantineHosts",
            "description": "This playbook starts with a Microsoft Sentinel incident, gets the hosts associated with that incident, then directs Tanium to un-quarantine those hosts. The status of the un-quarantine operation is commented on the Sentinel incident.",
            "prerequisites": [
              "1. Microsoft Sentinel incidents with associated hosts.",
              "2. A [Tanium API Token](https://docs.tanium.com/platform_user/platform_user/console_api_tokens.html) granting access to your Tanium environment: the query will be made with the user priviledges of that token.",
              "3. A hostname for your Tanium environment reachable from Logic Apps."
            ],
            "postDeploymentSteps": [
              "1. Ensure the Logic App API connection to Microsoft Sentinel is authenticated."
            ],
            "entities": [
              "host"
            ],
            "tags": [
              "Remediation"
            ],
            "lastUpdateTime": "2022-09-15T00:00:00Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/templateSpecs",
      "apiVersion": "2021-05-01",
      "name": "[variables('analyticRuleTemplateSpecName1')]",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-sentinelWorkspaceId": "[variables('workspaceResourceId')]",
        "hidden-sentinelContentType": "AnalyticsRule"
      },
      "properties": {
        "description": "Tanium Analytics Rule 1 with template",
        "displayName": "Tanium Analytics Rule template"
      }
    },
    {
      "type": "Microsoft.Resources/templateSpecs/versions",
      "apiVersion": "2021-05-01",
      "name": "[concat(variables('analyticRuleTemplateSpecName1'),'/',variables('analyticRuleVersion1'))]",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-sentinelWorkspaceId": "[variables('workspaceResourceId')]",
        "hidden-sentinelContentType": "AnalyticsRule"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/templateSpecs', variables('analyticRuleTemplateSpecName1'))]"
      ],
      "properties": {
        "description": "TaniumThreatResponseAlerts_AnalyticalRules Analytics Rule with template version 2.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('analyticRuleVersion1')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.SecurityInsights/AlertRuleTemplates",
              "name": "[variables('AnalyticRulecontentId1')]",
              "apiVersion": "2022-04-01-preview",
              "kind": "Scheduled",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "description": "Alerts from Tanium Threat Response (THR) that can be acted upon by Microsoft Sentinel Playbook",
                "displayName": "Tanium Threat Response Alerts",
                "enabled": false,
                "query": "let cap = (s:string) { strcat(toupper(substring(s,0,1)), substring(s,1))  };\nTaniumThreatResponse_CL\n| extend TaniumUrl = pack(\"computer_name\", Computer_Name_s, \"alert_guid\", Alert_Id_g, \"ip_address\", Computer_IP_s, \"platform\", Match_Details_finding_system_info_platform_s)\n| extend TaniumTHRLabel = strcat(cap(Intel_Type_s),\" - \", cap(Intel_Name_s), \" - \", cap(Match_Details_match_type_s))\n| where Computer_IP_s !contains \"N/A\"\n",
                "queryFrequency": "PT5M",
                "queryPeriod": "PT6M",
                "severity": "High",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "entityMappings": [
                  {
                    "fieldMappings": [
                      {
                        "columnName": "TaniumUrl",
                        "identifier": "Url"
                      }
                    ],
                    "entityType": "URL"
                  },
                  {
                    "fieldMappings": [
                      {
                        "columnName": "Computer_IP_s",
                        "identifier": "Address"
                      }
                    ],
                    "entityType": "IP"
                  },
                  {
                    "fieldMappings": [
                      {
                        "columnName": "Computer_Name_s",
                        "identifier": "HostName"
                      }
                    ],
                    "entityType": "Host"
                  },
                  {
                    "fieldMappings": [
                      {
                        "columnName": "TaniumTHRLabel",
                        "identifier": "Name"
                      }
                    ],
                    "entityType": "Malware"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split(variables('analyticRuleId1'),'/'))))]",
              "properties": {
                "description": "Tanium Analytics Rule 1",
                "parentId": "[variables('analyticRuleId1')]",
                "contentId": "[variables('_analyticRulecontentId1')]",
                "kind": "AnalyticsRule",
                "version": "[variables('analyticRuleVersion1')]",
                "source": {
                  "kind": "Solution",
                  "name": "Tanium",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Tanium",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Tanium Inc.",
                  "email": "support@tanium.com",
                  "tier": "Partner",
                  "link": "https://support.tanium.com"
                }
              }
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "version": "2.0.0",
        "kind": "Solution",
        "contentSchemaVersion": "2.0.0",
        "contentId": "[variables('_solutionId')]",
        "parentId": "[variables('_solutionId')]",
        "source": {
          "kind": "Solution",
          "name": "Tanium",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Tanium",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Tanium Inc.",
          "email": "support@tanium.com",
          "tier": "Partner",
          "link": "https://support.tanium.com"
        },
        "dependencies": {
          "operator": "AND",
          "criteria": [
            {
              "kind": "Workbook",
              "contentId": "[variables('_workbookContentId1')]",
              "version": "[variables('workbookVersion1')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_Tanium-ComplyFindings')]",
              "version": "[variables('playbookVersion1')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_Tanium-GeneralHostInfo')]",
              "version": "[variables('playbookVersion2')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_Tanium-MSDefenderHealth')]",
              "version": "[variables('playbookVersion3')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_Tanium-QuarantineHosts')]",
              "version": "[variables('playbookVersion4')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_Tanium-ResolveThreatResponseAlert')]",
              "version": "[variables('playbookVersion5')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_Tanium-SCCMClientHealth')]",
              "version": "[variables('playbookVersion6')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_Tanium-UnquarantineHosts')]",
              "version": "[variables('playbookVersion7')]"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('analyticRulecontentId1')]",
              "version": "[variables('analyticRuleVersion1')]"
            }
          ]
        },
        "firstPublishDate": "2022-05-16",
        "lastPublishDate": "2022-09-12",
        "providers": [
          "Tanium"
        ],
        "categories": {
          "domains": [
            "Security - Network",
            "Security - Threat Protection"
          ]
        }
      },
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('_solutionId'))]"
    }
  ],
  "outputs": {}
}
