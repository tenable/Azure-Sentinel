{
    "$schema":  "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion":  "1.0.0.0",
    "metadata":  {
        "title":  "Create Indicator - OpenCTI",
        "description":  "This playbook adds new indicator in OpenCTI based on the entities info present in Sentinel incident. This playbook search in OpenCTI for indicatoes based on the entities (Account, Host, IP, FileHash, URL) present in Microsoft Sentinel incident. If it presnts in OpenCTI, information will be added to incident comment otherwise it creates new indicator in OpenCTI",
        "prerequisites":  ["1. OpenCTI Custom Connector needs to be deployed prior to the deployment of this playbook under the same subscription.",
        "2. API key. To get API Key, login into your OpenCTI instance dashboard and navigate to User profile page --> API Access."],
        "postDeployment":  ["1. Once deployment is complete, you will need to authorize each connection.",
        "2. Navigate to playbook --> API Connections --> Select connections one by one --> Edit API Connection --> (if required) Enter API key or credentials --> Save"],
        "prerequisitesDeployTemplateFile":  "../../CustomConnector/OpenCTICustomConnector/azuredeploy.json",
        "lastUpdateTime":  "2022-07-19T00:00:00.000Z",
        "entities":  ["account","ip","filehash","url","host"],
        "tags":  ["Enrichment","Notification","ThreatIntelligence", "OpenCTI"
        ],
        "support":  {
            "tier":  "microsoft",
            "armtemplate":  "Generated from https://github.com/Azure/Azure-Sentinel/tree/master/Tools/Playbook-ARM-Template-Generator"
        },
        "author":  {
            "name":  "Microsoft"
        }
    },
    "parameters":  {
        "PlaybookName":  {
            "defaultValue":  "OpenCTI-CreateIndicator",
            "type":  "string",
         "metadata": {
          "description": "Name of the custom connector, if you want to change the default name, make sure to use the same in all OpenCTI automation playbooks as well"
        }           
        },
		"CustomConnectorName":  {
            "defaultValue":  "OpenCTICustomConnector",
            "type":  "string",
        "metadata": {
          "description": "Name of the custom connector, if you want to change the default name, make sure to use the same in all OpenCTI automation playbooks as well"
        }            
        },
		"OpenCTIOrganization":  {
            "defaultValue":  "Demo Organization",
            "type":  "string",
        "metadata": {
          "description": "If you already have Organization in OpenCTI created, you can provide the same name. This is used while adding indicator to OpenCTI, used to identify who contributed the indicator."
        }
        },
		"OpenCTILabel":  {
            "defaultValue":  "SentinelSOAR",
            "type":  "string",
        "metadata": {
          "description": "This is used to easily identify the indicators that are added to OpenCTI. This label is assigned to all the indicators that are created using Playbook"
        }
        },
		"OpenCTIMarking":  {
            "defaultValue":  "Copyrights to Demo Org",
            "type":  "string",
        "metadata": {
          "description": "Marking used while creating indicators in OpenCTI. If you already have marking, you can provide the same"
        }
        }                    
    },
    "variables":  {
        "OpencticustomconnectorConnectionName":  "[concat('OpenCTICustomConnector-', parameters('PlaybookName'))]",
        "MicrosoftSentinelConnectionName":  "[concat('MicrosoftSentinel-', parameters('PlaybookName'))]"
    },
    "resources":  [
        {
            "properties":  {
                "provisioningState":  "Succeeded",
                "state":  "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "Microsoft_Sentinel_incident": {
                            "type": "ApiConnectionWebhook",
                            "inputs": {
                                "body": {
                                    "callback_url": "@{listCallbackUrl()}"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "path": "/incident-creation"
                            }
                        }
                    },
                    "actions": {
                        "Add_comment_to_incident_(V3)": {
                            "runAfter": {
                                "For_each_Account_in_Entity": [
                                    "Succeeded",
                                    "TimedOut",
                                    "Skipped",
                                    "Failed"
                                ],
                                "For_each_FileHash_in_Entity": [
                                    "Succeeded",
                                    "TimedOut",
                                    "Skipped",
                                    "Failed"
                                ],
                                "For_each_Host_in_Entity": [
                                    "Succeeded",
                                    "TimedOut",
                                    "Skipped",
                                    "Failed"
                                ],
                                "For_each_IP_in_Entity": [
                                    "Succeeded",
                                    "TimedOut",
                                    "Skipped",
                                    "Failed"
                                ],
                                "For_each_URL_in_Entity": [
                                    "Succeeded",
                                    "TimedOut",
                                    "Skipped",
                                    "Failed"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": {
                                    "incidentArmId": "@triggerBody()?['object']?['id']",
                                    "message": "<p>@{variables('Incident_Comment')}</p>"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/Incidents/Comment"
                            }
                        },
                        "Condition_Check_if_Org_info_is_null": {
                            "actions": {
                                "Parse_JSON_OrgInfo": {
                                    "runAfter": {
                                        "Run_GraphQL_Query_Create_Org": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ParseJson",
                                    "inputs": {
                                        "content": "@body('Run_GraphQL_Query_Create_Org')",
                                        "schema": {
                                            "properties": {
                                                "data": {
                                                    "properties": {
                                                        "organizationAdd": {
                                                            "properties": {
                                                                "id": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "Run_GraphQL_Query_Create_Org": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "query": "mutation{\n  organizationAdd(input:{\n    name: \"@{variables('Organization')}\",\n    description:\"\"\n  }){\n    id\n  }\n}"
                                        },
                                        "headers": {
                                            "Content-Type": "application/json"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['OpenCTICustomConnector']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/graphql"
                                    }
                                },
                                "Set_variable": {
                                    "runAfter": {
                                        "Parse_JSON_OrgInfo": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "OrgIdfromOpenCTI",
                                        "value": "@body('Parse_JSON_OrgInfo')?['data']?['organizationAdd']?['id']"
                                    }
                                }
                            },
                            "runAfter": {
                                "Parse_JSON_Org_Info_Details": [
                                    "Succeeded"
                                ]
                            },
                            "else": {
                                "actions": {
                                    "For_each": {
                                        "foreach": "@body('Parse_JSON_2')?['data']?['organizations']?['edges']",
                                        "actions": {
                                            "Set_variable_2": {
                                                "runAfter": {},
                                                "type": "SetVariable",
                                                "inputs": {
                                                    "name": "OrgIdfromOpenCTI",
                                                    "value": "@items('For_each')?['node']?['id']"
                                                }
                                            }
                                        },
                                        "runAfter": {
                                            "Parse_JSON_2": [
                                                "Succeeded"
                                            ]
                                        },
                                        "type": "Foreach"
                                    },
                                    "Parse_JSON_2": {
                                        "runAfter": {},
                                        "type": "ParseJson",
                                        "inputs": {
                                            "content": "@body('Run_GraphQL_Query_for_Orginfo')",
                                            "schema": {
                                                "properties": {
                                                    "data": {
                                                        "properties": {
                                                            "organizations": {
                                                                "properties": {
                                                                    "edges": {
                                                                        "items": {
                                                                            "properties": {
                                                                                "node": {
                                                                                    "properties": {
                                                                                        "id": {
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "node"
                                                                            ],
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    }
                                }
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@empty(body('Parse_JSON_Org_Info_Details')?['data']?['organizations']?['edges'])",
                                            "@true"
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Condition_check_if_Labels_are_available_or_not": {
                            "actions": {
                                "Parse_JSON_Label_Info_new_label": {
                                    "runAfter": {
                                        "Run_GraphQL_Query_Create_new_label": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ParseJson",
                                    "inputs": {
                                        "content": "@body('Run_GraphQL_Query_Create_new_label')",
                                        "schema": {
                                            "properties": {
                                                "data": {
                                                    "properties": {
                                                        "labelAdd": {
                                                            "properties": {
                                                                "id": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "Run_GraphQL_Query_Create_new_label": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "query": "mutation{\n  labelAdd (input: {value: \"@{variables('OpenCTILabel')}\" color:\"RED\"}){\n    id\n    value\n  }\n}"
                                        },
                                        "headers": {
                                            "Content-Type": "application/json"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['OpenCTICustomConnector']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/graphql"
                                    }
                                },
                                "Set_variable_LabelIDfromOpenCTI": {
                                    "runAfter": {
                                        "Parse_JSON_Label_Info_new_label": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "LabelIdfromOpenCTI",
                                        "value": "@body('Parse_JSON_Label_Info_new_label')?['data']?['labelAdd']?['id']"
                                    }
                                }
                            },
                            "runAfter": {
                                "Parse_JSON_Labels_info": [
                                    "Succeeded"
                                ]
                            },
                            "else": {
                                "actions": {
                                    "For_each_2": {
                                        "foreach": "@body('Parse_JSON')",
                                        "actions": {
                                            "Set_variable_LabelID": {
                                                "runAfter": {},
                                                "type": "SetVariable",
                                                "inputs": {
                                                    "name": "LabelIdfromOpenCTI",
                                                    "value": "@items('For_each_2')?['node']?['id']"
                                                }
                                            }
                                        },
                                        "runAfter": {
                                            "Parse_JSON": [
                                                "Succeeded"
                                            ]
                                        },
                                        "type": "Foreach"
                                    },
                                    "Parse_JSON": {
                                        "runAfter": {},
                                        "type": "ParseJson",
                                        "inputs": {
                                            "content": "@body('Parse_JSON_Labels_info')?['data']?['labels']?['edges']",
                                            "schema": {
                                                "items": {
                                                    "properties": {
                                                        "node": {
                                                            "properties": {
                                                                "id": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "required": [
                                                        "node"
                                                    ],
                                                    "type": "object"
                                                },
                                                "type": "array"
                                            }
                                        }
                                    }
                                }
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@empty(body('Parse_JSON_Labels_info')?['data']?['labels']?['edges'])",
                                            "@true"
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Condition_if_Marking_info_already_present_or_not": {
                            "actions": {
                                "Parse_JSON_Marking_info_created": {
                                    "runAfter": {
                                        "Run_GraphQL_Query_Create_Marking_Info": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ParseJson",
                                    "inputs": {
                                        "content": "@body('Run_GraphQL_Query_Create_Marking_Info')",
                                        "schema": {
                                            "properties": {
                                                "data": {
                                                    "properties": {
                                                        "markingDefinitionAdd": {
                                                            "properties": {
                                                                "id": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "Run_GraphQL_Query_Create_Marking_Info": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "query": "mutation{\nmarkingDefinitionAdd(input:{definition:\"@{variables('OpenCTIMarking')}\" definition_type:\"Copyright\" x_opencti_order: 10} ){\n    id\n  }\n}"
                                        },
                                        "headers": {
                                            "Content-Type": "application/json"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['OpenCTICustomConnector']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/graphql"
                                    }
                                },
                                "Set_variable_MarkingId_OpenCTI": {
                                    "runAfter": {
                                        "Parse_JSON_Marking_info_created": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "MarkingIdfromOpenCTI",
                                        "value": "@body('Parse_JSON_Marking_info_created')?['data']?['markingDefinitionAdd']?['id']"
                                    }
                                }
                            },
                            "runAfter": {
                                "Parse_JSON_Marking_Info": [
                                    "Succeeded"
                                ]
                            },
                            "else": {
                                "actions": {
                                    "For_each_3": {
                                        "foreach": "@body('Parse_JSON_Marking_info_that_already_existed')",
                                        "actions": {
                                            "Set_variable_OpenCTI_Marking_ID_already_existed": {
                                                "runAfter": {},
                                                "type": "SetVariable",
                                                "inputs": {
                                                    "name": "MarkingIdfromOpenCTI",
                                                    "value": "@items('For_each_3')?['node']?['id']"
                                                }
                                            }
                                        },
                                        "runAfter": {
                                            "Parse_JSON_Marking_info_that_already_existed": [
                                                "Succeeded"
                                            ]
                                        },
                                        "type": "Foreach"
                                    },
                                    "Parse_JSON_Marking_info_that_already_existed": {
                                        "runAfter": {},
                                        "type": "ParseJson",
                                        "inputs": {
                                            "content": "@body('Parse_JSON_Marking_Info')?['data']?['markingDefinitions']?['edges']",
                                            "schema": {
                                                "items": {
                                                    "properties": {
                                                        "node": {
                                                            "properties": {
                                                                "definition": {
                                                                    "type": "string"
                                                                },
                                                                "entity_type": {
                                                                    "type": "string"
                                                                },
                                                                "id": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "required": [
                                                        "node"
                                                    ],
                                                    "type": "object"
                                                },
                                                "type": "array"
                                            }
                                        }
                                    }
                                }
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@empty(body('Parse_JSON_Marking_Info')?['data']?['markingDefinitions']?['edges'])",
                                            "@true"
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Entities_-_Get_Accounts": {
                            "runAfter": {
                                "Initialize_variable_-_Incident_Comment": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/entities/account"
                            }
                        },
                        "Entities_-_Get_FileHashes": {
                            "runAfter": {
                                "Initialize_variable_-_Incident_Comment": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/entities/filehash"
                            }
                        },
                        "Entities_-_Get_Hosts": {
                            "runAfter": {
                                "Initialize_variable_-_Incident_Comment": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/entities/host"
                            }
                        },
                        "Entities_-_Get_IPs": {
                            "runAfter": {
                                "Initialize_variable_-_Incident_Comment": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/entities/ip"
                            }
                        },
                        "Entities_-_Get_URLs": {
                            "runAfter": {
                                "Initialize_variable_-_Incident_Comment": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/entities/url"
                            }
                        },
                        "For_each_Account_in_Entity": {
                            "foreach": "@body('Entities_-_Get_Accounts')?['Accounts']",
                            "actions": {
                                "Condition_check_if_empty_indicator_info_-_Account": {
                                    "actions": {
                                        "Append_message_to_Comment_-_Accounts": {
                                            "runAfter": {
                                                "Compose_comment_message-_No_results_-_Accounts": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "AppendToStringVariable",
                                            "inputs": {
                                                "name": "Incident_Comment",
                                                "value": "@outputs('Compose_comment_message-_No_results_-_Accounts')"
                                            }
                                        },
                                        "Compose_comment_message-_No_results_-_Accounts": {
                                            "runAfter": {
                                                "Parse_JSON_Newly_created_Indicator_-_account": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Compose",
                                            "inputs": "\n<u>Account: @{items('For_each_Account_in_Entity')?['Name']} </u> \nNo match found from OpenCTI\nWe have created new indicator with ID: @{body('Parse_JSON_Newly_created_Indicator_-_account')?['data']?['indicatorAdd']?['id']}\n---------------------------------------------------------------------------------------"
                                        },
                                        "Parse_JSON_Newly_created_Indicator_-_account": {
                                            "runAfter": {
                                                "Run_GraphQL_Query_Create_Indicator_-_account": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ParseJson",
                                            "inputs": {
                                                "content": "@body('Run_GraphQL_Query_Create_Indicator_-_account')",
                                                "schema": {
                                                    "properties": {
                                                        "data": {
                                                            "properties": {
                                                                "indicatorAdd": {
                                                                    "properties": {
                                                                        "id": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            }
                                        },
                                        "Run_GraphQL_Query_Create_Indicator_-_account": {
                                            "runAfter": {},
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "body": {
                                                    "query": "mutation{\n  indicatorAdd(input: {\n    name: \"@{items('For_each_Account_in_Entity')?['Name']}\",\n    description: \"@{triggerBody()?['object']?['properties']?['description']}\",\n    indicator_types: \"Account\",\n    x_opencti_score:60,\n    confidence: 80,\n    createdBy: \"@{variables('OrgIdfromOpenCTI')}\",\n    objectMarking: \"@{variables('MarkingIdfromOpenCTI')}\",\n    objectLabel: \"@{variables('LabelIdfromOpenCTI')}\"\n    pattern_type: \"STIX\",\n    pattern: \"[user-account:value = '@{items('For_each_Account_in_Entity')?['Name']}']\",\n    valid_until:\"@{addDays(utcNow(),365)}\"\n  }) {\n    id\n  }\n}"
                                                },
                                                "headers": {
                                                    "Content-Type": "application/json"
                                                },
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['OpenCTICustomConnector']['connectionId']"
                                                    }
                                                },
                                                "method": "post",
                                                "path": "/graphql"
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Parse_JSON_OpenCTI_response_on_Indicators_-_Account": [
                                            "Succeeded"
                                        ]
                                    },
                                    "else": {
                                        "actions": {
                                            "For_each_indictor_info_on_Account": {
                                                "foreach": "@body('Parse_JSON_OpenCTI_response_on_Indicators_-_Account')?['data']?['indicators']?['edges']",
                                                "actions": {
                                                    "Append_indicator_info_to_comment_string_-_accounts": {
                                                        "runAfter": {
                                                            "Compose_Comment_message_-_Results_-_Accounts": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "AppendToStringVariable",
                                                        "inputs": {
                                                            "name": "Incident_Comment",
                                                            "value": "@outputs('Compose_Comment_message_-_Results_-_Accounts')"
                                                        }
                                                    },
                                                    "Compose_Comment_message_-_Results_-_Accounts": {
                                                        "runAfter": {},
                                                        "type": "Compose",
                                                        "inputs": "\nFound below information from OpenCTI for @{items('For_each_Account_in_Entity')?['Name']} (Account)\n---------------------------------------------------------------------------------------\nIndicator Name: @{items('For_each_indictor_info_on_Account')?['node']?['name']}\nIndicator Type: @{items('For_each_indictor_info_on_Account')?['node']?['indicator_types']}\nOpenCTI Scope: @{items('For_each_indictor_info_on_Account')?['node']?['x_opencti_score']}\nEntity Type: @{items('For_each_indictor_info_on_Account')?['node']?['entity_type']}\nDescription: @{items('For_each_indictor_info_on_Account')?['node']?['description']}\nCreated By: @{items('For_each_indictor_info_on_Account')?['node']?['createdBy']}\n---------------------------------------------------------------------------------------"
                                                    }
                                                },
                                                "runAfter": {},
                                                "type": "Foreach"
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@string(body('Parse_JSON_OpenCTI_response_on_Indicators_-_Account')?['data']?['indicators']?['edges'])",
                                                    "@variables('empty_result_accounts')"
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Parse_JSON_OpenCTI_response_on_Indicators_-_Account": {
                                    "runAfter": {
                                        "Run_GraphQL_Query_to_get_indicator_info_-_Accounts": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ParseJson",
                                    "inputs": {
                                        "content": "@body('Run_GraphQL_Query_to_get_indicator_info_-_Accounts')",
                                        "schema": {
                                            "properties": {
                                                "data": {
                                                    "properties": {
                                                        "indicators": {
                                                            "properties": {
                                                                "edges": {
                                                                    "items": {
                                                                        "properties": {
                                                                            "node": {
                                                                                "properties": {
                                                                                    "createdBy": {},
                                                                                    "description": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "entity_type": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "indicator_types": {
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "type": "array"
                                                                                    },
                                                                                    "name": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "x_opencti_score": {
                                                                                        "type": "integer"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "node"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "Run_GraphQL_Query_to_get_indicator_info_-_Accounts": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "query": "query{\n  indicators(filters: {filterMode: and key:name  values: \"@{items('For_each_Account_in_Entity')?['Name']}\" operator:\"eq\" })\n{\n    edges {\n      node {\n        name\n        entity_type\n        indicator_types\n        createdBy {\n          name\n          creator {\n            user_email\n            name\n            firstname\n            lastname\n          }\n          observedData {\n            edges {\n              node {\n                name\n                id\n                modified\n                number_observed\n              }\n            }\n          }\n          x_opencti_aliases\n          confidence\n          connectors {\n            name\n          }\n        }\n        description\n        x_opencti_score\n      }\n    }\n  }\n}"
                                        },
                                        "headers": {
                                            "Content-Type": "application/json"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['OpenCTICustomConnector']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/graphql"
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_variable_to_indicate_empty_result_sting_-_Accounts": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "For_each_FileHash_in_Entity": {
                            "foreach": "@body('Entities_-_Get_FileHashes')?['Filehashes']",
                            "actions": {
                                "Condition_check_if_empty_indicator_info_-_FileHash": {
                                    "actions": {
                                        "Append_message_to_Comment_-_FileHash": {
                                            "runAfter": {
                                                "Compose_comment_message-_No_results_-_FileHash": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "AppendToStringVariable",
                                            "inputs": {
                                                "name": "Incident_Comment",
                                                "value": "@outputs('Compose_comment_message-_No_results_-_FileHash')"
                                            }
                                        },
                                        "Compose_comment_message-_No_results_-_FileHash": {
                                            "runAfter": {
                                                "Parse_JSON_Newly_created_Indicator_-_FileHash": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Compose",
                                            "inputs": "\n<u><b>File Hash:  @{items('For_each_FileHash_in_Entity')?['Value']} </b> </u>\nNo match found from OpenCTI \nWe have created new indicator with ID  @{body('Parse_JSON_Newly_created_Indicator_-_FileHash')?['data']?['indicatorAdd']?['id']}\n---------------------------------------------------------------------------------------"
                                        },
                                        "Parse_JSON_Newly_created_Indicator_-_FileHash": {
                                            "runAfter": {
                                                "Run_GraphQL_Query_Create_Indicator_-_FileHash": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ParseJson",
                                            "inputs": {
                                                "content": "@body('Run_GraphQL_Query_Create_Indicator_-_FileHash')",
                                                "schema": {
                                                    "properties": {
                                                        "data": {
                                                            "properties": {
                                                                "indicatorAdd": {
                                                                    "properties": {
                                                                        "id": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            }
                                        },
                                        "Run_GraphQL_Query_Create_Indicator_-_FileHash": {
                                            "runAfter": {},
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "body": {
                                                    "query": "mutation{\n  indicatorAdd(input: {\n    name: \"@{items('For_each_FileHash_in_Entity')?['Value']}\",\n    description: \"@{triggerBody()?['object']?['properties']?['description']}\",\n    indicator_types: \"File-MD5\",\n    x_opencti_score:60,\n    confidence: 80,\n    createdBy: \"@{variables('OrgIdfromOpenCTI')}\",\n    objectMarking: \"@{variables('MarkingIdfromOpenCTI')}\",\n    objectLabel: \"@{variables('LabelIdfromOpenCTI')}\"\n    pattern_type: \"STIX\",\n    pattern: \"[file:hashes = '@{items('For_each_FileHash_in_Entity')?['Value']}']\",\n    valid_until:\"@{addDays(utcNow(),365)}\"\n  }) {\n    id\n  }\n}"
                                                },
                                                "headers": {
                                                    "Content-Type": "application/json"
                                                },
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['OpenCTICustomConnector']['connectionId']"
                                                    }
                                                },
                                                "method": "post",
                                                "path": "/graphql"
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Parse_JSON_OpenCTI_response_on_Indicators_-_FileHash": [
                                            "Succeeded"
                                        ]
                                    },
                                    "else": {
                                        "actions": {
                                            "For_each_indictor_info_on_FileHash": {
                                                "foreach": "@body('Parse_JSON_OpenCTI_response_on_Indicators_-_FileHash')?['data']?['indicators']?['edges']",
                                                "actions": {
                                                    "Append_indicator_info_to_comment_string_-_FileHash": {
                                                        "runAfter": {
                                                            "Compose_Comment_message_-_Results_-_FileHash": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "AppendToStringVariable",
                                                        "inputs": {
                                                            "name": "Incident_Comment",
                                                            "value": "@outputs('Compose_Comment_message_-_Results_-_FileHash')"
                                                        }
                                                    },
                                                    "Compose_Comment_message_-_Results_-_FileHash": {
                                                        "runAfter": {},
                                                        "type": "Compose",
                                                        "inputs": "\nFound below information from OpenCTI for @{items('For_each_FileHash_in_Entity')?['Value']} (File Hash)\n---------------------------------------------------------------------------------------\nIndicator Name: @{items('For_each_indictor_info_on_FileHash')?['node']?['name']}\nIndicator Type: @{items('For_each_indictor_info_on_FileHash')?['node']?['indicator_types']}\nOpenCTI Scope: @{items('For_each_indictor_info_on_FileHash')?['node']?['x_opencti_score']}\nEntity Type: @{items('For_each_indictor_info_on_FileHash')?['node']?['entity_type']}\nDescription: @{items('For_each_indictor_info_on_FileHash')?['node']?['description']}\nCreated By: @{items('For_each_indictor_info_on_FileHash')?['node']?['createdBy']}\n---------------------------------------------------------------------------------------"
                                                    }
                                                },
                                                "runAfter": {},
                                                "type": "Foreach"
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@string(body('Parse_JSON_OpenCTI_response_on_Indicators_-_FileHash')?['data']?['indicators']?['edges'])",
                                                    "@variables('empty_result_hash')"
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Parse_JSON_OpenCTI_response_on_Indicators_-_FileHash": {
                                    "runAfter": {
                                        "Run_GraphQL_Query_to_get_indicator_info_-_FileHash": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ParseJson",
                                    "inputs": {
                                        "content": "@body('Run_GraphQL_Query_to_get_indicator_info_-_FileHash')",
                                        "schema": {
                                            "properties": {
                                                "data": {
                                                    "properties": {
                                                        "indicators": {
                                                            "properties": {
                                                                "edges": {
                                                                    "items": {
                                                                        "properties": {
                                                                            "node": {
                                                                                "properties": {
                                                                                    "createdBy": {},
                                                                                    "description": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "entity_type": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "indicator_types": {
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "type": "array"
                                                                                    },
                                                                                    "name": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "x_opencti_score": {
                                                                                        "type": "integer"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "node"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "Run_GraphQL_Query_to_get_indicator_info_-_FileHash": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "query": "query{\n  indicators(filters: {filterMode: and key:name  values: \"@{items('For_each_FileHash_in_Entity')?['Value']}\" operator:\"eq\" })\n{\n    edges {\n      node {\n        name\n        entity_type\n        indicator_types\n        createdBy {\n          name\n          creator {\n            user_email\n            name\n            firstname\n            lastname\n          }\n          observedData {\n            edges {\n              node {\n                name\n                id\n                modified\n                number_observed\n              }\n            }\n          }\n          x_opencti_aliases\n          confidence\n          connectors {\n            name\n          }\n        }\n        description\n        x_opencti_score\n      }\n    }\n  }\n}"
                                        },
                                        "headers": {
                                            "Content-Type": "application/json"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['OpenCTICustomConnector']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/graphql"
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_variable_to_indicate_empty_result_sting_-_FileHash": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "For_each_Host_in_Entity": {
                            "foreach": "@body('Entities_-_Get_Hosts')?['Hosts']",
                            "actions": {
                                "Condition_check_if_empty_indicator_info_-_Host": {
                                    "actions": {
                                        "Append_message_to_Comment_-_Host": {
                                            "runAfter": {
                                                "Compose_comment_message-_No_results_-_Host": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "AppendToStringVariable",
                                            "inputs": {
                                                "name": "Incident_Comment",
                                                "value": "@outputs('Compose_comment_message-_No_results_-_Host')"
                                            }
                                        },
                                        "Compose_comment_message-_No_results_-_Host": {
                                            "runAfter": {
                                                "Parse_JSON_Newly_created_Indicator_-_Host": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Compose",
                                            "inputs": "\n<u><b>Host Name:   @{items('For_each_Host_in_Entity')?['HostName']}</b> </u>\nNo match found from OpenCTI\nWe have created new indicator with ID @{body('Parse_JSON_Newly_created_Indicator_-_Host')?['data']?['indicatorAdd']?['id']}\n---------------------------------------------------------------------------------------"
                                        },
                                        "Parse_JSON_Newly_created_Indicator_-_Host": {
                                            "runAfter": {
                                                "Run_GraphQL_Query_Create_Indicator_-_Host": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ParseJson",
                                            "inputs": {
                                                "content": "@body('Run_GraphQL_Query_Create_Indicator_-_Host')",
                                                "schema": {
                                                    "properties": {
                                                        "data": {
                                                            "properties": {
                                                                "indicatorAdd": {
                                                                    "properties": {
                                                                        "id": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            }
                                        },
                                        "Run_GraphQL_Query_Create_Indicator_-_Host": {
                                            "runAfter": {},
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "body": {
                                                    "query": "mutation{\n  indicatorAdd(input: {\n    name: \"@{items('For_each_Host_in_Entity')?['HostName']}\",\n    description: \"@{triggerBody()?['object']?['properties']?['description']}\",\n    indicator_types: \"Host\",\n    x_opencti_score:60,\n    confidence: 80,\n    createdBy: \"@{variables('OrgIdfromOpenCTI')}\",\n    objectMarking: \"@{variables('MarkingIdfromOpenCTI')}\",\n    objectLabel: \"@{variables('LabelIdfromOpenCTI')}\"\n    pattern_type: \"STIX\",\n    pattern: \"[host-name:value = '@{items('For_each_Host_in_Entity')?['HostName']}']\",\n    valid_until:\"@{addDays(utcNow(),365)}\"\n  }) {\n    id\n  }\n}"
                                                },
                                                "headers": {
                                                    "Content-Type": "application/json"
                                                },
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['OpenCTICustomConnector']['connectionId']"
                                                    }
                                                },
                                                "method": "post",
                                                "path": "/graphql"
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Parse_JSON_OpenCTI_response_on_Indicators_-_Host": [
                                            "Succeeded"
                                        ]
                                    },
                                    "else": {
                                        "actions": {
                                            "For_each_indictor_info_on_Host": {
                                                "foreach": "@body('Parse_JSON_OpenCTI_response_on_Indicators_-_Host')?['data']?['indicators']?['edges']",
                                                "actions": {
                                                    "Append_indicator_info_to_comment_string_-_Host": {
                                                        "runAfter": {
                                                            "Compose_Comment_message_-_Results_-_Host": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "AppendToStringVariable",
                                                        "inputs": {
                                                            "name": "Incident_Comment",
                                                            "value": "@outputs('Compose_Comment_message_-_Results_-_Host')"
                                                        }
                                                    },
                                                    "Compose_Comment_message_-_Results_-_Host": {
                                                        "runAfter": {},
                                                        "type": "Compose",
                                                        "inputs": "\nFound below information from OpenCTI for @{items('For_each_Host_in_Entity')?['HostName']} (Host)\n---------------------------------------------------------------------------------------\nFound from OpenCTI for @{items('For_each_Host_in_Entity')?['HostName']}\nIndicator Name: @{items('For_each_indictor_info_on_Host')?['node']?['name']}\nIndicator Type: @{items('For_each_indictor_info_on_Host')?['node']?['indicator_types']}\nOpenCTI Scope: @{items('For_each_indictor_info_on_Host')?['node']?['x_opencti_score']}\nEntity Type: @{items('For_each_indictor_info_on_Host')?['node']?['entity_type']}\nDescription: @{items('For_each_indictor_info_on_Host')?['node']?['description']}\nCreated By: @{items('For_each_indictor_info_on_Host')?['node']?['createdBy']}\n---------------------------------------------------------------------------------------"
                                                    }
                                                },
                                                "runAfter": {},
                                                "type": "Foreach"
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@string(body('Parse_JSON_OpenCTI_response_on_Indicators_-_Host')?['data']?['indicators']?['edges'])",
                                                    "@variables('empty_result')"
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Parse_JSON_OpenCTI_response_on_Indicators_-_Host": {
                                    "runAfter": {
                                        "Run_GraphQL_Query_to_get_indicator_info_-_Host": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ParseJson",
                                    "inputs": {
                                        "content": "@body('Run_GraphQL_Query_to_get_indicator_info_-_Host')",
                                        "schema": {
                                            "properties": {
                                                "data": {
                                                    "properties": {
                                                        "indicators": {
                                                            "properties": {
                                                                "edges": {
                                                                    "items": {
                                                                        "properties": {
                                                                            "node": {
                                                                                "properties": {
                                                                                    "createdBy": {},
                                                                                    "description": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "entity_type": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "indicator_types": {
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "type": "array"
                                                                                    },
                                                                                    "name": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "x_opencti_score": {
                                                                                        "type": "integer"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "node"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "Run_GraphQL_Query_to_get_indicator_info_-_Host": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "query": "query{\n  indicators(filters: {filterMode: and key:name  values: \"@{items('For_each_Host_in_Entity')?['HostName']}\" operator:\"eq\" })\n{\n    edges {\n      node {\n        name\n        entity_type\n        indicator_types\n        createdBy {\n          name\n          creator {\n            user_email\n            name\n            firstname\n            lastname\n          }\n          observedData {\n            edges {\n              node {\n                name\n                id\n                modified\n                number_observed\n              }\n            }\n          }\n          x_opencti_aliases\n          confidence\n          connectors {\n            name\n          }\n        }\n        description\n        x_opencti_score\n      }\n    }\n  }\n}"
                                        },
                                        "headers": {
                                            "Content-Type": "application/json"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['OpenCTICustomConnector']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/graphql"
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_variable_to_indicate_empty_result_sting_-_Hosts": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "For_each_IP_in_Entity": {
                            "foreach": "@body('Entities_-_Get_IPs')?['IPs']",
                            "actions": {
                                "Condition_check_if_empty_indicator_info_-_IP": {
                                    "actions": {
                                        "Append_message_to_Comment_-_IP": {
                                            "runAfter": {
                                                "Compose_comment_message-_No_results_-_IP": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "AppendToStringVariable",
                                            "inputs": {
                                                "name": "Incident_Comment",
                                                "value": "@{outputs('Compose_comment_message-_No_results_-_IP')}\n"
                                            }
                                        },
                                        "Compose_comment_message-_No_results_-_IP": {
                                            "runAfter": {
                                                "Parse_JSON_Newly_created_Indicator_-_IP": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Compose",
                                            "inputs": "\n<u><b>IP Address:   @{items('For_each_IP_in_Entity')?['Address']}</b> </u> \nNo match found from OpenCTI\nWe have created new indicator with ID @{body('Parse_JSON_Newly_created_Indicator_-_IP')?['data']?['indicatorAdd']?['id']}\n---------------------------------------------------------------------------------------"
                                        },
                                        "Parse_JSON_Newly_created_Indicator_-_IP": {
                                            "runAfter": {
                                                "Run_GraphQL_Query_Create_Indicator_-_IP": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ParseJson",
                                            "inputs": {
                                                "content": "@body('Run_GraphQL_Query_Create_Indicator_-_IP')",
                                                "schema": {
                                                    "properties": {
                                                        "data": {
                                                            "properties": {
                                                                "indicatorAdd": {
                                                                    "properties": {
                                                                        "id": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            }
                                        },
                                        "Run_GraphQL_Query_Create_Indicator_-_IP": {
                                            "runAfter": {},
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "body": {
                                                    "query": "mutation{\n  indicatorAdd(input: {\n    name: \"@{items('For_each_IP_in_Entity')?['Address']}\",\n    description: \"@{triggerBody()?['object']?['properties']?['description']}\",\n    indicator_types: \"IP\",\n    x_opencti_score:60,\n    confidence: 80,\n    createdBy: \"@{variables('OrgIdfromOpenCTI')}\",\n    objectMarking: \"@{variables('MarkingIdfromOpenCTI')}\",\n    objectLabel: \"@{variables('LabelIdfromOpenCTI')}\"\n    pattern_type: \"STIX\",\n    pattern: \"[ipv4-addr:value = '@{items('For_each_IP_in_Entity')?['Address']}']\",\n    valid_until:\"@{addDays(utcNow(),365)}\"\n  }) {\n    id\n  }\n}"
                                                },
                                                "headers": {
                                                    "Content-Type": "application/json"
                                                },
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['OpenCTICustomConnector']['connectionId']"
                                                    }
                                                },
                                                "method": "post",
                                                "path": "/graphql"
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Parse_JSON_OpenCTI_response_on_Indicators_-_IP": [
                                            "Succeeded"
                                        ]
                                    },
                                    "else": {
                                        "actions": {
                                            "For_each_indictor_info_on_IP": {
                                                "foreach": "@body('Parse_JSON_OpenCTI_response_on_Indicators_-_IP')?['data']?['indicators']?['edges']",
                                                "actions": {
                                                    "Append_indicator_info_to_comment_string_-_IP": {
                                                        "runAfter": {
                                                            "Compose_Comment_message_-_Results_-_IP": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "AppendToStringVariable",
                                                        "inputs": {
                                                            "name": "Incident_Comment",
                                                            "value": "@outputs('Compose_Comment_message_-_Results_-_IP')"
                                                        }
                                                    },
                                                    "Compose_Comment_message_-_Results_-_IP": {
                                                        "runAfter": {},
                                                        "type": "Compose",
                                                        "inputs": "\nFound below information from OpenCTI for @{items('For_each_IP_in_Entity')?['Address']} (IP Address)\n---------------------------------------------------------------------------------------\nFound from OpenCTI for @{items('For_each_IP_in_Entity')?['Address']}\nIndicator Name: @{items('For_each_indictor_info_on_IP')?['node']?['name']}\nIndicator Type: @{items('For_each_indictor_info_on_IP')?['node']?['indicator_types']}\nOpenCTI Scope: @{items('For_each_indictor_info_on_IP')?['node']?['x_opencti_score']}\nEntity Type: @{items('For_each_indictor_info_on_IP')?['node']?['entity_type']}\nDescription: @{items('For_each_indictor_info_on_IP')?['node']?['description']}\nCreated By: @{items('For_each_indictor_info_on_IP')?['node']?['createdBy']}\n---------------------------------------------------------------------------------------"
                                                    }
                                                },
                                                "runAfter": {},
                                                "type": "Foreach"
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@string(body('Parse_JSON_OpenCTI_response_on_Indicators_-_IP')?['data']?['indicators']?['edges'])",
                                                    "@variables('empty_result_ips')"
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Parse_JSON_OpenCTI_response_on_Indicators_-_IP": {
                                    "runAfter": {
                                        "Run_GraphQL_Query_to_get_indicator_info_-_IP": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ParseJson",
                                    "inputs": {
                                        "content": "@body('Run_GraphQL_Query_to_get_indicator_info_-_IP')",
                                        "schema": {
                                            "properties": {
                                                "data": {
                                                    "properties": {
                                                        "indicators": {
                                                            "properties": {
                                                                "edges": {
                                                                    "items": {
                                                                        "properties": {
                                                                            "node": {
                                                                                "properties": {
                                                                                    "createdBy": {},
                                                                                    "description": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "entity_type": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "indicator_types": {
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "type": "array"
                                                                                    },
                                                                                    "name": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "x_opencti_score": {
                                                                                        "type": "integer"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "node"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "Run_GraphQL_Query_to_get_indicator_info_-_IP": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "query": "query{\n  indicators(filters: {filterMode: and key:name  values: \"@{items('For_each_IP_in_Entity')?['Address']}\" operator:\"eq\" })\n{\n    edges {\n      node {\n        name\n        entity_type\n        indicator_types\n        createdBy {\n          name\n          creator {\n            user_email\n            name\n            firstname\n            lastname\n          }\n          observedData {\n            edges {\n              node {\n                name\n                id\n                modified\n                number_observed\n              }\n            }\n          }\n          x_opencti_aliases\n          confidence\n          connectors {\n            name\n          }\n        }\n        description\n        x_opencti_score\n      }\n    }\n  }\n}"
                                        },
                                        "headers": {
                                            "Content-Type": "application/json"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['OpenCTICustomConnector']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/graphql"
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_variable_to_indicate_empty_result_sting_-_IPs": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "For_each_URL_in_Entity": {
                            "foreach": "@body('Entities_-_Get_URLs')?['URLs']",
                            "actions": {
                                "Condition_check_if_empty_indicator_info_-_URLs": {
                                    "actions": {
                                        "Append_message_to_Comment_-_URL": {
                                            "runAfter": {
                                                "Compose_comment_message-_No_results_-_URLs": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "AppendToStringVariable",
                                            "inputs": {
                                                "name": "Incident_Comment",
                                                "value": "@{outputs('Compose_comment_message-_No_results_-_URLs')}\n"
                                            }
                                        },
                                        "Compose_comment_message-_No_results_-_URLs": {
                                            "runAfter": {
                                                "Parse_JSON_Newly_created_Indicator_-_URL": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Compose",
                                            "inputs": "\n<u><b>URL:   @{items('For_each_URL_in_Entity')?['Url']}</b> </u>\nNo match found from OpenCTI \nWe have created new indicator with ID  @{body('Parse_JSON_Newly_created_Indicator_-_URL')?['data']?['indicatorAdd']?['id']}\n---------------------------------------------------------------------------------------"
                                        },
                                        "Parse_JSON_Newly_created_Indicator_-_URL": {
                                            "runAfter": {
                                                "Run_GraphQL_Query_Create_Indicator_-_URL": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ParseJson",
                                            "inputs": {
                                                "content": "@body('Run_GraphQL_Query_Create_Indicator_-_URL')",
                                                "schema": {
                                                    "properties": {
                                                        "data": {
                                                            "properties": {
                                                                "indicatorAdd": {
                                                                    "properties": {
                                                                        "id": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            }
                                        },
                                        "Run_GraphQL_Query_Create_Indicator_-_URL": {
                                            "runAfter": {},
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "body": {
                                                    "query": "mutation{\n  indicatorAdd(input: {\n    name: \"@{items('For_each_URL_in_Entity')?['Url']}\",\n    description: \"@{triggerBody()?['object']?['properties']?['description']}\",\n    indicator_types: \"URL\",\n    x_opencti_score:60,\n    confidence: 80,\n    createdBy: \"@{variables('OrgIdfromOpenCTI')}\",\n    objectMarking: \"@{variables('MarkingIdfromOpenCTI')}\",\n    objectLabel: \"@{variables('LabelIdfromOpenCTI')}\"\n    pattern_type: \"STIX\",\n    pattern: \"[url:value = '@{items('For_each_URL_in_Entity')?['Url']}']\",\n    valid_until:\"@{addDays(utcNow(),365)}\"\n  }) {\n    id\n  }\n}"
                                                },
                                                "headers": {
                                                    "Content-Type": "application/json"
                                                },
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['OpenCTICustomConnector']['connectionId']"
                                                    }
                                                },
                                                "method": "post",
                                                "path": "/graphql"
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Parse_JSON_OpenCTI_response_on_Indicators_-_URLs": [
                                            "Succeeded"
                                        ]
                                    },
                                    "else": {
                                        "actions": {
                                            "For_each_indictor_info_on_URL": {
                                                "foreach": "@body('Parse_JSON_OpenCTI_response_on_Indicators_-_URLs')?['data']?['indicators']?['edges']",
                                                "actions": {
                                                    "Append_indicator_info_to_comment_string_-_URL": {
                                                        "runAfter": {
                                                            "Compose_Comment_message_-_Results_-_URLs": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "AppendToStringVariable",
                                                        "inputs": {
                                                            "name": "Incident_Comment",
                                                            "value": "@outputs('Compose_Comment_message_-_Results_-_URLs')"
                                                        }
                                                    },
                                                    "Compose_Comment_message_-_Results_-_URLs": {
                                                        "runAfter": {},
                                                        "type": "Compose",
                                                        "inputs": "\nFound below information from OpenCTI for @{items('For_each_URL_in_Entity')?['Url']} (URL)\n---------------------------------------------------------------------------------------\nFound from OpenCTI for @{items('For_each_URL_in_Entity')?['Url']}\nIndicator Name: @{items('For_each_indictor_info_on_URL')?['node']?['name']}\nIndicator Type: @{items('For_each_indictor_info_on_URL')?['node']?['indicator_types']}\nOpenCTI Scope: @{items('For_each_indictor_info_on_URL')?['node']?['x_opencti_score']}\nEntity Type: @{items('For_each_indictor_info_on_URL')?['node']?['entity_type']}\nDescription: @{items('For_each_indictor_info_on_URL')?['node']?['description']}\nCreated By: @{items('For_each_indictor_info_on_URL')?['node']?['createdBy']}\n---------------------------------------------------------------------------------------"
                                                    }
                                                },
                                                "runAfter": {},
                                                "type": "Foreach"
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@string(body('Parse_JSON_OpenCTI_response_on_Indicators_-_URLs')?['data']?['indicators']?['edges'])",
                                                    "@variables('empty_result_urls')"
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Parse_JSON_OpenCTI_response_on_Indicators_-_URLs": {
                                    "runAfter": {
                                        "Run_GraphQL_Query_to_get_indicator_info_-_URLs": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ParseJson",
                                    "inputs": {
                                        "content": "@body('Run_GraphQL_Query_to_get_indicator_info_-_URLs')",
                                        "schema": {
                                            "properties": {
                                                "data": {
                                                    "properties": {
                                                        "indicators": {
                                                            "properties": {
                                                                "edges": {
                                                                    "items": {
                                                                        "properties": {
                                                                            "node": {
                                                                                "properties": {
                                                                                    "createdBy": {},
                                                                                    "description": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "entity_type": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "indicator_types": {
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "type": "array"
                                                                                    },
                                                                                    "name": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "x_opencti_score": {
                                                                                        "type": "integer"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "node"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "Run_GraphQL_Query_to_get_indicator_info_-_URLs": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "query": "query{\n  indicators(filters: {filterMode: and key:name  values: \"@{items('For_each_URL_in_Entity')?['Url']}\" operator:\"eq\" })\n{\n    edges {\n      node {\n        name\n        entity_type\n        indicator_types\n        createdBy {\n          name\n          creator {\n            user_email\n            name\n            firstname\n            lastname\n          }\n          observedData {\n            edges {\n              node {\n                name\n                id\n                modified\n                number_observed\n              }\n            }\n          }\n          x_opencti_aliases\n          confidence\n          connectors {\n            name\n          }\n        }\n        description\n        x_opencti_score\n      }\n    }\n  }\n}"
                                        },
                                        "headers": {
                                            "Content-Type": "application/json"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['OpenCTICustomConnector']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/graphql"
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_variable_to_indicate_empty_result_sting_-_URLs": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "Initialize_variable_-_Incident_Comment": {
                            "runAfter": {
                                "Condition_if_Marking_info_already_present_or_not": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "Incident_Comment",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_LabelIdOpenCTI": {
                            "runAfter": {
                                "Initialize_variable_Lable": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "LabelIdfromOpenCTI",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_Lable": {
                            "runAfter": {
                                "Initialize_variable_OrgIdfromOpenCTI": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "OpenCTILabel",
                                        "type": "string",
                                        "value": "[parameters('OpenCTILabel')]"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_Marking": {
                            "runAfter": {
                                "Initialize_variable_LabelIdOpenCTI": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "OpenCTIMarking",
                                        "type": "string",
                                        "value": "[parameters('OpenCTIMarking')]"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_MarkingIdfromOpenCTI": {
                            "runAfter": {
                                "Initialize_variable_Marking": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "MarkingIdfromOpenCTI",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_OrgIdfromOpenCTI": {
                            "runAfter": {
                                "Initialize_variable_Organization": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "OrgIdfromOpenCTI",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_Organization": {
                            "runAfter": {
                                "Parse_OpenCTI_response": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "Organization",
                                        "type": "string",
                                        "value": "[parameters('OpenCTIOrganization')]"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_to_indicate_empty_result_sting_-_Accounts": {
                            "runAfter": {
                                "Entities_-_Get_Accounts": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "empty_result_accounts",
                                        "type": "string",
                                        "value": "[[]"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_to_indicate_empty_result_sting_-_FileHash": {
                            "runAfter": {
                                "Entities_-_Get_FileHashes": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "empty_result_hash",
                                        "type": "string",
                                        "value": "[[]"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_to_indicate_empty_result_sting_-_Hosts": {
                            "runAfter": {
                                "Entities_-_Get_Hosts": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "empty_result",
                                        "type": "string",
                                        "value": "[[]"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_to_indicate_empty_result_sting_-_IPs": {
                            "runAfter": {
                                "Entities_-_Get_IPs": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "empty_result_ips",
                                        "type": "string",
                                        "value": "[[]"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_to_indicate_empty_result_sting_-_URLs": {
                            "runAfter": {
                                "Entities_-_Get_URLs": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "empty_result_urls",
                                        "type": "string",
                                        "value": "[[]"
                                    }
                                ]
                            }
                        },
                        "Parse_JSON_Labels_info": {
                            "runAfter": {
                                "Run_GraphQL_Query_Get_Label_info": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@body('Run_GraphQL_Query_Get_Label_info')",
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "properties": {
                                                "labels": {
                                                    "properties": {
                                                        "edges": {
                                                            "type": "array"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "Parse_JSON_Marking_Info": {
                            "runAfter": {
                                "Run_GraphQL_Get_Marking_info": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@body('Run_GraphQL_Get_Marking_info')",
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "properties": {
                                                "markingDefinitions": {
                                                    "properties": {
                                                        "edges": {
                                                            "type": "array"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "Parse_JSON_Org_Info_Details": {
                            "runAfter": {
                                "Run_GraphQL_Query_for_Orginfo": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@body('Run_GraphQL_Query_for_Orginfo')",
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "properties": {
                                                "organizations": {
                                                    "properties": {
                                                        "edges": {
                                                            "type": "array"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "Parse_OpenCTI_response": {
                            "runAfter": {
                                "Run_Sample_GraphQL_Query_to_check_Auth_": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@body('Run_Sample_GraphQL_Query_to_check_Auth_')",
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "properties": {
                                                "about": {
                                                    "properties": {
                                                        "memory": {
                                                            "properties": {
                                                                "heapTotal": {
                                                                    "type": "integer"
                                                                },
                                                                "heapUsed": {
                                                                    "type": "integer"
                                                                },
                                                                "rss": {
                                                                    "type": "integer"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "Run_GraphQL_Get_Marking_info": {
                            "runAfter": {
                                "Condition_check_if_Labels_are_available_or_not": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": {
                                    "query": "query{\n  markingDefinitions(first:1 filters: {filterMode:and key:definition values:\"@{variables('OpenCTIMarking')}\"} ){\n    edges{\n      node{\n        id\n        entity_type\n        definition\n      }\n    }\n  }\n}"
                                },
                                "headers": {
                                    "Content-Type": "application/json"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['OpenCTICustomConnector']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/graphql"
                            }
                        },
                        "Run_GraphQL_Query_Get_Label_info": {
                            "runAfter": {
                                "Condition_Check_if_Org_info_is_null": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": {
                                    "query": "query{\n  labels(first:1 filters:{filterMode:and key:value values:\"@{variables('OpenCTILabel')}\" }){\n    edges{\n      node{\n        id\n      }\n    }\n  }\n}"
                                },
                                "headers": {
                                    "Content-Type": "application/json"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['OpenCTICustomConnector']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/graphql"
                            }
                        },
                        "Run_GraphQL_Query_for_Orginfo": {
                            "runAfter": {
                                "Initialize_variable_MarkingIdfromOpenCTI": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": {
                                    "query": "query{\n  organizations(first: 1 filters: { filterMode:and key: name values:\"@{variables('Organization')}\" operator:\"eq\"}){\n    edges{\n      node{\n        id\n        name\n        creator { user_email}\n        createdBy {name}\n        created_at\n      }\n    }\n  }\n}"
                                },
                                "headers": {
                                    "Content-Type": "application/json"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['OpenCTICustomConnector']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/graphql"
                            }
                        },
                        "Run_Sample_GraphQL_Query_to_check_Auth_": {
                            "runAfter": {},
                            "type": "ApiConnection",
                            "inputs": {
                                "body": {
                                    "query": "query{\n  about{\n    memory{\n      rss\n      heapTotal\n      heapUsed\n    }\n  }\n}"
                                },
                                "headers": {
                                    "Content-Type": "application/json"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['OpenCTICustomConnector']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/graphql"
                            }
                        },
                        "Terminate_in_case_of_JSON_Parse_Failed": {
                            "runAfter": {
                                "Parse_OpenCTI_response": [
                                    "Failed"
                                ]
                            },
                            "type": "Terminate",
                            "inputs": {
                                "runError": {
                                    "code": "FAIL",
                                    "message": "@{body('Run_Sample_GraphQL_Query_to_check_Auth_')}"
                                },
                                "runStatus": "Failed"
                            },
                            "description": "This step is to FAIL the workflow and stop in case of any Auth failures or issues while querying"
                        }
                    },
                    "outputs": {}
                },
                "parameters":  {
                    "$connections":  {
                        "value":  {
                            "OpenCTICustomConnector":  {
                                "connectionId":  "[resourceId('Microsoft.Web/connections', variables('OpencticustomconnectorConnectionName'))]",
                                "connectionName":  "[variables('OpencticustomconnectorConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/customApis/', parameters('CustomConnectorName'))]"
                            },
                            "azuresentinel":  {
                                "connectionId":  "[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                                "connectionName":  "[variables('MicrosoftSentinelConnectionName')]",
                                "id":  "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Azuresentinel')]",
                                "connectionProperties":  {
                                    "authentication":  {
                                        "type":  "ManagedServiceIdentity"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "name":  "[parameters('PlaybookName')]",
            "type":  "Microsoft.Logic/workflows",
            "location":  "[resourceGroup().location]",
            "tags":  {
                "hidden-SentinelTemplateName":  "OpenCTI-CreateIndicator",
                "hidden-SentinelTemplateVersion":  "1.0"
            },
            "identity":  {
                "type":  "SystemAssigned"
            },
            "apiVersion":  "2017-07-01",
            "dependsOn":  [
                "[resourceId('Microsoft.Web/connections', variables('OpencticustomconnectorConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]"
            ]
        },
        {
            "type":  "Microsoft.Web/connections",
            "apiVersion":  "2016-06-01",
            "name":  "[variables('OpencticustomconnectorConnectionName')]",
            "location":  "[resourceGroup().location]",
            "kind":  "V1",
            "properties":  {
                "displayName":  "[variables('OpencticustomconnectorConnectionName')]",
                "customParameterValues":  {
                },
                "api":  {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/customApis/', parameters('CustomConnectorName'))]"
                }
            }
        },
        {
            "type":  "Microsoft.Web/connections",
            "apiVersion":  "2016-06-01",
            "name":  "[variables('MicrosoftSentinelConnectionName')]",
            "location":  "[resourceGroup().location]",
            "kind":  "V1",
            "properties":  {
                "displayName":  "[variables('MicrosoftSentinelConnectionName')]",
                "customParameterValues":  {
                },
                "parameterValueType":  "Alternative",
                "api":  {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]"
                }
            }
        }
    ]
}