id: 28b42356-45af-40a6-a0b4-a554cdfd5d8a
name: Brute force attack against Azure Portal
description: |
  'Identifies evidence of brute force activity against Azure Portal by highlighting multiple authentication failures 
  and by a successful authentication within a given time window. 
  Default Failure count is 10 and default Time Window is 20 minutes.
  References: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes.'
severity: Medium
requiredDataConnectors:
  - connectorId: AzureActiveDirectory
    dataTypes:
      - SigninLogs
  - connectorId: AzureActiveDirectory
    dataTypes:
      - AADNonInteractiveUserSignInLogs
queryFrequency: 1d
queryPeriod: 1d
triggerOperator: gt
triggerThreshold: 0
status: Available
tactics:
  - CredentialAccess
relevantTechniques:
  - T1110
query: |
 let timeRange = 24h;
 let failureCountThreshold = 10;
 let authenticationWindow = 20m;
 let aadFunc = (tableName:string){
  table(tableName)
 | where AppDisplayName has "Azure Portal"
 | extend
      DeviceDetail = todynamic(DeviceDetail),
      //Status = todynamic(Status),
      LocationDetails = todynamic(LocationDetails)
 | extend
      OS = tostring(DeviceDetail.operatingSystem),
      Browser = tostring(DeviceDetail.browser),
      //StatusCode = tostring(Status.errorCode),
      //StatusDetails = tostring(Status.additionalDetails),
      State = tostring(LocationDetails.state),
      City = tostring(LocationDetails.city),
      Region = tostring(LocationDetails.countryOrRegion)
 // Split out failure versus non-failure types
 | extend FailureOrSuccess = iff(ResultType in ("0", "50125", "50140", "70043", "70044"), "Success", "Failure")  
 // sort for sessionizing - by UserPrincipalName and time of the authentication outcome
 | sort by UserPrincipalName asc, TimeGenerated asc
 // sessionize into failure groupings until either the account changes or there is a success
 | extend SessionStartedUtc = row_window_session(TimeGenerated, timeRange, authenticationWindow, UserPrincipalName != prev(UserPrincipalName) or prev(FailureOrSuccess) == "Success")
 // bin outcomes based on authenticationWindow
 | summarize FailureOrSuccessCount = count() by  FailureOrSuccess, UserId, UserDisplayName, AppDisplayName, IPAddress, Browser, OS, State, City, Region, Type, CorrelationId, bin(TimeGenerated, authenticationWindow), ResultType, UserPrincipalName,SessionStartedUtc
 // count the failures in each session
 | summarize FailureCountBeforeSuccess=sumif(FailureOrSuccessCount, FailureOrSuccess == "Failure"), StartTime=min(TimeGenerated), EndTime=max(TimeGenerated), makelist(FailureOrSuccess), IPAddress = make_set(IPAddress), make_set(Browser), make_set(City), make_set(State), make_set(Region), make_set(ResultType) by SessionStartedUtc, UserPrincipalName, CorrelationId, AppDisplayName, UserId, Type
 // the session must not start with a success, and must end with one
 | where array_index_of(list_FailureOrSuccess, "Success") != 0
 | where array_index_of(list_FailureOrSuccess, "Success") == array_length(list_FailureOrSuccess) - 1
 | project-away SessionStartedUtc, list_FailureOrSuccess
 // where the number of failures before the success is above the threshold 
 | where FailureCountBeforeSuccess >= failureCountThreshold 
 // expand out ip for entity assignment
 | mv-expand IPAddress
 | extend IPAddress = tostring(IPAddress)
 | extend timestamp = StartTime, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress 
 };
  let aadSignin = aadFunc("SigninLogs");
  let aadNonInt = aadFunc("AADNonInteractiveUserSignInLogs");
  union isfuzzy=true aadSignin, aadNonInt
entityMappings:
  - entityType: Account
    fieldMappings:
      - identifier: FullName
        columnName: AccountCustomEntity
  - entityType: IP
    fieldMappings:
      - identifier: Address
        columnName: IPCustomEntity
version: 2.1.0
kind: Scheduled
