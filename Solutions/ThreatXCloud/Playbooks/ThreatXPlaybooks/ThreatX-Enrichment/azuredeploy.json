{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
        "title": "Fetch Threat Intel from ThreatX",
        "description": "This playbook provides/updates the threat intel and essential details in comments section of triggered incident so that SOC analysts can directly take corrective measure to stop the attack",
        "prerequisites": [
            "1. ThreatX-WAF Custom Connector needs to be deployed prior to the deployment of this playbook under the same subscription.",
            "2. API Key . To get API Key, login into your ThreatX cloud instance dashboard and navigate to Settings --> API Key --> Add Api key",
	    "3. [Important step]Store the API secret key in Key vault and provide the key name of the stored secret during deployment"
        ],
        "postDeployment": [
            "1. During deployment you need to provide your tenant name ,Key vault name and key name of stored secret key."
        ],
        "prerequisitesDeployTemplateFile": "../../CustomConnector/ThreatXCustomConnector/azuredeploy.json",
        "lastUpdateTime": "2022-09-15T00:00:00.000Z",
        "entities": [ "ip" ],
        "tags": [ "Enrichment", "Notification", "ThreatIntelligence", "ThreatX", "WAF" ],
        "support": {
            "tier": "microsoft",
            "armtemplate": "Generated from https://github.com/Azure/Azure-Sentinel/tree/master/Tools/Playbook-ARM-Template-Generator"
        },
        "author": {
            "name": "microsoft"
        }
    },
    "parameters": {
        "PlaybookName": {
            "defaultValue": "ThreatX-Enrichment",
            "type": "string"
        },
        "customer name": {
            "type": "string",
            "metadata": {
                "description": "Enter value for Tenant Name"
            }
        },
		"Keyvault name": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "Enter the key vault name where secret key is stored"
            }
        },
		"Threatx Key name": {
            "defaultValue": "",
            "type": "string",
            "metadata": {
                "description": "Your Key name for the api secret stored in keyvault under secrets"
            }
        },
		"CustomConnectorName": {
            "defaultValue": "ThreatX-WAFCustomConnector",
            "type": "string",
            "metadata": {
                "description": "Name of the custom connector, if you want to change the default name, make sure to use the same in all ThreatXCloud automation playbooks as well"
            }
        }
    },
    "variables": {
        "Threatx-WafcustomconnectorConnectionName": "[concat('Threatx-Wafcustomconnector-', parameters('PlaybookName'))]",
        "MicrosoftSentinelConnectionName": "[concat('MicrosoftSentinel-', parameters('PlaybookName'))]",
        "KeyvaultConnectionName": "[concat('Keyvault-', parameters('PlaybookName'))]"
    },
    "resources": [
        {
            "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        },
                        "customer_name": {
                            "type": "string",
                            "defaultValue": "[parameters('customer name')]"
                        },
						"Threatx_Key_name": {
                            "type": "string",
                            "defaultValue": "[parameters('Threatx Key name')]"
                        }						
                    },
                    "triggers": {
                        "Microsoft_Sentinel_incident": {
                            "type": "ApiConnectionWebhook",
                            "inputs": {
                                "body": {
                                    "callback_url": "@{listCallbackUrl()}"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "path": "/incident-creation"
                            }
                        }
                    },
                    "actions": {
                        "Condition_2": {
                            "actions": {
                                "Add_comment_to_incident_(V3)_2": {
                                    "runAfter": {
                                        "Create_HTML_table": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "incidentArmId": "@triggerBody()?['object']?['id']",
                                            "message": "<p>@{body('Create_HTML_table')}</p>"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/Incidents/Comment"
                                    }
                                },
                                "Create_HTML_table": {
                                    "runAfter": {
                                        "For_each": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Table",
                                    "inputs": {
                                        "format": "HTML",
                                        "from": "@variables('result_entities')"
                                    }
                                },
                                "Event_Logs": {
                                    "runAfter": {
                                        "Login_Generate_Token": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "command": "match_events",
                                            "customer_name": "@parameters('customer_name')",
                                            "ip_addresses": "@variables('enrichip')",
                                            "limit": 100,
                                            "token": "@body('Login_Generate_Token')?['Ok']?['token']"
                                        },
                                        "headers": {
                                            "Content-Type": "application/json"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['ThreatX-WAFCustomConnector']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/tx_api/v2/logs"
                                    }
                                },
                                "For_each": {
                                    "foreach": "@body('Parse_JSON')?['Ok']?['data']",
                                    "actions": {
                                        "For_each_2": {
                                            "foreach": "@items('For_each')['rules']",
                                            "actions": {
                                                "Append_to_array_variable_2": {
                                                    "runAfter": {},
                                                    "type": "AppendToArrayVariable",
                                                    "inputs": {
                                                        "name": "result_entities",
                                                        "value": {
                                                            "Source_ip": "@items('For_each')?['ip']",
                                                            "blocking": "@items('For_each_2')?['blocking']",
                                                            "content_type": "@items('For_each')?['content_type']",
                                                            "contrib_score": "@items('For_each_2')?['contrib_score']",
                                                            "cookie": "@items('For_each')?['cookie']",
                                                            "dest_host": "@items('For_each')?['dst_host']",
                                                            "js_fingerprint": "@items('For_each')?['js_fingerprint']",
                                                            "postblock_event": "@items('For_each')?['postblock_event']",
                                                            "request_method": "@items('For_each')?['request_method']",
                                                            "risk": "@items('For_each')?['risk']",
                                                            "rule_classification": "@items('For_each_2')?['classification']",
                                                            "rule_description": "@items('For_each_2')?['description']",
                                                            "rule_state": "@items('For_each_2')?['state']",
                                                            "ssl": "@items('For_each')?['ssl']",
                                                            "status_code": "@items('For_each')?['status_code']",
                                                            "timestamp": "@items('For_each')?['timestamp']",
                                                            "tls_fingerprint": "@items('For_each')?['tls_fingerprint']",
                                                            "uri": "@items('For_each')?['uri']",
                                                            "user_agent": "@items('For_each')?['user_agent']"
                                                        }
                                                    }
                                                }
                                            },
                                            "runAfter": {},
                                            "type": "Foreach"
                                        }
                                    },
                                    "runAfter": {
                                        "Parse_JSON": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Foreach"
                                },
                                "Login_Generate_Token": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "api_token": "@body('Get_secret')?['value']",
                                            "command": "login"
                                        },
                                        "headers": {
                                            "Content-Type": "application/json"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['ThreatX-WAFCustomConnector']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/tx_api/v1/login"
                                    }
                                },
                                "Parse_JSON": {
                                    "runAfter": {
                                        "Event_Logs": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ParseJson",
                                    "inputs": {
                                        "content": "@body('Event_Logs')",
                                        "schema": {
                                            "properties": {
                                                "Ok": {
                                                    "properties": {
                                                        "data": {
                                                            "items": {
                                                                "properties": {
                                                                    "args": {
                                                                        "type": "string"
                                                                    },
                                                                    "content_length": {
                                                                        "type": "integer"
                                                                    },
                                                                    "content_type": {},
                                                                    "cookie": {},
                                                                    "dst_host": {
                                                                        "type": "string"
                                                                    },
                                                                    "ip": {
                                                                        "type": "string"
                                                                    },
                                                                    "js_fingerprint": {
                                                                        "type": "string"
                                                                    },
                                                                    "postblock_event": {
                                                                        "type": "boolean"
                                                                    },
                                                                    "random_id": {
                                                                        "type": "string"
                                                                    },
                                                                    "request_id": {
                                                                        "type": "string"
                                                                    },
                                                                    "request_method": {
                                                                        "type": "string"
                                                                    },
                                                                    "risk": {
                                                                        "type": "integer"
                                                                    },
                                                                    "rules": {
                                                                        "items": {
                                                                            "properties": {
                                                                                "beta": {
                                                                                    "type": "boolean"
                                                                                },
                                                                                "blocking": {
                                                                                    "type": "boolean"
                                                                                },
                                                                                "classification": {
                                                                                    "type": "string"
                                                                                },
                                                                                "contrib_score": {
                                                                                    "type": "integer"
                                                                                },
                                                                                "description": {
                                                                                    "type": "string"
                                                                                },
                                                                                "id": {
                                                                                    "type": "integer"
                                                                                },
                                                                                "risk": {
                                                                                    "type": "integer"
                                                                                },
                                                                                "state": {
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "id",
                                                                                "description",
                                                                                "classification",
                                                                                "state",
                                                                                "contrib_score",
                                                                                "risk",
                                                                                "blocking",
                                                                                "beta"
                                                                            ],
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "ssl": {
                                                                        "type": "boolean"
                                                                    },
                                                                    "status_code": {
                                                                        "type": "integer"
                                                                    },
                                                                    "timestamp": {
                                                                        "type": "string"
                                                                    },
                                                                    "tls_fingerprint": {},
                                                                    "uri": {
                                                                        "type": "string"
                                                                    },
                                                                    "user_agent": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "timestamp",
                                                                    "request_id",
                                                                    "user_agent",
                                                                    "ip",
                                                                    "dst_host",
                                                                    "uri",
                                                                    "args",
                                                                    "status_code",
                                                                    "ssl",
                                                                    "risk",
                                                                    "request_method",
                                                                    "content_type",
                                                                    "content_length",
                                                                    "postblock_event",
                                                                    "random_id",
                                                                    "tls_fingerprint",
                                                                    "cookie",
                                                                    "js_fingerprint",
                                                                    "rules"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "is_complete": {
                                                            "type": "boolean"
                                                        },
                                                        "last_seen_key": {
                                                            "properties": {
                                                                "request_id": {
                                                                    "type": "string"
                                                                },
                                                                "timestamp": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                }
                            },
                            "runAfter": {
                                "Get_secret": [
                                    "Succeeded"
                                ]
                            },
                            "else": {
                                "actions": {
                                    "Add_comment_to_incident_(V3)": {
                                        "runAfter": {},
                                        "type": "ApiConnection",
                                        "inputs": {
                                            "body": {
                                                "incidentArmId": "@triggerBody()?['object']?['id']",
                                                "message": "<p>No IP's are provided for the enrichment from threat X</p>"
                                            },
                                            "host": {
                                                "connection": {
                                                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                }
                                            },
                                            "method": "post",
                                            "path": "/Incidents/Comment"
                                        }
                                    }
                                }
                            },
                            "expression": {
                                "and": [
                                    {
                                        "greater": [
                                            "@length(variables('enrichip'))",
                                            0
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "For_each_-_collecting_IP's_from_incident_response": {
                            "foreach": "@body('Parse_JSON_-_response_from_sentinel_incident')",
                            "actions": {
                                "Condition": {
                                    "actions": {
                                        "Append_to_array_variable": {
                                            "runAfter": {},
                                            "type": "AppendToArrayVariable",
                                            "inputs": {
                                                "name": "enrichip",
                                                "value": "@items('For_each_-_collecting_IP''s_from_incident_response')?['properties']?['address']"
                                            }
                                        }
                                    },
                                    "runAfter": {},
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@items('For_each_-_collecting_IP''s_from_incident_response')['kind']",
                                                    "Ip"
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                }
                            },
                            "runAfter": {
                                "Parse_JSON_-_response_from_sentinel_incident": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "Get_secret": {
                            "runAfter": {
                                "For_each_-_collecting_IP's_from_incident_response": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['keyvault']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/secrets/@{encodeURIComponent(parameters('Threatx_Key_name'))}/value"
                            }
                        },
                        "Initialize_variable_for_collecting_IP's_to_be_enriched": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "enrichip",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_for_storing_result_of_entities": {
                            "runAfter": {
                                "Initialize_variable_for_collecting_IP's_to_be_enriched": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "result_entities",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Parse_JSON_-_response_from_sentinel_incident": {
                            "runAfter": {
                                "Initialize_variable_for_storing_result_of_entities": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                                "schema": {
                                    "items": {
                                        "properties": {
                                            "kind": {
                                                "type": "string"
                                            },
                                            "properties": {
                                                "properties": {
                                                    "address": {
                                                        "type": "string"
                                                    },
                                                    "friendlyName": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": {
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "type",
                                            "kind",
                                            "properties"
                                        ],
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "ThreatX-WAFCustomConnector": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('Threatx-WafcustomconnectorConnectionName'))]",
                                "connectionName": "[variables('Threatx-WafcustomconnectorConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/customApis/', parameters('CustomConnectorName'))]"
                            },
                            "azuresentinel": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                                "connectionName": "[variables('MicrosoftSentinelConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Azuresentinel')]",
                                "connectionProperties": {
                                    "authentication": {
                                        "type": "ManagedServiceIdentity"
                                    }
                                }
                            },
                            "keyvault": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                                "connectionName": "[variables('KeyvaultConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Keyvault')]",
                                "connectionProperties": {
                                    "authentication": {
                                        "type": "ManagedServiceIdentity"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "name": "[parameters('PlaybookName')]",
            "type": "Microsoft.Logic/workflows",
            "location": "[resourceGroup().location]",
            "tags": {
                "hidden-SentinelTemplateName": "ThreatX-Enrichment",
                "hidden-SentinelTemplateVersion": "1.0"
            },
            "identity": {
                "type": "SystemAssigned"
            },
            "apiVersion": "2017-07-01",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('Threatx-WafcustomconnectorConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]"
            ]
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('Threatx-WafcustomconnectorConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('Threatx-WafcustomconnectorConnectionName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/customApis/', parameters('CustomConnectorName'))]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('MicrosoftSentinelConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('MicrosoftSentinelConnectionName')]",
                "customParameterValues": {},
                "parameterValueType": "Alternative",
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Azuresentinel')]"
                }
            }
        },
         {
            "type": "Microsoft.Web/Connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('KeyvaultConnectionName')]",
            "kind": "V1",
            "location": "[resourceGroup().location]",
            "properties": {
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/', 'keyvault')]",
                    "type": "Microsoft.Web/locations/managedApis"
                },
                "parameterValueType": "Alternative",
                "alternativeParameterValues": {
                    "vaultName": "[parameters('keyvault name')]"
                },
                "displayName": "[variables('KeyvaultConnectionName')]",
                "nonSecretParameterValues": {
                    "vaultName": "[parameters('keyvault name')]"
                }

            }
        }
    ]
}
