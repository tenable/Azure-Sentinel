{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
     "metadata": {
        "title": "AD4IoT-CVEAutoWorkflow", 
        "description": "The playbook automates the SOC workflow by automatically enriching incident comments with the CVEs of the involved devices based on Defender for IoT data. An automated triage is performed if the CVE is critical, and the asset owner is automatically notified by email.",
        "prerequisites": ["None"],
        "lastUpdateTime": "2022-08-29T00:00:00.000Z",
        "entities": [], 
        "tags": [], 
        "support": {
            "tier": "microsoft" 
        },
        "author": {
            "name": "Amit Cohen"
        },
        "releaseNotes": [
        {
            "version": "1.0.0",
            "title": "AD4IoT-CVEAutoWorkflow",
            "notes": [
                "Initial version"
            ]
        }
        ]
    },
    "parameters": {
        "PlaybookName": {
            "defaultValue": "AD4IoT-CVEAutoWorkflow",
            "type": "String"
	}
    },
    "variables": {
     		"AzureSentinelConnectionName": "[concat('azuresentinel-', parameters('PlaybookName'))]",
		"AzureMonitorLogsConnectionName": "[concat('azuremonitorlogs-', parameters('PlaybookName'))]",
		"Office365V1": "[concat('office365_1-', parameters('PlaybookName'))]",
		"AzureSentinel1": "[concat('azuresentinel_1-', parameters('PlaybookName'))]"
    },
    "resources": [
		 {
			"type": "Microsoft.Web/connections",
			"apiVersion": "2016-06-01",
			"name": "[variables('AzureSentinelConnectionName')]",
			"location": "[resourceGroup().location]",
			"properties": {
				"displayName": "[variables('AzureSentinelConnectionName')]",
               			"parameterValueType": "Alternative",
				"customParameterValues": {},
				"api": {
					"id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]"
				}
			}
		},
		{
			"type": "Microsoft.Web/connections",
			"apiVersion": "2016-06-01",
			"name": "[variables('AzureMonitorLogsConnectionName')]",
			"location": "[resourceGroup().location]",
			"properties": {
				"displayName": "[variables('AzureMonitorLogsConnectionName')]",
				"customParameterValues": {},
				"api": {
					"id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuremonitorlogs')]"
				}
			}
		},
		{
			"type": "Microsoft.Web/connections",
			"apiVersion": "2016-06-01",
			"name": "[variables('Office365V1')]",
			"location": "[resourceGroup().location]",
			"properties": {
				"displayName": "[variables('Office365V1')]",
				"customParameterValues": {},
				"api": {
					"id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/office365')]"
				}
			}
		},
		{
			"type": "Microsoft.Web/connections",
			"apiVersion": "2016-06-01",
			"name": "[variables('AzureSentinel1')]",
			"location": "[resourceGroup().location]",
			"properties": {
				"displayName": "[variables('AzureSentinel1')]",
				"customParameterValues": {},
				"api": {
					"id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]"
				}
			}
		},
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('PlaybookName')]",
            "location": "[resourceGroup().location]",
            "identity": {
                "type": "SystemAssigned"
            },
	    "dependsOn": [
				"[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
				"[resourceId('Microsoft.Web/connections', variables('AzureMonitorLogsConnectionName'))]",
				"[resourceId('Microsoft.Web/connections', variables('Office365V1'))]",
				"[resourceId('Microsoft.Web/connections', variables('AzureSentinel1'))]"
			],
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "Microsoft_Sentinel_incident": {
                            "type": "ApiConnectionWebhook",
                            "inputs": {
                                "body": {
                                    "callback_url": "@{listCallbackUrl()}"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "path": "/incident-creation"
                            }
                        }
                    },
                    "actions": {
                        "Entities_-_Get_IPs": {
                            "runAfter": {
                                "Initialize_ARG_variable": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel_1']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/entities/ip"
                            }
                        },
                        "For_each": {
                            "foreach": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                            "actions": {
                                "Condition": {
                                    "actions": {
                                        "For_each_alert": {
                                            "foreach": "@triggerBody()?['object']?['properties']?['Alerts']",
                                            "actions": {
                                                "HTTP": {
                                                    "runAfter": {
                                                        "Set_email_variable": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "Http",
                                                    "inputs": {
                                                        "authentication": {
                                                            "type": "ManagedServiceIdentity"
                                                        },
                                                        "body": {
                                                            "query": "iotsecurityresources  | where type==\"microsoft.iotsecurity/locations/devicegroups/vulnerabilities\" | extend DeviceID = tostring(properties.deviceId) | join  (iotsecurityresources | where type=='microsoft.iotsecurity/locations/devicegroups/devices' | extend DeviceName = tostring(properties.deviceName) | where DeviceName == \"@{body('Run_query_and_list_results')?['value']?[0]?['deviceName']}\"  and \"@{body('Run_query_and_list_results')?['value']?[0]?['sensorName']}\" contains tostring(properties.sensor.name) | project DeviceSiteName=tostring(properties.sensor.site), name, DeviceName) on $left.DeviceID == $right.name | project DeviceID, DeviceName, CVE=tostring(properties.vulnerabilityId), Severity=tostring(properties.severityScore),CVEDescription=tostring(properties.description)"
                                                        },
                                                        "method": "POST",
                                                        "uri": "@variables('ARGEndPoint')"
                                                    }
                                                },
                                                "Run_query_and_list_results": {
                                                    "runAfter": {},
                                                    "type": "ApiConnection",
                                                    "inputs": {
                                                        "body": "SecurityAlert | summarize arg_max(TimeGenerated, *) by SystemAlertId | where SystemAlertId == \"@{items('For_each_alert')?['properties']?['systemAlertId']}\" | mv-expand Entity=parse_json(Entities) | where isnotempty(\"@{body('Parse_JSON')?['deviceName']}\") and Entity.DeviceName ==\"@{body('Parse_JSON')?['deviceName']}\" | extend IoTowner = trim(@'^\\[\"|\"]$', tostring(Entity.Owners[0])) | extend deviceName = \"@{body('Parse_JSON')?['deviceName']}\" | extend sensorName = tostring(Entity.Sensor) | extend siteName = tostring(Entity.Site) | extend zoneName = tostring(Entity.Zone)",
                                                        "host": {
                                                            "connection": {
                                                                "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                                                            }
                                                        },
                                                        "method": "post",
                                                        "path": "/queryData",
                                                        "queries": {
                                                            "resourcegroups": "@triggerBody()?['workspaceInfo']?['ResourceGroupName']",
                                                            "resourcename": "@triggerBody()?['workspaceInfo']?['WorkspaceName']",
                                                            "resourcetype": "Log Analytics Workspace",
                                                            "subscriptions": "@triggerBody()?['workspaceInfo']?['SubscriptionId']",
                                                            "timerange": "Last 30 days"
                                                        }
                                                    }
                                                },
                                                "Set_email_variable": {
                                                    "runAfter": {
                                                        "Run_query_and_list_results": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                        "name": "Email",
                                                        "value": "@{body('Run_query_and_list_results')?['value']?[0]?['IoTowner']}"
                                                    }
                                                },
                                                "Validate_ARG_response_is_not_empty": {
                                                    "actions": {
                                                        "Finalize_Loop": {
                                                            "runAfter": {},
                                                            "type": "SetVariable",
                                                            "inputs": {
                                                                "name": "ContinueLoop",
                                                                "value": false
                                                            }
                                                        },
                                                        "For_each_CVE": {
                                                            "foreach": "@body('HTTP')?['data']",
                                                            "actions": {
                                                                "Add_comment_to_incident_(V3)": {
                                                                    "runAfter": {},
                                                                    "type": "ApiConnection",
                                                                    "inputs": {
                                                                        "body": {
                                                                            "incidentArmId": "@triggerBody()?['object']?['id']",
                                                                            "message": "<p><span style=\"font-size: 16px\"><strong>There are active CVEs on the device involved in this incident<br>\n</strong></span>Affected Device: @{items('For_each_CVE')['DeviceName']}<br>\nCVE Name: @{items('For_each_CVE')['CVE']}<br>\nCVE Description:@{items('For_each_CVE')['CVEDescription']}<br>\nCVE Severity:@{items('For_each_CVE')['Severity']}</p>"
                                                                        },
                                                                        "host": {
                                                                            "connection": {
                                                                                "name": "@parameters('$connections')['azuresentinel_1']['connectionId']"
                                                                            }
                                                                        },
                                                                        "method": "post",
                                                                        "path": "/Incidents/Comment"
                                                                    }
                                                                },
                                                                "If_CVE_is_Critical": {
                                                                    "actions": {
                                                                        "If_IoT_Owner_Email_is_valid": {
                                                                            "actions": {
                                                                                "Send_an_email_(V2)": {
                                                                                    "runAfter": {},
                                                                                    "type": "ApiConnection",
                                                                                    "inputs": {
                                                                                        "body": {
                                                                                            "Body": "<p><strong>In this incident, you have been identified as the device owner with the following specifics and </strong><span style=\"font-size: 18px\"><u><strong>Critical CVE</strong></u></span><span style=\"font-size: 14px\"><strong>:</strong></span><strong><br>\n</strong><br>\n<strong>Incident Details:</strong><br>\n<u>Incident Id</u>: @{body('Update_incident')?['properties']?['incidentNumber']}<br>\n<u>Incident Title:</u> &nbsp;@{triggerBody()?['object']?['properties']?['title']}<br>\n<u>Incident Description</u>: &nbsp;@{triggerBody()?['object']?['properties']?['description']}<br>\n<u>Incident Link</u>: <a href=\"@{body('Update_incident')?['properties']?['incidentUrl']}\">Click Here</a> <br>\n<br>\n<strong>Device Details:</strong><br>\n<u>Device Name:</u> &nbsp;&nbsp;@{body('Run_query_and_list_results')?['value']?[0]?['deviceName']}<br>\n<u>Location (Site | Zone)</u>: @{body('Run_query_and_list_results')?['value']?[0]?['siteName']} | @{body('Run_query_and_list_results')?['value']?[0]?['zoneName']}<br>\n<u>Sensor Name:</u> @{body('Run_query_and_list_results')?['value']?[0]?['sensorName']}<br>\n<br>\n<strong>CVE Details:</strong><br>\n<u>CVE Name:</u> @{items('For_each_CVE')['CVE']}<br>\n<u>CVE Description:</u>@{items('For_each_CVE')['CVEDescription']}<br>\n<u>CVE Severity:</u>@{items('For_each_CVE')['Severity']}<br>\n<br>\nThanks,<br>\nThe Microsoft Defender for IoT team.<br>\n@{variables('Email')}</p>",
                                                                                            "Importance": "Normal",
                                                                                            "Subject": "Action required: Validate an incident with critical CVE",
                                                                                            "To": "@{body('Run_query_and_list_results')?['value']?[0]?['IoTowner']}"
                                                                                        },
                                                                                        "host": {
                                                                                            "connection": {
                                                                                                "name": "@parameters('$connections')['office365_1']['connectionId']"
                                                                                            }
                                                                                        },
                                                                                        "method": "post",
                                                                                        "path": "/v2/Mail"
                                                                                    }
                                                                                }
                                                                            },
                                                                            "runAfter": {
                                                                                "Update_incident": [
                                                                                    "Succeeded"
                                                                                ]
                                                                            },
                                                                            "expression": {
                                                                                "and": [
                                                                                    {
                                                                                        "not": {
                                                                                            "equals": [
                                                                                                "@{body('Run_query_and_list_results')?['value']?[0]?['IoTowner']}",
                                                                                                ""
                                                                                            ]
                                                                                        }
                                                                                    }
                                                                                ]
                                                                            },
                                                                            "type": "If"
                                                                        },
                                                                        "Update_incident": {
                                                                            "runAfter": {},
                                                                            "type": "ApiConnection",
                                                                            "inputs": {
                                                                                "body": {
                                                                                    "incidentArmId": "@triggerBody()?['object']?['id']",
                                                                                    "severity": "High",
                                                                                    "status": "New",
                                                                                    "tagsToAdd": {
                                                                                        "TagsToAdd": [
                                                                                            {
                                                                                                "Tag": "AutoTriageCVE"
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                },
                                                                                "host": {
                                                                                    "connection": {
                                                                                        "name": "@parameters('$connections')['azuresentinel_1']['connectionId']"
                                                                                    }
                                                                                },
                                                                                "method": "put",
                                                                                "path": "/Incidents"
                                                                            }
                                                                        }
                                                                    },
                                                                    "runAfter": {
                                                                        "Add_comment_to_incident_(V3)": [
                                                                            "Succeeded"
                                                                        ]
                                                                    },
                                                                    "expression": {
                                                                        "and": [
                                                                            {
                                                                                "equals": [
                                                                                    "@items('For_each_CVE').Severity",
                                                                                    "Critical"
                                                                                ]
                                                                            }
                                                                        ]
                                                                    },
                                                                    "type": "If"
                                                                }
                                                            },
                                                            "runAfter": {
                                                                "Finalize_Loop": [
                                                                    "Succeeded"
                                                                ]
                                                            },
                                                            "type": "Foreach"
                                                        }
                                                    },
                                                    "runAfter": {
                                                        "HTTP": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "expression": {
                                                        "and": [
                                                            {
                                                                "not": {
                                                                    "equals": [
                                                                        "@body('HTTP')?['TotalRecords']",
                                                                        0
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "type": "If"
                                                }
                                            },
                                            "runAfter": {},
                                            "type": "Foreach"
                                        }
                                    },
                                    "runAfter": {
                                        "Parse_JSON": [
                                            "Succeeded"
                                        ]
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@variables('ContinueLoop')",
                                                    true
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Parse_JSON": {
                                    "runAfter": {},
                                    "type": "ParseJson",
                                    "inputs": {
                                        "content": "@{items('For_each')['properties']}",
                                        "schema": {
                                            "properties": {
                                                "additionalData": {
                                                    "properties": {
                                                        "DevicePageLink": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "deviceId": {
                                                    "type": "string"
                                                },
                                                "deviceName": {
                                                    "type": "string"
                                                },
                                                "deviceType": {
                                                    "type": "string"
                                                },
                                                "firmwareVersion": {
                                                    "type": "string"
                                                },
                                                "friendlyName": {
                                                    "type": "string"
                                                },
                                                "iotSecurityAgentId": {
                                                    "type": "string"
                                                },
                                                "model": {
                                                    "type": "string"
                                                },
                                                "operatingSystem": {
                                                    "type": "string"
                                                },
                                                "protocols": {
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "type": "array"
                                                },
                                                "source": {
                                                    "type": "string"
                                                },
                                                "vendor": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                }
                            },
                            "runAfter": {
                                "Entities_-_Get_IPs": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach",
                            "runtimeConfiguration": {
                                "concurrency": {
                                    "repetitions": 1
                                }
                            }
                        },
                        "Initialize_ARG_variable": {
                            "runAfter": {
                                "Initialize_Email_variable": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "ARGEndPoint",
                                        "type": "string",
                                        "value": "https://management.azure.com/providers/Microsoft.ResourceGraph/resources?api-version=2021-03-01"
                                    }
                                ]
                            }
                        },
                        "Initialize_ContinueLoop": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "ContinueLoop",
                                        "type": "boolean",
                                        "value": true
                                    }
                                ]
                            }
                        },
                        "Initialize_Email_variable": {
                            "runAfter": {
                                "Initialize_ContinueLoop": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "Email",
                                        "type": "string"
                                    }
                                ]
                            }
                        }
                    },
                    "outputs": {}
                },
 		"parameters": {
                    "$connections": {
                        "value": {
                            "azuremonitorlogs": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('AzureMonitorLogsConnectionName'))]",
                                "connectionName": "[variables('AzureMonitorLogsConnectionName')]",
				"id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuremonitorlogs')]"
                            },
                            "azuresentinel": {
				"connectionId": "[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
				"connectionName": "[variables('AzureSentinelConnectionName')]",
                                "connectionProperties": {
                                    "authentication": {
                                        "type": "ManagedServiceIdentity"
                                    }
                                },
				"id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]"
                            },
                            "azuresentinel_1": {
				"connectionId": "[resourceId('Microsoft.Web/connections', variables('AzureSentinel1'))]",
				"connectionName": "[variables('AzureSentinel1')]",
				"id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]"
                            },
                            "office365_1": {
                             	"connectionId": "[resourceId('Microsoft.Web/connections', variables('Office365V1'))]",
                              	"connectionName": "[variables('Office365V1')]",
                              	 "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/office365')]"
                            }
                        }
                    }
                }
            }
        }
    ]
}
