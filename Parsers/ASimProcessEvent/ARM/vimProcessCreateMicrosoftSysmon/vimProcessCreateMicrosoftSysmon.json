{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2017-03-15-preview",
      "name": "[parameters('Workspace')]",
      "location": "[parameters('WorkspaceRegion')]",
      "resources": [
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "vimProcessCreateMicrosoftSysmon",
          "dependsOn": [
            "[concat('Microsoft.OperationalInsights/workspaces/', parameters('Workspace'))]"
          ],
          "properties": {
            "etag": "*",
            "displayName": "Process Create Event ASIM parser for Sysmon",
            "category": "ASIM",
            "FunctionAlias": "vimProcessCreateMicrosoftSysmon",
            "query": "let parser = (\n    starttime:datetime=datetime(null),\n    endtime:datetime=datetime(null),\n    commandline_has_any:dynamic=dynamic([]),\n    commandline_has_all:dynamic=dynamic([]),\n    commandline_has_any_ip_prefix:dynamic=dynamic([]),\n    actingprocess_has_any:dynamic=dynamic([]),\n    targetprocess_has_any:dynamic=dynamic([]),\n    parentprocess_has_any:dynamic=dynamic([]),\n    targetusername_has:string='*',\n    dvcipaddr_has_any_prefix:dynamic=dynamic([]),\n    dvchostname_has_any:dynamic=dynamic([]),\n    eventtype:string='*',\n    disabled:bool=false\n  ) {\n  // this is the parser for sysmon from Event table\n      let parser_Event = (\n      starttime:datetime=datetime(null),\n      endtime:datetime=datetime(null),\n      commandline_has_any:dynamic=dynamic([]),\n      commandline_has_all:dynamic=dynamic([]),\n      commandline_has_any_ip_prefix:dynamic=dynamic([]),\n      actingprocess_has_any:dynamic=dynamic([]),\n      targetprocess_has_any:dynamic=dynamic([]),\n      parentprocess_has_any:dynamic=dynamic([]),\n      targetusername_has:string='*',\n      dvcipaddr_has_any_prefix:dynamic=dynamic([]),\n      dvchostname_has_any:dynamic=dynamic([]),\n      eventtype:string='*',\n      disabled:bool=false\n      ) {\n      Event \n          // pre-filtering\n      | where (isnull(starttime) or TimeGenerated >= starttime )\n          and (isnull(endtime) or TimeGenerated <= endtime )\n          and not (disabled)\n          and (eventtype=='*' or eventtype=='ProcessCreated')\n          and (Source == \"Microsoft-Windows-Sysmon\" and EventID==1)\n          and (array_length(dvcipaddr_has_any_prefix)==0)\n          and (array_length(commandline_has_all)==0 or EventData has_all (commandline_has_all)) \n          and (array_length(commandline_has_any)==0 or EventData has_any (commandline_has_any)) \n          and (array_length(commandline_has_any_ip_prefix)==0 or has_any_ipv4_prefix(EventData, commandline_has_any_ip_prefix) ) \n          and (array_length(actingprocess_has_any)==0 or EventData has_any (actingprocess_has_any)) \n          and (array_length(targetprocess_has_any)==0 or EventData has_any (targetprocess_has_any)) \n          and (array_length(parentprocess_has_any)==0)\n          and (targetusername_has=='*' or EventData has targetusername_has)  \n          and (array_length(dvchostname_has_any)==0 or Computer has_any (dvchostname_has_any))  \n      // -- \n      | parse-kv EventData as (\n              ProcessGuid:string, \n              ProcessId:string,\n              Image:string,\n              FileVersion:string,\n              Description:string,\n              Product:string,\n              Company:string,\n              OriginalFileName:string,\n              CommandLine:string,\n              CurrentDirectory:string,\n              User:string,\n              LogonGuid:string, \n              LogonId:string,\n              IntegrityLevel:string,\n              Hashes:string,\n              ParentProcessGuid:string, \n              ParentProcessId:string,\n              ParentImage:string,\n              ParentCommandLine:string,\n              ParentUser:string\n          ) \n          with (regex=@'<Data Name=\"(\\w+)\">{?([^>]*)}?</Data>')\n          // -- post-filtering\n          | where (array_length(commandline_has_any)==0 or CommandLine has_any (commandline_has_any)) \n              and (array_length(commandline_has_all)==0 or CommandLine has_all (commandline_has_all)) \n              and (array_length(commandline_has_any_ip_prefix)==0 or has_any_ipv4_prefix(CommandLine, commandline_has_any_ip_prefix) ) \n              and (array_length(actingprocess_has_any)==0 or ParentImage has_any (actingprocess_has_any)) \n              and (targetusername_has=='*' or User has targetusername_has) \n              and (array_length(targetprocess_has_any)==0 or Image has_any (targetprocess_has_any))\n          // --\n          | parse-kv Hashes as (MD5:string, SHA1:string, SHA256:string, IMPHASH:string) with (quote='\"')\n          | extend\n              Hash = coalesce (SHA256, SHA1, IMPHASH, MD5, \"\")\n          | extend\n              HashType = tostring(dynamic([\"SHA256\", \"SHA1\", \"IMPHASH\", \"MD5\"])[array_index_of(pack_array(SHA256, SHA1, IMPHASH, MD5),Hash)])\n          | project-rename\n              TargetProcessMD5 = MD5,\n              TargetProcessSHA1 = SHA1,\n              TargetProcessSHA256 = SHA256,\n              TargetProcessIMPHASH = IMPHASH\n          | project-away Hashes\n          | extend         \n              TargetUsername = User,\n              TargetProcessCommandLine = CommandLine\n          | project-rename \n              DvcHostname = Computer,\n              TargetUserSessionGuid = LogonGuid,\n              TargetProcessId = ProcessId,\n              TargetUserSessionId = LogonId,  \n              TargetProcessGuid = ProcessGuid,\n              TargetProcessName = Image,\n              TargetProcessFilename = OriginalFileName,\n              TargetProcessCurrentDirectory = CurrentDirectory,\n              TargetProcessIntegrityLevel = IntegrityLevel,    \n              TargetProcessFileCompany = Company,\n              TargetProcessFileDescription = Description,\n              TargetProcessFileVersion = FileVersion,\n              TargetProcessFileProduct = Product,   \n              ActingProcessId = ParentProcessId,\n              ActingProcessGuid = ParentProcessGuid,                          \n              ActingProcessCommandLine = ParentCommandLine,\n              ActingProcessName = ParentImage,\n              ActorUsername = ParentUser\n          | extend \n              TargetUsernameType = iff(isnotempty(TargetUsername),'Windows', ''),\n              ActorUsernameType = iff(isnotempty(ActorUsername),'Windows', ''),\n              EventProduct = \"Sysmon\",\n              // aliases\n              Process = TargetProcessName,\n              Dvc = DvcHostname\n          | project-away EventData, ParameterXml, AzureDeploymentID, EventCategory, EventID, EventLevel, EventLevelName, TenantId, EventLog, MG, ManagementGroupName, Message, Role, SourceSystem, Source, UserName, RenderedDescription\n    };\n  // this is the parser for sysmon from WindowsEvent table\n      let parser_WindowsEvent=(\n      starttime:datetime=datetime(null),\n      endtime:datetime=datetime(null),\n      commandline_has_any:dynamic=dynamic([]),\n      commandline_has_all:dynamic=dynamic([]),\n      commandline_has_any_ip_prefix:dynamic=dynamic([]),\n      actingprocess_has_any:dynamic=dynamic([]),\n      targetprocess_has_any:dynamic=dynamic([]),\n      parentprocess_has_any:dynamic=dynamic([]),\n      targetusername_has:string='*',\n      dvcipaddr_has_any_prefix:dynamic=dynamic([]),\n      dvchostname_has_any:dynamic=dynamic([]),\n      eventtype:string='*',\n      disabled:bool=false\n      ){\n      WindowsEvent\n      | where\n          // -- pre-filtering\n          (isnull(starttime)   or TimeGenerated >= starttime )\n          and (isnull(endtime) or TimeGenerated <= endtime )\n          and not(disabled)\n          and (eventtype=='*' or eventtype=='ProcessCreated')\n          and Provider == \"Microsoft-Windows-Sysmon\" and EventID==1\n          and (array_length(commandline_has_all)==0 or EventData.CommandLine has_all (commandline_has_all)) \n          and (array_length(commandline_has_any)==0 or EventData.CommandLine has_any (commandline_has_any)) \n          and (array_length(commandline_has_any_ip_prefix)==0 or has_any_ipv4_prefix(EventData.CommandLine, commandline_has_any_ip_prefix) ) \n          and (array_length(actingprocess_has_any)==0 or EventData.ParentImage has_any (actingprocess_has_any)) \n          and (array_length(targetprocess_has_any)==0 or EventData.Image has_any (targetprocess_has_any)) \n          and (array_length(parentprocess_has_any)==0)\n          and (targetusername_has=='*' or EventData.User has targetusername_has)  \n          and (array_length(dvcipaddr_has_any_prefix)==0)\n          and (array_length(dvchostname_has_any)==0 or Computer has_any (dvchostname_has_any))   \n          // --\n      | parse-kv tostring(EventData.Hashes) as (MD5:string, SHA1:string, SHA256:string, IMPHASH:string) with (quote='\"')\n      | extend\n          Hash = coalesce (SHA256, SHA1, IMPHASH, MD5, \"\")\n      | extend\n          HashType = tostring(dynamic([\"SHA256\", \"SHA1\", \"IMPHASH\", \"MD5\"])[array_index_of(pack_array(SHA256, SHA1, IMPHASH, MD5),Hash)])\n      | project-rename\n          TargetProcessMD5 = MD5,\n          TargetProcessSHA1 = SHA1,\n          TargetProcessSHA256 = SHA256,\n          TargetProcessIMPHASH = IMPHASH\n      | extend \n              EventOriginalType = tostring(EventID),\n              TargetUserSessionId = tostring(EventData.LogonId),           \n              TargetUsername = tostring(EventData.User),\n              TargetProcessCommandLine = tostring(EventData.CommandLine),\n              TargetProcessCurrentDirectory = tostring(EventData.CurrentDirectory),\n              TargetUserSessionGuid = tostring(EventData.LogonGuid), \n              TargetProcessId = tostring(EventData.ProcessId),\n              TargetProcessGuid = tostring(EventData.ProcessGuid),\n              TargetProcessName = tostring(EventData.Image),\n              TargetProcessFilename = tostring(EventData.OriginalFileName),\n              TargetProcessIntegrityLevel = tostring(EventData.IntegrityLevel),\n              TargetProcessFileCompany = tostring(EventData.Company),\n              TargetProcessFileDescription = tostring(EventData.Description),\n              TargetProcessFileVersion = tostring(EventData.FileVersion),\n              TargetProcessFileProduct = tostring(EventData.Product),\n              ActingProcessId = tostring(EventData.ParentProcessId),\n              ActingProcessGuid = tostring(EventData.ParentProcessGuid),                          \n              ActingProcessCommandLine = tostring(EventData.ParentCommandLine),\n              ActingProcessName = tostring(EventData.ParentImage),\n              ActorUsername = tostring(EventData.ParentUser)\n       // -- post-filtering\n       | where (array_length(commandline_has_any)==0 or TargetProcessCommandLine has_any (commandline_has_any)) \n          and (array_length(commandline_has_all)==0 or TargetProcessCommandLine has_all (commandline_has_all)) \n          and (array_length(commandline_has_any_ip_prefix)==0 or has_any_ipv4_prefix(TargetProcessCommandLine, commandline_has_any_ip_prefix) ) \n          and (array_length(actingprocess_has_any)==0 or ActingProcessName has_any (actingprocess_has_any)) \n          and (targetusername_has=='*' or TargetUsername has targetusername_has) \n          and (array_length(targetprocess_has_any)==0 or TargetProcessName has_any (targetprocess_has_any)) \n          // --\n       | extend \n          TargetUsernameType = iff(isnotempty(TargetUsername),'Windows', ''),\n          ActorUsernameType = iff(isnotempty(ActorUsername),'Windows', ''),\n          EventProduct = \"Security Events\"\n      | project-rename\n          DvcHostname = Computer,\n          EventOriginalUid = EventOriginId\n      | extend // aliases \n          Dvc = DvcHostname,\n          User = TargetUsername,\n          CommandLine = TargetProcessCommandLine,\n          Process = TargetProcessName\n      | project-away EventData, Provider, ManagementGroupName, RawEventData, SourceSystem, Task, TenantId,  EventID, Data, Channel, EventLevel, EventLevelName\n      }; \n      union isfuzzy=true \n          parser_Event(starttime=starttime, endtime=endtime, commandline_has_any=commandline_has_any,commandline_has_all=commandline_has_all, commandline_has_any_ip_prefix=commandline_has_any_ip_prefix, actingprocess_has_any=actingprocess_has_any, targetprocess_has_any=targetprocess_has_any, parentprocess_has_any=parentprocess_has_any, targetusername_has=targetusername_has, dvcipaddr_has_any_prefix=dvcipaddr_has_any_prefix, dvchostname_has_any=dvchostname_has_any, eventtype=eventtype, disabled=disabled),\n          parser_WindowsEvent(starttime=starttime, endtime=endtime, commandline_has_any=commandline_has_any,commandline_has_all=commandline_has_all, commandline_has_any_ip_prefix=commandline_has_any_ip_prefix, actingprocess_has_any=actingprocess_has_any, targetprocess_has_any=targetprocess_has_any, parentprocess_has_any=parentprocess_has_any, targetusername_has=targetusername_has, dvcipaddr_has_any_prefix=dvcipaddr_has_any_prefix, dvchostname_has_any=dvchostname_has_any, eventtype=eventtype, disabled=disabled)\n      | extend \n          EventType = \"ProcessCreated\",\n          EventOriginalType = \"1\",\n          EventStartTime = todatetime(TimeGenerated),\n          EventEndTime = todatetime(TimeGenerated),\n          EventCount = int(1),\n          EventVendor = \"Microsoft\",\n          EventSchemaVersion = \"0.1.0\",\n          EventSchema = 'ProcessEvent',\n          EventResult = 'Success',\n          DvcOs = \"Windows\",\n          TargetUsernameType = \"Windows\",\n          ActorUsernameType = \"Windows\"\n  };\n  parser (\n    starttime=starttime,\n    endtime=endtime,\n    commandline_has_any=commandline_has_any,\n    commandline_has_all=commandline_has_all,\n    commandline_has_any_ip_prefix=commandline_has_any_ip_prefix,\n    actingprocess_has_any=actingprocess_has_any,\n    targetprocess_has_any=targetprocess_has_any,\n    parentprocess_has_any=parentprocess_has_any,\n    targetusername_has=targetusername_has,\n    dvcipaddr_has_any_prefix=dvcipaddr_has_any_prefix,\n    dvchostname_has_any=dvchostname_has_any,\n    eventtype=eventtype,\n    disabled=disabled\n  ) ",
            "version": 1,
            "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),commandline_has_any:dynamic=dynamic([]),commandline_has_all:dynamic=dynamic([]),commandline_has_any_ip_prefix:dynamic=dynamic([]),actingprocess_has_any:dynamic=dynamic([]),targetprocess_has_any:dynamic=dynamic([]),parentprocess_has_any:dynamic=dynamic([]),targetusername_has:string='*',dvcipaddr_has_any_prefix:dynamic=dynamic([]),dvchostname_has_any:dynamic=dynamic([]),eventtype:string='*',disabled:bool=False"
          }
        }
      ]
    }
  ]
}