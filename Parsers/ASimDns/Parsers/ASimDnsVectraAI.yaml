Parser:
  Title: DNS ASIM parser for Vectra AI Steams
  Version: '0.1.1'
  LastUpdated: Dec 26 2022
Product:
  Name: Vectra AI Streams
Normalization:
  Schema: Dns
  Version: '0.1.3'
References:
- Title: ASIM DNS Schema
  Link: https://aka.ms/ASimDnsDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
Exceptions:
- Field: DnsQuery 
  Warning: Invalid value
  Exception: May have values such as "1164-ms-7.1440-9fdc2aab.3b2bd806-978e-11ec-8bb3-aad815b5cd42" which are not valid domains names. Those are are related to TKEY RR requests.
- Field: DnsQuery
  Warning: Empty value in mandatory field
  Exception: May be empty for requests for root servers and for requests for RR type DNSKEY- 
- Field: EventOriginalUid
  Exception: Is empty for events of subtype request. 
- Field: DvcId
  Exception: Is empty for events of subtype request. 
- Field: DnsSessionId
  Exception: Is empty for events of subtype request. 
Description: |
  This ASIM parser supports normalizing Vectra AI Steams logs to the ASIM DNS normalized schema.
ParserName: ASimDnsVectraAI
EquivalentBuiltInParser: _ASim_Dns_VectraAI
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let parser = (disabled:bool=false) {
    let NetworkProtocolLookup = datatable(proto_d:real, NetworkProtocol:string)[
        6, 'TCP',
        17, 'UDP'];
    let DnsClassLookup = datatable(DnsQueryClass:int, DnsQueryClassName: string)[
        0, 'Reserved',
        1, 'IN',
        2, 'Unassigned',
        3, 'CH',
        4, 'HS',
        254, 'None',
        255, 'Any'
    ];
    let HostnameRegex = @'^[a-zA-Z0-9-]{1,61}$';
    VectraStream_CL
    | project-away MG, ManagementGroupName, RawData, SourceSystem, Computer
    | where metadata_type_s == 'metadata_dns'
    | project-rename
        DvcDescription = hostname_s,
        DstDescription = resp_hostname_s,
        SrcDescription = orig_hostname_s,
        DnsFlagsAuthoritative = AA_b,
        DnsFlagsRecursionAvailable = RA_b,
        DnsFlagsRecursionDesired = RD_b,
        DnsFlagsTruncated = TC_b,
        DnsResponseName = answers_s,
        DnsQuery = query_s,
        DnsQueryTypeName = qtype_name_s,
        DstIpAddr = id_resp_h_s,
        DnsSessionId = community_id_s,
        SrcIpAddr = id_orig_h_s,
        DstDvcId = resp_huid_s,
        SrcDvcId = orig_huid_s,
        DvcId = sensor_uid_s,
        EventOriginalUid = uid_s,
        SrcSessionId = orig_sluid_s,
        DstSessionId = resp_sluid_s
    | extend
        DstHostname = iff (DstDescription startswith "IP-" or not(DstDescription matches regex HostnameRegex), "", DstDescription),
        SrcHostname = iff (SrcDescription startswith "IP-" or not(SrcDescription matches regex HostnameRegex), "", SrcDescription),
        DvcHostname = iff (DvcDescription startswith "IP-" or not(DvcDescription matches regex HostnameRegex), "", DvcDescription),
        NetworkProtocolVersion = toupper(id_ip_ver_s),
        DnsResponseCode = toint(rcode_d),
        DnsResponseCodeName = toupper(rcode_name_s),
        DnsQueryClass = toint(qclass_d),
        DnsQueryType = toint(qtype_d),
        DstPortNumber = toint(id_resp_p_d),
        EventCount = toint(1),
        EventEndTime = unixtime_milliseconds_todatetime(ts_d),
        EventOriginalSubType = tostring(split(metadata_type_s, '_')[1]),
        EventProduct = 'Vectra Stream',
        EventResult = case(tolong(rcode_d) > 0, "Failure", "Success"),
        EventSchema = 'Dns', 
        EventSchemaVersion='0.1.3',
        EventType = 'Query',
        EventVendor = 'Vectra AI',
        SrcDvcIdType = 'VectraId',
        DstDvcIdType = 'VectraId',
        DvcIdType = 'VectraId',
        SrcPortNumber = toint(id_orig_p_d),
        TransactionIdHex = tostring(toint(trans_id_d)),
        EventSubType = iff (saw_reply_b, "response", "request")
    | lookup DnsClassLookup on DnsQueryClass
    | lookup NetworkProtocolLookup on proto_d
    | extend
        EventResultDetails = DnsResponseCodeName,
        EventStartTime = EventEndTime,
        SessionId = DnsSessionId,
        Domain = DnsQuery,
        Hostname = DstHostname,
        IpAddr = SrcIpAddr,
        Dvc = coalesce (DvcId, DvcDescription),
        Src = SrcIpAddr,
        Dst = DstIpAddr
    | project-away
        *_d, *_s, *_b, *_g
      };
  parser (disabled)