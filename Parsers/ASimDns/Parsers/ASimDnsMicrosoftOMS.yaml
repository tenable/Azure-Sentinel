Parser:
  Title: DNS activity ASIM parser for Windows DNS log collected using the Log Analytics agent
  Version: '0.4'
  LastUpdated: Dec 11 2022
Product:
  Name: MS DNS Events
Normalization:
  Schema: Dns
  Version: '0.1.3'
References:
- Title: ASIM DNS Schema
  Link: https://aka.ms/ASimDnsDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
Description: |
  This ASIM parser supports normalizing Windows DNS logs, collected using the Log Analytics agent, to the ASIM Dns normalized schema.
ParserName: ASimDnsMicrosoftOMS
EquivalentBuiltInParser: _ASim_Dns_MicrosoftOMS
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let EventTypeTable=datatable(EventOriginalType:int,EventType:string,EventSubType:string, EventResult:string)[
    256, 'Query', 'request', 'NA'
  , 257, 'Query', 'response', 'Success'
  , 258, 'Query', 'response', 'Based on RCODE'
  , 259, 'Query', 'response', 'Based on RCODE'
  , 260, 'Query', 'request', 'NA'
  , 261, 'Query', 'response', 'NA'
  , 262, 'Query', 'response', 'Based on RCODE'
  , 263, 'Update', 'request', 'NA'
  , 264, 'Update', 'response', 'Based on RCODE'
  , 265, 'XFR', 'request', 'NA' 
  , 266, 'XFR', 'request', 'NA'
  , 267, 'XFR', 'response', 'Based on RCODE'
  , 268, 'XFR', 'response', 'Based on RCODE'
  , 269, 'XFR', 'request', 'NA'
  , 270, 'XFR', 'request', 'NA'
  , 271, 'XFR', 'response', 'Based on RCODE'
  , 272, 'XFR', 'response', 'Based on RCODE'
  , 273, 'XFR', 'request', 'NA'
  , 274, 'XFR', 'request', 'NA'
  , 275, 'XFR', 'response', 'Success'
  , 276, 'XFR', 'response', 'Success'
  , 277, 'Update', 'request', 'NA'
  , 278, 'Update', 'response', 'Based on RCODE'
  , 279, 'Query', 'NA', 'NA'
  , 280, 'Query', 'NA', 'NA'
  ];
  let RCodeTable=datatable(DnsResponseCode:int,DnsResponseCodeName:string)[
     0, 'NOERROR'
   , 1, "FORMERR"
   , 2,"SERVFAIL"
   , 3,'NXDOMAIN'
   , 4,'NOTIMP'
   , 5,'REFUSED'
   , 6,'YXDOMAIN'
   , 7,'YXRRSET'
   , 8,'NXRRSET'
   , 9,'NOTAUTH'
   , 10,'NOTZONE'
   , 11,'DSOTYPENI'
   , 16,'BADVERS'
   , 16,'BADSIG'
   , 17,'BADKEY'
   , 18,'BADTIME'
   , 19,'BADMODE'
   , 20,'BADNAME'
   , 21,'BADALG'
   , 22,'BADTRUNC'
   , 23,'BADCOOKIE'];
  let QueryTypeSymbols=datatable(QTypeSeq:string,QTypeName:string)[
  "0", "Reserved",
  "1", "A",
  "2", "NS",
  "3", "MD",
  "4", "MF",
  "5", "CNAME",
  "6", "SOA",
  "7", "MB",
  "8", "MG",
  "9", "MR",
  "10", "NULL",
  "11", "WKS",
  "12", "PTR",
  "13", "HINFO",
  "14", "MINFO",
  "15", "MX",
  "16", "TXT",
  "17", "RP",
  "18", "AFSDB",
  "19", "X25",
  "20", "ISDN",
  "21", "RT",
  "22", "NSAP",
  "23", "NSAP-PTR",
  "24", "SIG",
  "25", "KEY",
  "26", "PX",
  "27", "GPOS",
  "28", "AAAA",
  "29", "LOC",
  "30", "NXT",
  "31", "EID",
  "32", "NIMLOC",
  "33", "SRV",
  "34", "ATMA",
  "35", "NAPTR",
  "36", "KX",
  "37", "CERT",
  "38", "A6",
  "39", "DNAME",
  "40", "SINK",
  "41", "OPT",
  "42", "APL",
  "43", "DS",
  "44", "SSHFP",
  "45", "IPSECKEY",
  "46", "RRSIG",
  "47", "NSEC",
  "48", "DNSKEY",
  "49", "DHCID",
  "50", "NSEC3",
  "51", "NSEC3PARAM",
  "52", "TLSA",
  "53", "SMIMEA",
  "54", "Unassigned",
  "55", "HIP",
  "56", "NINFO",
  "57", "RKEY",
  "58", "TALINK",
  "59", "CDS",
  "60", "CDNSKEY",
  "61", "OPENPGPKEY",
  "62", "CSYNC",
  "99", "SPF",
  "100", "UINFO",
  "101", "UID",
  "102", "GID",
  "103", "UNSPEC",
  "104", "NID",
  "105", "L32",
  "106", "L64",
  "107", "LP",
  "108", "EUI48",
  "109", "EUI64",
  "249", "TKEY",
  "250", "TSIG",
  "251", "IXFR",
  "252", "AXFR",
  "253", "MAILB",
  "254", "MAILA",
  "255", "All",
  "256", "URI",
  "257", "CAA",
  "258", "AVC",
  "259", "DOA",
  "32768", "TA",
  "32769", "DLV"];
  let DNSQuery_MS=(disabled:bool=false){
    DnsEvents | where not(disabled)
  | where EventId < 500
  | lookup QueryTypeSymbols on $left.QueryType == $right.QTypeSeq
  | extend DnsQueryTypeName=coalesce(QTypeName, QueryType)
  | project-rename
         Dvc=Computer ,
         SrcIpAddr = ClientIP,
         EventMessage = Message,
         EventOriginalType = EventId,
         EventReportUrl = ReportReferenceLink,
         DnsResponseName = IPAddresses,
         DnsQuery = Name,
         DnsResponseCode = ResultCode
  | extend hostelements=split(Dvc,'.')
  | extend DvcHostname=tostring(hostelements[0])
         , DvcDomain=strcat_array( array_slice(hostelements,1,-1), '.')
         , DvcFQDN = iff(Dvc contains ".",Dvc,"" )
  | extend  DvcDomainType=iff(DvcFQDN !="","FQDN","" )
  | project-away hostelements
  | extend
         EventCount=int(1),
         EventStartTime=TimeGenerated,
         EventVendor = "Microsoft",
         EventProduct = "DNS Server",
         EventSchema = "Dns",
         EventSchemaVersion="0.1.3",
         EventEndTime=TimeGenerated,
         EventSeverity = tostring(Severity)
    | lookup RCodeTable on DnsResponseCode
    | lookup EventTypeTable on EventOriginalType
    | extend EventResultDetails = case (isnotempty(DnsResponseCodeName), DnsResponseCodeName
                                    , DnsResponseCode between (3841 .. 4095), 'Reserved for Private Use'
                                    , 'Unassigned'),
      EventResult = iff (EventResult == "Based on RCODE", iff(DnsResponseCode == 0, "Success", "Failure"),EventResult)
  // **************Aliases
    | extend
        DnsResponseCodeName=EventResultDetails,
        Domain=DnsQuery,
        IpAddr=SrcIpAddr,
        Src=SrcIpAddr,
        EventOriginalType=tostring(EventOriginalType)
    | project-away 
        SubType, QTypeName, QueryType, SourceSystem, TaskCategory, Remote*, Severity, Result, Confidence, Description, IndicatorThreatType, MaliciousIP
        };
  DNSQuery_MS (disabled)