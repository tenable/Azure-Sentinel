Parser:
  Title: DNS activity ASIM filtering parser for GCP
  Version: '0.4'
  LastUpdated: Dec 11 2022
Product:
  Name: GCP Cloud DNS
Normalization:
  Schema: Dns
  Version: '0.1.3'
References:
- Title: ASIM DNS Schema
  Link: https://aka.ms/ASimDnsDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
Description: |
  This ASIM parser supports filtering and normalizing Google cloud platform (GCP) DNS logs to the ASIM Dns normalized schema.
ParserName: vimDnsGcp
EquivalentBuiltInParser: _Im_Dns_Gcp
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr
    Type: string
    Default: '*'
  - Name: domain_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: responsecodename
    Type: string
    Default: '*'
  - Name: response_has_ipv4
    Type: string
    Default: '*'
  - Name: response_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: eventtype
    Type: string
    Default: 'Query'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  // https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry
  let GCPSeverityTable=datatable(severity_s:string,EventSeverity:string)
  ["DEFAULT","Informational",
  "DEBUG","Informational",
  "INFO","Informational",
  "NOTICE","Medium",
  "WARNING","Medium",
  "ERROR","High",
  "CRITICAL","High",
  "ALERT","High",
  "EMERGENCY","High"
  ];
  let DNSQuery_GcpDns=(
    starttime:datetime=datetime(null), endtime:datetime=datetime(null)
    , srcipaddr:string='*'
    , domain_has_any:dynamic=dynamic([]) 
    , responsecodename:string='*', response_has_ipv4:string='*'
    , response_has_any_prefix:dynamic=dynamic([]) , eventtype:string='Query'
    , disabled:bool=false
  ){
    GCP_DNS_CL | where not(disabled)
    | project-away MG, ManagementGroupName, RawData, SourceSystem, Computer
    | where resource_type_s == "dns_query"
    //  Pre-parsing filtering:
    | where
    (eventtype in ('lookup', 'Query')) // -- for now we support only lookup events
      and (isnull(starttime) or TimeGenerated >= starttime)
      and (isnull(endtime) or TimeGenerated <= endtime)
      and (srcipaddr=='*' or has_ipv4(payload_sourceIP_s, srcipaddr))
      and (array_length(domain_has_any) ==0 or payload_queryName_s has_any (domain_has_any))
      and (responsecodename=='*' or payload_responseCode_s == responsecodename)
      and (response_has_ipv4=='*' or has_ipv4(payload_rdata_s,response_has_ipv4) )
      and (array_length(response_has_any_prefix) == 0 or has_any_ipv4_prefix(payload_rdata_s, response_has_any_prefix))
    // *****************************************************************
    | lookup GCPSeverityTable on severity_s
    | project-rename
        DnsQueryTypeName=payload_queryType_s,
        DnsResponseName=payload_rdata_s, 
        EventResultDetails=payload_responseCode_s,
        NetworkProtocol=payload_protocol_s, 
        SrcIpAddr=payload_sourceIP_s,
        EventOriginalUid=insert_id_s,
        EventOriginalSeverity=severity_s    
    | extend
        DnsQuery=trim_end(@'\.',payload_queryName_s), 
        EventCount=int(1),
        EventProduct='Cloud DNS',
        EventVendor='GCP',
        EventSchema='Dns',
        EventSchemaVersion="0.1.3",
        Dvc="GCPDNS" ,
        EventType = iif (resource_type_s == "dns_query", "Query", resource_type_s),
        EventResult=iff(EventResultDetails=~'NOERROR','Success','Failure'),
        EventSubType='response',
        EventEndTime=todatetime(timestamp_t)
    | extend
        EventStartTime = EventEndTime,
        EventResult = iff (EventResultDetails=~'NOERROR','Success','Failure')
    // -- Aliases
    | extend 
        DnsResponseCodeName=EventResultDetails, 
        Domain=DnsQuery,
        IpAddr=SrcIpAddr,
        Src=SrcIpAddr
    | project-away *_s, *_d, *_b, *_t
    };
    DNSQuery_GcpDns (starttime=starttime, endtime=endtime, srcipaddr=srcipaddr, domain_has_any=domain_has_any, responsecodename=responsecodename, response_has_ipv4=response_has_ipv4, response_has_any_prefix=response_has_any_prefix, eventtype=eventtype, disabled=disabled)