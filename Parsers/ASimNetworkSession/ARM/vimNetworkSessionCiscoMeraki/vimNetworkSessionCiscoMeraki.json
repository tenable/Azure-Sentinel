{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2017-03-15-preview",
      "name": "[parameters('Workspace')]",
      "location": "[parameters('WorkspaceRegion')]",
      "resources": [
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "vimNetworkSessionCiscoMeraki",
          "dependsOn": [
            "[concat('Microsoft.OperationalInsights/workspaces/', parameters('Workspace'))]"
          ],
          "properties": {
            "etag": "*",
            "displayName": "Network Session ASIM parser for Cisco Meraki",
            "category": "ASIM",
            "FunctionAlias": "vimNetworkSessionCiscoMeraki",
            "query": "let NWParser = (\n    starttime:datetime=datetime(null), \n    endtime:datetime=datetime(null),\n    srcipaddr_has_any_prefix:dynamic=dynamic([]), \n    dstipaddr_has_any_prefix:dynamic=dynamic([]), \n    ipaddr_has_any_prefix:dynamic=dynamic([]),\n    dstportnumber:int=int(null), \n    hostname_has_any:dynamic=dynamic([]), \n    dvcaction:dynamic=dynamic([]), \n    eventresult:string='*', \n    disabled:bool=false)\n  {\n    let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); \n    let dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix);\n    CiscoMerakiNativePoller_CL\n      | where not(disabled)\n      // Pre-filtering\n      | where  \n            (isnull(starttime) or TimeGenerated >= starttime) \n            and (isnull(endtime) or TimeGenerated <= endtime)\n            and EventOriginalType == \"IDS Alert\"\n            and (isnull(dstportnumber) or (DstPortNumber == dstportnumber))\n            and ((array_length(dvcaction) == 0) or DvcAction has_any (dvcaction))\n            and ((eventresult == \"*\") or (EventResult == eventresult))\n      | extend temp_isSrcMatch=has_any_ipv4_prefix(SrcIpAddr,src_or_any), \n               temp_isDstMatch=has_any_ipv4_prefix(DstIpAddr,dst_or_any)\n      | extend ASimMatchingIpAddr = case(\n                        array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, \"-\", // match not requested\n                        (temp_isSrcMatch and temp_isDstMatch), \"Both\", // has to be checked before the individual \n                        temp_isSrcMatch, \"SrcIpAddr\",\n                        temp_isDstMatch, \"DstIpAddr\",\n                        \"No match\"\n                    )\n      | where ASimMatchingIpAddr != \"No match\"\n      | extend temp_isMatchSrcHostname= SrcHostname has_any (hostname_has_any),\n               temp_isMatchDstHostname = DstHostname has_any (hostname_has_any)\n      | extend ASimMatchingHostname = case(\n                        array_length(hostname_has_any) == 0 , \"-\", \n                        (temp_isMatchSrcHostname and temp_isMatchDstHostname), \"Both\" , \n                        temp_isMatchSrcHostname, \"SrcHostname\", \n                        temp_isMatchDstHostname, \"DstHostname\", \n                        \"No match\"\n                    )\n      | project-away temp*\n      | where ASimMatchingHostname != \"No match\"\n      | extend  \n          EventResult = iff(DvcAction == \"Deny\", \"Failure\", \"Success\"),\n          EventResultDetails = \"\",\n          NetworkDuration = toint(NetworkDuration)\n      | extend \n          InnerVlanId = SrcVlanId,\n          OuterVlanId = DstVlanId,\n          SessionId = NetworkSessionId,\n          Hostname = DstHostname,\n          IpAddr = SrcIpAddr,\n          Duration = NetworkDuration, \n          Dst = DstIpAddr,\n          Src = SrcIpAddr,\n          User = DstUsername\n    | project-away Url*, Http*, File*, Rule*, UserAgent, Hash\n  };\nNWParser (starttime, endtime, srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix, dstportnumber, hostname_has_any, dvcaction, eventresult, disabled)",
            "version": 1,
            "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr_has_any_prefix:dynamic=dynamic([]),dstipaddr_has_any_prefix:dynamic=dynamic([]),ipaddr_has_any_prefix:dynamic=dynamic([]),dstportnumber:int=int(null),hostname_has_any:dynamic=dynamic([]),dvcaction:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
          }
        }
      ]
    }
  ]
}