Parser:
  Title: Network Session ASIM parser for Cisco Meraki
  Version: '1.0'
  LastUpdated: May 20, 2022
Product:
  Name: Cisco Meraki
Normalization:
  Schema: NetworkSession
  Version: '0.2.2'
References:
  - Title: ASIM Network Session Schema
    Link: https://aka.ms/ASimNetworkSessionDoc
  - Title: ASIM
    Link: https://aka.ms/AboutASIM
  - Title: Organization Application Security Events 
    Link: https://developer.cisco.com/meraki/api-latest/#!get-organization-appliance-security-events
Description: |
  This ASIM parser supports normalizing Cisco Meraki IDS Events produced by the Microsoft Sentinel Cisco Meraki Security Events connector to the ASIM Network Session normalized schema.
ParserName: vimNetworkSessionCiscoMeraki                                  
EquivalentBuiltInParser: _Im_NetworkSession_CiscoMeraki                                  
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dstipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: ipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dstportnumber
    Type: int
    Default: int(null)
  - Name: hostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: dvcaction
    Type: dynamic
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
    let NWParser = (
        starttime:datetime=datetime(null), 
        endtime:datetime=datetime(null),
        srcipaddr_has_any_prefix:dynamic=dynamic([]), 
        dstipaddr_has_any_prefix:dynamic=dynamic([]), 
        ipaddr_has_any_prefix:dynamic=dynamic([]),
        dstportnumber:int=int(null), 
        hostname_has_any:dynamic=dynamic([]), 
        dvcaction:dynamic=dynamic([]), 
        eventresult:string='*', 
        disabled:bool=false)
      {
        let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); 
        let dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix);
        CiscoMerakiNativePoller_CL
          | where not(disabled)
          // Pre-filtering
          | where  
                (isnull(starttime) or TimeGenerated >= starttime) 
                and (isnull(endtime) or TimeGenerated <= endtime)
                and EventOriginalType == "IDS Alert"
                and (isnull(dstportnumber) or (DstPortNumber == dstportnumber))
                and ((array_length(dvcaction) == 0) or DvcAction has_any (dvcaction))
                and ((eventresult == "*") or (EventResult == eventresult))
          | extend temp_isSrcMatch=has_any_ipv4_prefix(SrcIpAddr,src_or_any), 
                   temp_isDstMatch=has_any_ipv4_prefix(DstIpAddr,dst_or_any)
          | extend ASimMatchingIpAddr = case(
                            array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, "-", // match not requested
                            (temp_isSrcMatch and temp_isDstMatch), "Both", // has to be checked before the individual 
                            temp_isSrcMatch, "SrcIpAddr",
                            temp_isDstMatch, "DstIpAddr",
                            "No match"
                        )
          | where ASimMatchingIpAddr != "No match"
          | extend temp_isMatchSrcHostname= SrcHostname has_any (hostname_has_any),
                   temp_isMatchDstHostname = DstHostname has_any (hostname_has_any)
          | extend ASimMatchingHostname = case(
                            array_length(hostname_has_any) == 0 , "-", 
                            (temp_isMatchSrcHostname and temp_isMatchDstHostname), "Both" , 
                            temp_isMatchSrcHostname, "SrcHostname", 
                            temp_isMatchDstHostname, "DstHostname", 
                            "No match"
                        )
          | project-away temp*
          | where ASimMatchingHostname != "No match"
          | extend  
              EventResult = iff(DvcAction == "Deny", "Failure", "Success"),
              EventResultDetails = "",
              NetworkDuration = toint(NetworkDuration)
          | extend 
              InnerVlanId = SrcVlanId,
              OuterVlanId = DstVlanId,
              SessionId = NetworkSessionId,
              Hostname = DstHostname,
              IpAddr = SrcIpAddr,
              Duration = NetworkDuration, 
              Dst = DstIpAddr,
              Src = SrcIpAddr,
              User = DstUsername
        | project-away Url*, Http*, File*, Rule*, UserAgent, Hash
      };
    NWParser (starttime, endtime, srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix, dstportnumber, hostname_has_any, dvcaction, eventresult, disabled)