Parser:
  Title: Network Session ASIM filtering parser for Fortinet FortiGate
  Version: '0.3'
  LastUpdated: Dec 11, 2022
Product:
  Name: Fortinet FortiGate
Normalization:
  Schema: NetworkSession
  Version: '0.2.3'
References:
  - Title: ASIM Network Session Schema
    Link: https://aka.ms/ASimNetworkSessionDoc
  - Title: ASIM
    Link: https://aka.ms/AboutASIM
  - Title: traffic log fields
    Link: https://docs.fortinet.com/document/fortigate/7.2.0/fortios-log-message-reference/949981/traffic-log-support-for-cef
  - Title: Fortinet FortiGate CEF setup
    Link: https://community.fortinet.com/t5/FortiGate/Technical-Tip-Integrate-FortiGate-with-Microsoft-Sentinel/ta-p/199709
  - Title: Fortinet FortiGate syslogd documentation
    Link: https://docs.fortinet.com/document/fortigate/7.2.0/cli-reference/450620/config-log-syslogd-setting
Description: |
  This ASIM parser supports filtering and normalizing Fortinet FortiGate logs produced by the Microsoft Sentinel Fortinet connector to the ASIM Network Session normalized schema.
ParserName: vimNetworkSessionFortinetFortiGate                                  
EquivalentBuiltInParser: _Im_NetworkSession_FortinetFortiGate                                  
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dstipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: ipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dstportnumber
    Type: int
    Default: int(null)
  - Name: hostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: dvcaction
    Type: dynamic
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let EventLookup=datatable(DeviceAction:string,DvcAction:string,EventResult:string,EventResultDetails:string)
  [
    "accept","Allow","Success",""
    , "client-rst","Reset Source","Failure",""
    , "close","","Success",""
    , "deny","Deny","Failure",""
    , "ip-conn","","Failure","IP connection error"
    , "server-rst","Reset Destination","Failure",""
    , "timeout","","Failure",""
  ];
  let ProtocolLookup=datatable(Protocol:string,NetworkProtocol:string)
  [
    "0","HOPOPT"
    , "1","ICMP"
    , "2","IGMP"
    , "3","GGP"
    , "4","IPv4"
    , "5","ST"
    , "6","TCP"
    , "7","CBT"
    , "8","EGP"
    , "9","IGP"
    , "10","BBN-RCC-MON"
    , "11","NVP-II"
    , "12","PUP"
    , "13","ARGUS (deprecated)"
    , "14","EMCON"
    , "15","XNET"
    , "16","CHAOS"
    , "17","UDP"
    , "18","MUX"
    , "19","DCN-MEAS"
    , "20","HMP"
    , "21","PRM"
    , "22","XNS-IDP"
    , "23","TRUNK-1"
    , "24","TRUNK-2"
    , "25","LEAF-1"
    , "26","LEAF-2"
    , "27","RDP"
    , "28","IRTP"
    , "29","ISO-TP4"
    , "30","NETBLT"
    , "31","MFE-NSP"
    , "32","MERIT-INP"
    , "33","DCCP"
    , "34","3PC"
    , "35","IDPR"
    , "36","XTP"
    , "37","DDP"
    , "38","IDPR-CMTP"
    , "39","TP++"
    , "40","IL"
    , "41","IPv6"
    , "42","SDRP"
    , "43","IPv6-Route"
    , "44","IPv6-Frag"
    , "45","IDRP"
    , "46","RSVP"
    , "47","GRE"
    , "48","DSR"
    , "49","BNA"
    , "50","ESP"
    , "51","AH"
    , "52","I-NLSP"
    , "53","SWIPE (deprecated)"
    , "54","NARP"
    , "55","MOBILE"
    , "56","TLSP"
    , "57","SKIP"
    , "58","IPv6-ICMP"
    , "59","IPv6-NoNxt"
    , "60","IPv6-Opts"
    , "61",""
    , "62","CFTP"
    , "63",""
    , "64","SAT-EXPAK"
    , "65","KRYPTOLAN"
    , "66","RVD"
    , "67","IPPC"
    , "68",""
    , "69","SAT-MON"
    , "70","VISA"
    , "71","IPCV"
    , "72","CPNX"
    , "73","CPHB"
    , "74","WSN"
    , "75","PVP"
    , "76","BR-SAT-MON"
    , "77","SUN-ND"
    , "78","WB-MON"
    , "79","WB-EXPAK"
    , "80","ISO-IP"
    , "81","VMTP"
    , "82","SECURE-VMTP"
    , "83","VINES"
    , "84","TTP"
    , "84","IPTM"
    , "85","NSFNET-IGP"
    , "86","DGP"
    , "87","TCF"
    , "88","EIGRP"
    , "89","OSPFIGP"
    , "90","Sprite-RPC"
    , "91","LARP"
    , "92","MTP"
    , "93","AX.25"
    , "94","IPIP"
    , "95","MICP (deprecated)"
    , "96","SCC-SP"
    , "97","ETHERIP"
    , "98","ENCAP"
    , "99",""
    , "100","GMTP"
    , "101","IFMP"
    , "102","PNNI"
    , "103","PIM"
    , "104","ARIS"
    , "105","SCPS"
    , "106","QNX"
    , "107","A/N"
    , "108","IPComp"
    , "109","SNP"
    , "110","Compaq-Peer"
    , "111","IPX-in-IP"
    , "112","VRRP"
    , "113","PGM"
    , "114",""
    , "115","L2TP"
    , "116","DDX"
    , "117","IATP"
    , "118","STP"
    , "119","SRP"
    , "120","UTI"
    , "121","SMP"
    , "122","SM (deprecated)"
    , "123","PTP"
    , "124","ISIS over IPv4"
    , "125","FIRE"
    , "126","CRTP"
    , "127","CRUDP"
    , "128","SSCOPMCE"
    , "129","IPLT"
    , "130","SPS"
    , "131","PIPE"
    , "132","SCTP"
    , "133","FC"
    , "134","RSVP-E2E-IGNORE"
    , "135","Mobility Header"
    , "136","UDPLite"
    , "137","MPLS-in-IP"
    , "138","manet"
    , "139","HIP"
    , "140","Shim6"
    , "141","WESP"
    , "142","ROHC"
    , "143","Ethernet"
    , "253",""
    , "254",""
    , "255","Reserved"];
  let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); 
  let dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix); 
  let Parser=(starttime:datetime=datetime(null), endtime:datetime=datetime(null), srcipaddr_has_any_prefix:dynamic=dynamic([]), dstipaddr_has_any_prefix:dynamic=dynamic([]), ipaddr_has_any_prefix:dynamic=dynamic([]), dstportnumber:int=int(null), hostname_has_any:dynamic=dynamic([]), dvcaction:dynamic=dynamic([]), eventresult:string='*', disabled:bool=false){
    CommonSecurityLog
    | where not(disabled)
    | where (isnull(starttime) or TimeGenerated>=starttime) and (isnull(endtime) or TimeGenerated<=endtime)
    | where DeviceVendor == "Fortinet" and DeviceProduct startswith "FortiGate" and AdditionalExtensions has "cat=traffic"
    | where DeviceAction != "dns"
    | where  (isnull(dstportnumber) or DestinationPort==dstportnumber)
    | extend temp_SrcMatch=has_any_ipv4_prefix(SourceIP,src_or_any)
      , temp_DstMatch=has_any_ipv4_prefix(DestinationIP,dst_or_any)
    | extend ASimMatchingIpAddr=case(
        array_length(src_or_any) == 0 and array_length(dst_or_any) == 0 ,"-",
        temp_SrcMatch and temp_DstMatch, "Both",
        temp_SrcMatch, "SrcIpAddr",
        temp_DstMatch, "DstIpAddr",
        "No match"
    )
    | where ASimMatchingIpAddr != "No match" 
    | project-away temp_*
    | project Activity,AdditionalExtensions,DestinationIP,DestinationPort,DeviceAction,DeviceInboundInterface,DeviceName,DeviceOutboundInterface,DeviceProduct,DeviceVersion,LogSeverity,Protocol,ReceivedBytes,SentBytes,SourceIP,SourcePort,TimeGenerated, DeviceExternalID
    | lookup EventLookup on DeviceAction 
    | where  (array_length(hostname_has_any)==0) and (eventresult=="*" or (DvcAction=="Allow" and eventresult=="Success") or (eventresult=="Failure"))
    | where (array_length(dvcaction)==0 or DvcAction has_any (dvcaction))
    | project-rename DstBytes = ReceivedBytes
      , DstInterfaceName = DeviceOutboundInterface
      , DstIpAddr = DestinationIP
      , DstPortNumber = DestinationPort
      , Dvc = DeviceName
      , EventMessage = Activity
      , EventOriginalSeverity = LogSeverity
      , EventProduct = DeviceProduct
      , EventProductVersion = DeviceVersion
      , SrcBytes = SentBytes
      , SrcInterfaceName = DeviceInboundInterface
      , SrcIpAddr = SourceIP
      , SrcPortNumber = SourcePort
      , DvcId = DeviceExternalID
    | lookup ProtocolLookup on Protocol
    | project-rename DvcOriginalAction = DeviceAction
    | parse AdditionalExtensions with "start=" EventStartTime:datetime
      ";" * "srcintfrole=" SrcZone 
      ";" * "dstintfrole=" DstZone
      ";" * "externalID=" NetworkSessionId
      ";" * "policyid=" NetworkRuleNumber:int
      ";" * "dstcountry=" DstGeoCountry
      ";" * "srccountry=" SrcGeoCountry
      ";" *
    | parse AdditionalExtensions with * "crscore=" ThreatRiskLevel:int
      ";" *
    | parse AdditionalExtensions with * "duration=" NetworkDuration:int
      ";" * "sentpkt=" SrcPackets:long
      ";" * "rcvdpkt=" DstPackets:long
      ";" *
    | extend EventCount = int(1)
      , EventSchema = "NetworkSession"
      , EventSchemaVersion = "0.2.3"
      , EventSeverity = iif(EventOriginalSeverity == 5, "Informational", "")
      , EventType = "NetworkSession"
      , EventVendor = "Fortinet"
      , DvcIdType = "Other"
      , NetworkBytes = DstBytes + SrcBytes
      , EventEndTime = TimeGenerated
      , NetworkProtocolVersion = case(DstIpAddr contains ".", "IPv4"
          , DstIpAddr contains ":", "IPv6"
          , "")
      , NetworkPackets = DstPackets + SrcPackets
      | extend 
          Src = SrcIpAddr,
          Dst = DstIpAddr,
          SessionId = NetworkSessionId,
          IpAddr = SrcIpAddr,
          Duration = NetworkDuration,
          Rule = tostring(NetworkRuleNumber)
    | project-away Protocol, AdditionalExtensions
  };
  Parser (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, dstipaddr_has_any_prefix=dstipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, dstportnumber=dstportnumber, hostname_has_any=hostname_has_any, dvcaction=dvcaction, eventresult=eventresult, disabled=disabled)