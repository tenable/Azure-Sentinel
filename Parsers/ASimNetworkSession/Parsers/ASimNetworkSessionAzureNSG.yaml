Parser:
  Title: Network Session ASIM parser for Azure NSG flows
  Version: '0.1.1'
  LastUpdated: Jul 3rd, 2021
Product:
  Name: Azure NSG flows
Normalization:
  Schema: NetworkSession
  Version: '0.2.2'
References:
  - Title: ASIM Network Session Schema
    Link: https://aka.ms/ASimNetworkSessionDoc
  - Title: ASIM
    Link: https://aka.ms/AboutASIM
Description: |
  This ASIM parser supports normalizing Azure Network Security Groups (NSG) flows to the ASIM Network Session normalized schema.
ParserName: ASimNetworkSessionAzureNSG
EquivalentBuiltInParser: _ASim_NetworkSession_AzureNSG
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let DvcActionLookup = datatable(FlowStatus_s:string, DvcAction:string, EventResult:string) [
      'A', 'Allow', 'Success',
      'D', 'Deny', 'Failure',
  ];
  let NetworkDirectionLookup = datatable(FlowDirection_s:string, NetworkDirection:string, isOutBound:bool) [
      'I', 'Inbound', false,
      'O', 'Outbound', true
  ];
  let NetworkProtocolLookup = datatable(L4Protocol_s:string, NetworkProtocol:string)[
      'T', 'TCP',
      'U', 'UDP'
  ];
  let parser = (disabled:bool=false) 
  {
    let AzureNetworkAnalytics = (FlowDirection: string) {
      AzureNetworkAnalytics_CL
      | where not(disabled) and isnotempty(FlowType_s)
      | where FlowDirection == FlowDirection_s
      | lookup NetworkDirectionLookup on FlowDirection_s
    };
    let AzureNetworkAnalyticsInbound =
      AzureNetworkAnalytics ('I')
      | where not(isOutBound)
      | project-rename
          DstMacAddr = MACAddress_s
      | extend
          DstBytes = tolong(OutboundBytes_d), // -- size fields seem not to be populated for inbound
          DstPackets = tolong(OutboundPackets_d),
          SrcBytes = tolong(InboundBytes_d),
          SrcPackets = tolong(InboundPackets_d),
          SrcInterfaceName = tostring(split(NIC_s, '/')[1]),
          SrcGeoCountry = toupper(Country_s)
      | extend hostelements=split(VM2_s,'/')
      | extend 
          DstFQDN = strcat(hostelements[0], @"\", hostelements[1]),
          DstHostname = tostring(hostelements[1]),
          DstDomain = tostring(hostelements[0]),
          DstDomainType = "ResourceGroup"
      | extend Hostname = DstHostname
      | project-away hostelements, isOutBound
    ;  
    let AzureNetworkAnalyticsOutbound =
      AzureNetworkAnalytics ('O')
      | where isOutBound
      | project-rename
          SrcMacAddr = MACAddress_s
      | extend
          SrcBytes = tolong(OutboundBytes_d), 
          SrcPackets = tolong(OutboundPackets_d),
          DstBytes = tolong(InboundBytes_d),
          DstPackets = tolong(InboundPackets_d),
          DstInterfaceName = tostring(split(NIC_s, '/')[1]),
          DstGeoCountry = toupper(Country_s)
      | extend hostelements=split(VM1_s,'/')
      | extend 
          SrcFQDN = strcat(hostelements[0], @"\", hostelements[1]),
          SrcHostname = tostring(hostelements[1]),
          SrcDomain = tostring(hostelements[0]),
          SrcDomainType = "ResourceGroup"
      | extend Hostname = SrcHostname
      | project-away hostelements, isOutBound
    ;
    union AzureNetworkAnalyticsInbound, AzureNetworkAnalyticsOutbound
    | project-rename
        Dvc = NSGList_s,
        DvcSubscriptionId = Subscription_g,
        EventEndTime = FlowEndTime_t,
        EventStartTime = FlowStartTime_t,
        NetworkApplicationProtocol = L7Protocol_s,
        NetworkRuleName = NSGRule_s,
        NetworkSessionId = ConnectionName_s,
        EventOriginalSubType = FlowType_s
    | extend
        DstPortNumber = toint(DestPort_d),
        EventProduct = 'NSGFlow',
        EventSchema = 'NetworkSession',
        EventSchemaVersion='0.2.2',
        EventSeverity = 'Informational', //??
        EventType = 'Flow',
        EventVendor = 'Microsoft',
        EventCount = toint(AllowedInFlows_d+DeniedInFlows_d+AllowedOutFlows_d+DeniedOutFlows_d),
        NetworkDuration = toint((((EventEndTime - datetime(1970-01-01)) / 1s) - ((EventStartTime - datetime(1970-01-01)) / 1s )) * 1000),
        Rule = NetworkRuleName,
        SessionId = NetworkSessionId
    | lookup DvcActionLookup on FlowStatus_s
    | extend 
        DstIpAddr = iff(isnotempty(DestIP_s),
                        DestIP_s,
                        split(DestPublicIPs_s, '|')[0]),
        Duration = NetworkDuration,
        NetworkBytes = tolong(DstBytes + SrcBytes),
        NetworkPackets = tolong(DstPackets + SrcPackets),
        SrcIpAddr = iff(isnotempty(SrcIP_s),
                        SrcIP_s,
                        split(SrcPublicIPs_s, '|')[0])
    | extend
        Dst = DstIpAddr,
        IpAddr = SrcIpAddr,
        Src = SrcIpAddr
    | lookup NetworkProtocolLookup on L4Protocol_s
    | project-keep
        Src*,
        Dst*,
        Event*,
        Dvc*,
        Network*,
        IpAddr,
        Hostname,
        Type,
        Duration,
        SessionId,
        _ResourceId,
        TimeGenerated
    | project-away *_s
    };
  parser (disabled)