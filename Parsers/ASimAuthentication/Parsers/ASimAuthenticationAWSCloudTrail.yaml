Parser:
  Title: Authentication ASIM parser for AWS sign-in logs
  Version: '0.1.1'
  LastUpdated: July 05, 2022
Product:
  Name: AWS
Normalization:
  Schema: Authentication
  Version: '0.1.1'
References:
- Title: ASIM Authentication Schema
  Link: https://aka.ms/ASimAuthenticationDoc
- Title: ASIM
  Link: https:/aka.ms/AboutASIM
- Title: User identity in CloudTrail events
  Link:  https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-event-reference-user-identity.html#cloudtrail-event-reference-user-identity-fields
Description: |
  This ASIM parser supports normalizing Amazon Web Service sign in logs, stored in the  AWSCloudTrail table, to the ASIM Authentication schema.
ParserName: ASimAuthenticationAWSCloudTrail
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
 let usertype_lookup = datatable (UserIdentityType:string, TargetUserType:string, TargetUsername:string) [
    'Root', 'Admin', 'Root',
    'IAMUser', 'Regular', '',
    'AWSService',  'Service Principal', ''
  ];
  let eventresultdetails_lookup = datatable (ErrorMessage:string, EventResultDetails:string) [
    'No username found in supplied account', 'No such user or password',
    'Failed authentication', 'Other'
  ];
  let parser=(disabled:bool=false){
  AWSCloudTrail | where not(disabled)
   | where EventName == 'ConsoleLogin'
     | extend
        EventVendor = 'AWS',
        EventProduct='CloudTrail',
        EventCount=int(1),
        EventSchemaVersion='0.1.1',
        EventSchema = 'Authentication',
        EventResult= iff (ResponseElements has_cs 'Success', 'Success', 'Failure'),
        EventStartTime=TimeGenerated,
        EventEndTime=TimeGenerated,
        EventType='Logon',
        TargetUserIdType = 'AWSId',
        LogonMethod=iff(AdditionalEventData has '"MFAUsed": "Yes"', 'MFA',''),
        SrcDeviceType = iff(AdditionalEventData has '"MobileVersion":"Yes"', 'Mobile Device', 'Computer'),
        TargetUsernameType = iff (UserIdentityUserName contains '@', 'UPN', 'Simple'),
        ArnUsername = split(UserIdentityArn, '/')[-1]
    | parse AdditionalEventData with * '"LoginTo":"' TargetUrl:string '"' *
    | lookup eventresultdetails_lookup on ErrorMessage
    | project-rename
        EventOriginalUid= AwsEventId,
        EventOriginalResultDetails= ErrorMessage,
        EventProductVersion = EventVersion,
        TargetSubscription = UserIdentityAccountId,
        TargetUserId = UserIdentityPrincipalid, // or should I use UserIdentityArn?
        SrcIpAddr = SourceIpAddress,
        TargeCloudRegion = AWSRegion,
        HttpUserAgent = UserAgent
      | lookup usertype_lookup on UserIdentityType // extends TargetUserType
      | extend 
        TargetUsername = coalesce(SessionIssuerUserName, UserIdentityUserName, ArnUsername, TargetUsername),
        LogonTarget=tostring(split(TargetUrl,'?')[0]),
        EventSeverity = iff(EventResult == 'Failure', 'Low','Informational')
      // -- Aliases
      | extend
          User=TargetUsername,
          Dvc=EventVendor,
          Dst=LogonTarget
      // -- Backward compatibility 
      | extend
          SrcDvcIpAddr = SrcIpAddr
      | project-away EventSource, EventTypeName, EventName, ResponseElements, AdditionalEventData, Session*, Category, ErrorCode, Aws*, ManagementEvent, OperationName, ReadOnly, RequestParameters, Resources, ServiceEventDetails, SharedEventId, SourceSystem, UserIdentity*, VpcEndpointId, APIVersion, RecipientAccountId, ArnUsername
      };
      parser (disabled=disabled) 