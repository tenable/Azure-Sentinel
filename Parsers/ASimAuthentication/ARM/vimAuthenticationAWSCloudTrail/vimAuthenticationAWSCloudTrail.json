{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2017-03-15-preview",
      "name": "[parameters('Workspace')]",
      "location": "[parameters('WorkspaceRegion')]",
      "resources": [
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "vimAuthenticationAWSCloudTrail",
          "dependsOn": [
            "[concat('Microsoft.OperationalInsights/workspaces/', parameters('Workspace'))]"
          ],
          "properties": {
            "etag": "*",
            "displayName": "Authentication ASIM filtering parser for AWS sign-in logs",
            "category": "ASIM",
            "FunctionAlias": "vimAuthenticationAWSCloudTrail",
            "query": "let usertype_lookup = datatable (UserIdentityType:string, TargetUserType:string, TargetUsername:string) [\n  'Root', 'Admin', 'Root',\n  'IAMUser', 'Regular', '',\n  'AWSService',  'Service Principal', ''\n];\nlet eventresultdetails_lookup = datatable (ErrorMessage:string, EventResultDetails:string) [\n  'No username found in supplied account', 'No such user or password',\n  'Failed authentication', 'Other'\n];\nlet parser= (\n  starttime:datetime=datetime(null), \n  endtime:datetime=datetime(null),\n  targetusername_has:string=\"*\", \n  disabled:bool=false\n)\n{\n  AWSCloudTrail | where not(disabled)\n  //  -- Pre filtering\n  | where \n    (isnull(starttime) or TimeGenerated >= starttime) \n    and (isnull(endtime) or TimeGenerated <= endtime) \n    and EventName == 'ConsoleLogin'\n    and (targetusername_has=='*' or SessionIssuerUserName has targetusername_has or UserIdentityUserName has targetusername_has)\n  //  -- end pre-filtering\n  | extend\n      EventVendor = 'AWS',\n      EventProduct='CloudTrail',\n      EventCount=int(1),\n      EventSchemaVersion='0.1.1',\n      EventSchema = 'Authentication',\n      EventResult= iff (ResponseElements has_cs 'Success', 'Success', 'Failure'),\n      EventStartTime=TimeGenerated,\n      EventEndTime=TimeGenerated,\n      EventType='Logon',\n      TargetUserIdType = 'AWSId',\n      LogonMethod=iff(AdditionalEventData has '\"MFAUsed\": \"Yes\"', 'MFA',''),\n      SrcDeviceType = iff(AdditionalEventData has '\"MobileVersion\":\"Yes\"', 'Mobile Device', 'Computer'),\n      TargetUsernameType = iff (UserIdentityUserName contains '@', 'UPN', 'Simple'),\n      ArnUsername = split(UserIdentityArn, '/')[-1]\n  | parse AdditionalEventData with * '\"LoginTo\":\"' TargetUrl:string '\"' *\n  | lookup eventresultdetails_lookup on ErrorMessage\n  | project-rename\n      EventOriginalUid= AwsEventId,\n      EventOriginalResultDetails= ErrorMessage,\n      EventProductVersion = EventVersion,\n      TargetSubscription = UserIdentityAccountId,\n      TargetUserId = UserIdentityPrincipalid, // or should I use UserIdentityArn?\n      SrcIpAddr = SourceIpAddress,\n      TargeCloudRegion = AWSRegion,\n      HttpUserAgent = UserAgent\n    | lookup usertype_lookup on UserIdentityType // extends TargetUserType\n    | extend \n      TargetUsername = coalesce(SessionIssuerUserName, UserIdentityUserName, ArnUsername, TargetUsername),\n      LogonTarget=tostring(split(TargetUrl,'?')[0]),\n      EventSeverity = iff(EventResult == 'Failure', 'Low','Informational')\n    // -- Aliases\n    | extend\n        User=TargetUsername,\n        Dvc=EventVendor,\n        Dst=LogonTarget\n    // -- Backward compatibility \n    | extend\n        SrcDvcIpAddr = SrcIpAddr\n    | project-away EventSource, EventTypeName, EventName, ResponseElements, AdditionalEventData, Session*, Category, ErrorCode, Aws*, ManagementEvent, OperationName, ReadOnly, RequestParameters, Resources, ServiceEventDetails, SharedEventId, SourceSystem, UserIdentity*, VpcEndpointId, APIVersion, RecipientAccountId, ArnUsername\n    };\n  parser (starttime=starttime, endtime=endtime, targetusername_has=targetusername_has, disabled=disabled) \n",
            "version": 1,
            "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),targetusername_has:string='*',disabled:bool=False"
          }
        }
      ]
    }
  ]
}