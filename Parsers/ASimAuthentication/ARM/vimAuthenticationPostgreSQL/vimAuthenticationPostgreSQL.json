{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2017-03-15-preview",
      "name": "[parameters('Workspace')]",
      "location": "[parameters('WorkspaceRegion')]",
      "resources": [
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "vimAuthenticationPostgreSQL",
          "dependsOn": [
            "[concat('Microsoft.OperationalInsights/workspaces/', parameters('Workspace'))]"
          ],
          "properties": {
            "etag": "*",
            "displayName": "Authentication ASIM filtering parser for PostgreSQL",
            "category": "ASIM",
            "FunctionAlias": "vimAuthenticationPostgreSQL",
            "query": "let PostgreSQLSignInAuthorized=(starttime:datetime=datetime(null), endtime:datetime=datetime(null), targetusername_has:string=\"*\", disabled:bool=false){\nPostgreSQL_CL | where not(disabled)\n// ************************************************************************* \n//      <Prefilterring>\n// *************************************************************************\n| where \n  (isnull(starttime) or TimeGenerated >= starttime)\n  and (isnull(endtime) or TimeGenerated <= starttime)\n  and (targetusername_has=='*' or RawData has targetusername_has)\n// ************************************************************************* \n//      </Prefilterring>\n// ************************************************************************* \n  | where RawData has 'connection authorized'\n  | extend\n  EventVendor = 'PostgreSQL'\n  , EventProduct = 'PostgreSQL'\n  , EventCount = int(1)\n  , EventSchema = 'Authentication'\n  , EventSchemaVersion = '0.1.1'\n  , EventResult = 'Success'\n  , EventStartTime = TimeGenerated\n  , EventEndTime = TimeGenerated\n  , EventType = 'Logon'\n  , DvcHostname = Computer\n  , DvcIpAddr = extract(@'\\d{1,3}\\.\\d{1.3}\\.\\d{1,3}\\.\\d{1,3}', 1, Computer)\n  , TargetUsernameType = 'Simple'\n  , TargetUsername = extract(@'user=(.*?)\\sdatabase', 1, RawData)\n  , EventOriginalRestultDetails = 'Connection authorized'\n// ********************** <Postfilterring> **********************************\n  | where (targetusername_has=='*' or TargetUsername has targetusername_has)\n// ********************** </Postfilterring> *********************************\n// ************************ \n//      <Aliases> \n// ************************\n| extend\n        User=TargetUsername\n      , Dvc=Computer\n// ************************ \n//      </Aliases> \n// ************************\n  | project-away Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId\n  };\nlet PostgreSQLAuthFailure1=(starttime:datetime=datetime(null), endtime:datetime=datetime(null), targetusername_has:string=\"*\", disabled:bool=false){\nPostgreSQL_CL | where not(disabled)\n// ************************************************************************* \n//      <Prefilterring>\n// *************************************************************************\n| where \n  (isnull(starttime) or TimeGenerated >= starttime)\n  and (isnull(endtime) or TimeGenerated <= starttime)\n  and (targetusername_has=='*' or RawData has targetusername_has)\n// ************************************************************************* \n//      </Prefilterring>\n// *************************************************************************\n  | where RawData has 'authentication failed'\n  | extend \n  EventVendor = 'PostgreSQL'\n  , EventProduct = 'PostgreSQL'\n  , EventCount = int(1)\n  , EventSchema = 'Authentication'\n  , EventSchemaVersion = '0.1.1'\n  , EventResult = 'Failure'\n  , EventStartTime = TimeGenerated\n  , EventEndTime = TimeGenerated\n  , EventType = 'Logon'\n  , DvcHostname = Computer\n  , DvcIpAddr = extract(@'\\d{1,3}\\.\\d{1.3}\\.\\d{1,3}\\.\\d{1,3}', 1, Computer)\n  , TargetUsernameType = 'Simple'\n  , TargetUsername = extract(@'for user\\s\"(.*?)\"', 1, RawData)\n  , EventResultDetails = 'No such user or password'\n  , EventOriginalRestultDetails = 'User authentication failed'\n// ********************** <Postfilterring> **********************************\n  | where (targetusername_has=='*' or TargetUsername has targetusername_has)\n// ********************** </Postfilterring> **********************************\n// ************************ \n//      <Aliases> \n// ************************\n| extend\n        User=TargetUsername\n      , Dvc=Computer\n// ************************ \n//      </Aliases> \n// ************************\n  | project-away Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId\n  };\nlet PostgreSQLAuthFailure2=(starttime:datetime=datetime(null), endtime:datetime=datetime(null), targetusername_has:string=\"*\", disabled:bool=false){\nPostgreSQL_CL | where not(disabled)\n// ************************************************************************* \n//      <Prefilterring>\n// *************************************************************************\n| where \n  (isnull(starttime) or TimeGenerated >= starttime)\n  and (isnull(endtime) or TimeGenerated <= starttime)\n  and (targetusername_has=='*' or RawData has targetusername_has)\n// ************************************************************************* \n//      </Prefilterring>\n// *************************************************************************\n  | where RawData has_all ('role', 'does', 'not', 'exist')\n  | extend \n  EventVendor = 'PostgreSQL'\n  , EventProduct = 'PostgreSQL'\n  , EventCount = int(1)\n  , EventSchema = 'Authentication'\n  , EventSchemaVersion = '0.1.1'\n  , EventResult = 'Failure'\n  , EventStartTime = TimeGenerated\n  , EventEndTime = TimeGenerated\n  , EventType = 'Logon'\n  , DvcHostname = Computer\n  , DvcIpAddr = extract(@'\\d{1,3}\\.\\d{1.3}\\.\\d{1,3}\\.\\d{1,3}', 1, Computer)\n  , TargetUsernameType = 'Simple'\n  , TargetUsername = extract(@'role\\s\"(.*?)\"\\sdoes', 1, RawData)\n  , EventResultDetails = 'No such user or password'\n  , EventOriginalRestultDetails = 'Role does not exist'\n  | project-away Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId\n// ********************** <Postfilterring> **********************************\n  | where (targetusername_has=='*' or TargetUsername has targetusername_has)\n// ********************** </Postfilterring> **********************************\n// ************************ \n//      <Aliases> \n// ************************\n| extend\n        User=TargetUsername\n      , Dvc=Computer\n// ************************ \n//      </Aliases> \n// ************************\n  | project-away Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId\n  };\nlet PostgreSQLAuthFailure3=(starttime:datetime=datetime(null), endtime:datetime=datetime(null), targetusername_has:string=\"*\", disabled:bool=false){\nPostgreSQL_CL | where not(disabled)\n// ************************************************************************* \n//      <Prefilterring>\n// *************************************************************************\n| where \n  (isnull(starttime) or TimeGenerated >= starttime)\n  and (isnull(endtime) or TimeGenerated <= starttime)\n  and (targetusername_has=='*' or RawData has targetusername_has)\n// ************************************************************************* \n//      </Prefilterring>\n// *************************************************************************\n  | where RawData has_all ('no', 'entry', 'user')\n  | extend \n  EventVendor = 'PostgreSQL'\n  , EventProduct = 'PostgreSQL'\n  , EventCount = int(1)\n  , EventSchema = 'Authentication'\n  , EventSchemaVersion = '0.1.1'\n  , EventResult = 'Failure'\n  , EventStartTime = TimeGenerated\n  , EventEndTime = TimeGenerated\n  , EventType = 'Logon'\n  , DvcHostname = Computer\n  , DvcIpAddr = extract(@'\\d{1,3}\\.\\d{1.3}\\.\\d{1,3}\\.\\d{1,3}', 1, Computer)\n  , TargetUsernameType = 'Simple'\n  , TargetUsername = extract(@'user\\s\"(.*?)\",', 1, RawData)\n  , SrcIpAddr = extract(@'host\\s\"(.*?)\",', 1, RawData)\n  , EventResultDetails = 'No such user or password'\n  , EventOriginalRestultDetails = 'No entry for user'\n// ********************** <Postfilterring> **********************************\n  | where (targetusername_has=='*' or TargetUsername has targetusername_has)\n// ********************** </Postfilterring> **********************************\n// ************************ \n//      <Aliases> \n// ************************\n| extend\n        User=TargetUsername\n      , Dvc=Computer\n// ************************ \n//      </Aliases> \n// ************************\n  | project-away Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId\n  };\nlet PostgreSQLDisconnect=(starttime:datetime=datetime(null), endtime:datetime=datetime(null), targetusername_has:string=\"*\", disabled:bool=false){\nPostgreSQL_CL | where not(disabled)\n// ************************************************************************* \n//      <Prefilterring>\n// *************************************************************************\n| where \n  (isnull(starttime) or TimeGenerated >= starttime)\n  and (isnull(endtime) or TimeGenerated <= starttime)\n  and (targetusername_has=='*' or RawData has targetusername_has)\n// ************************************************************************* \n//      </Prefilterring>\n// *************************************************************************\n  | where RawData has 'disconnection'\n  | extend \n  EventVendor = 'PostgreSQL'\n  , EventProduct = 'PostgreSQL'\n  , EventCount = int(1)\n  , EventSchema = 'Authentication'\n  , EventSchemaVersion = '0.1.1'\n  , EventResult = 'Success'\n  , EventStartTime = TimeGenerated\n  , EventEndTime = TimeGenerated\n  , EventType = 'Logoff'\n  , DvcHostname = Computer\n  , DvcIpAddr = extract(@'\\d{1,3}\\.\\d{1.3}\\.\\d{1,3}\\.\\d{1,3}', 1, Computer)\n  , TargetUsernameType = 'Simple'\n  , TargetUsername = extract(@'user=(.*?)\\sdatabase', 1, RawData)\n  , SrcIpAddr = extract(@'host=\\[?(.*?)\\]?', 1, RawData)\n  , EventResultDetails = 'Session expired'\n  , EventOriginalRestultDetails = 'User session closed'\n// ********************** <Postfilterring> **********************************\n  | where (targetusername_has=='*' or TargetUsername has targetusername_has)\n// ********************** </Postfilterring> **********************************\n// ************************ \n//      <Aliases> \n// ************************\n| extend\n        User=TargetUsername\n      , Dvc=Computer\n// ************************ \n//      </Aliases> \n// ************************\n  | project-away Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId\n  };\nunion isfuzzy=false PostgreSQLSignInAuthorized(starttime, endtime, targetusername_has, disabled)\n                ,  PostgreSQLAuthFailure1(starttime, endtime, targetusername_has, disabled)\n                ,  PostgreSQLAuthFailure2(starttime, endtime, targetusername_has, disabled)\n                ,  PostgreSQLAuthFailure3(starttime, endtime, targetusername_has, disabled)\n                ,  PostgreSQLDisconnect(starttime, endtime, targetusername_has, disabled)\n",
            "version": 1,
            "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),targetusername_has:string='*',disabled:bool=False"
          }
        }
      ]
    }
  ]
}
