{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2017-03-15-preview",
      "name": "[parameters('Workspace')]",
      "location": "[parameters('WorkspaceRegion')]",
      "resources": [
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "vimAuditEventMicrosoftWindowsEvents",
          "dependsOn": [
            "[concat('Microsoft.OperationalInsights/workspaces/', parameters('Workspace'))]"
          ],
          "properties": {
            "etag": "*",
            "displayName": "Audit Event ASIM filtering parser for Microsoft Windows Events audit events",
            "category": "ASIM",
            "FunctionAlias": "vimAuditEventMicrosoftWindowsEvents",
            "query": "let parser=  (\n     starttime:datetime=datetime(null), \n     endtime:datetime=datetime(null),\n     srcipaddr_has_any_prefix:dynamic=dynamic([]), \n     eventresult:string='*',\n     actorusername_has_any:dynamic=dynamic([]),\n     eventtype_in:dynamic=dynamic([]),\n     operation_has_any:dynamic=dynamic([]),\n     object_has_any:dynamic=dynamic([]),\n     newvalue_has_any:dynamic=dynamic([]),\n     disabled:bool = false\n ) {    \n union \n (\n     union \n     (\n         SecurityEvent\n         | where \n             (isnull(starttime) or TimeGenerated >= starttime) \n             and (isnull(endtime) or TimeGenerated <= endtime)\n             and not(disabled)\n         | project EventID, EventData, _ResourceId, TimeGenerated, Computer, Type\n         | where EventID == 1102\n     ),\n     (\n         Event\n         | where \n             (isnull(starttime) or TimeGenerated >= starttime) \n             and (isnull(endtime) or TimeGenerated <= endtime)\n             and not(disabled)\n         | project EventID, EventData, _ResourceId, TimeGenerated, Computer, Type\n         | where EventID == 1102\n     )\n     | where\n        (array_length(srcipaddr_has_any_prefix) == 0)\n        and (array_length(newvalue_has_any) == 0)\n        and (array_length(object_has_any) == 0 or \"Logs\" in (object_has_any))\n        and (array_length(operation_has_any) == 0 or \"Delete Logs\" has_any (operation_has_any))\n        and (array_length(eventtype_in) == 0 or \"Delete\" in (eventtype_in))\n        and (array_length(actorusername_has_any) == 0 or EventData has_any (actorusername_has_any))\n     | parse-kv EventData as \n         (\n             SubjectUserSid:string,\n             SubjectUserName:string,\n             SubjectDomainName:string,\n             SubjectLogonId:string\n         ) \n         with (regex=@'<(\\w+)>([^<]*)<')\n     | where \n         array_length(actorusername_has_any) == 0 \n         or SubjectUserName has_any (actorusername_has_any) \n         or SubjectDomainName has_any (actorusername_has_any)\n     | project-away EventData\n ),\n (\n     WindowsEvent \n     | where \n         (isnull(starttime) or TimeGenerated >= starttime) \n         and (isnull(endtime) or TimeGenerated <= endtime)\n         and not(disabled)\n     | project EventID, EventData, _ResourceId, TimeGenerated, Computer, Type\n     | where EventID == 1102\n     | where (array_length(srcipaddr_has_any_prefix) == 0)\n        and (array_length(newvalue_has_any) == 0)\n        and (array_length(object_has_any) == 0 or \"Logs\" in (object_has_any))\n        and (array_length(operation_has_any) == 0 or \"Delete Logs\" has_any (operation_has_any))\n        and (array_length(eventtype_in) == 0 or \"Delete\" in (eventtype_in))\n     | extend\n         SubjectUserSid = tostring(EventData.SubjectUserSid),\n         SubjectUserName = tostring(EventData.SubjectUserName),\n         SubjectDomainName = tostring(EventData.SubjectDomainName),\n         SubjectLogonId = tostring(EventData.SubjectLogonId)\n     | where \n         array_length(actorusername_has_any) == 0 \n         or SubjectUserName has_any (actorusername_has_any) \n         or SubjectUserName has_any (actorusername_has_any)\n     | project-away EventData\n )\n | project-rename\n     ActorUserId = SubjectUserSid,\n     DvcHostname = Computer,\n     ActorSessionId = SubjectLogonId,\n     DvcId = _ResourceId\n | extend\n     EventCount = int(1),\n     EventType = \"Delete\",\n     Operation = \"Delete Logs\",\n     Object = \"Logs\",\n     EventResult = \"Success\",\n     EventStartTime = TimeGenerated, \n     EventEndTime= TimeGenerated,\n     EventProduct = 'Windows',\n     EventVendor = 'Microsoft',\n     EventSchemaVersion = '0.1.0',\n     EventSchema = 'AuditEvent',\n     ActorUserIdType = 'SID',\n     ActorUsername = iff (SubjectDomainName == \"\", SubjectUserName, strcat (SubjectDomainName, '\\\\', SubjectUserName)),\n     ActorUsernameType = iff (SubjectDomainName == \"\", 'Simple', 'Windows'),\n     DvcIdType = iff (DvcId == \"\", \"\", \"AzureResourceID\"),\n     EventOriginalType = tostring(EventID)\n // Aliases\n | extend \n     User=ActorUsername,\n     ActorUserSid = ActorUserId,\n     Dvc = DvcHostname\n | project-away Subject*, EventID\n};\nparser (\n   starttime = starttime,\n   endtime = endtime,\n   srcipaddr_has_any_prefix = srcipaddr_has_any_prefix,\n   actorusername_has_any = actorusername_has_any,\n   eventtype_in = eventtype_in,\n   eventresult = eventresult,\n   operation_has_any = operation_has_any,\n   object_has_any=object_has_any,\n   newvalue_has_any=newvalue_has_any,\n   disabled=disabled\n)",
            "version": 1,
            "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr_has_any_prefix:dynamic=dynamic([]),actorusername_has_any:dynamic=dynamic([]),operation_has_any:dynamic=dynamic([]),eventtype_in:dynamic=dynamic([]),eventresult:string='*',object_has_any:dynamic=dynamic([]),newvalue_has_any:dynamic=dynamic([]),disabled:bool=False"
          }
        }
      ]
    }
  ]
}