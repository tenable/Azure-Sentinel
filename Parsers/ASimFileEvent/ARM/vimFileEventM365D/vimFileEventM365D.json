{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2017-03-15-preview",
      "name": "[parameters('Workspace')]",
      "location": "[parameters('WorkspaceRegion')]",
      "resources": [
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "vimFileEventM365D",
          "dependsOn": [
            "[concat('Microsoft.OperationalInsights/workspaces/', parameters('Workspace'))]"
          ],
          "properties": {
            "etag": "*",
            "displayName": "File Activity ASIM parser for Sysmon for M365 Defender for Endpoint",
            "category": "ASIM",
            "FunctionAlias": "vimFileEventM365D",
            "query": "let ASIM_ResolveDvcFQDN = (T:(*), field:string) {\n  T\n  | extend ExtractedHostname = column_ifexists (field,'')\n  | extend SplitHostname = split(ExtractedHostname,\".\")\n  | extend \n      DvcDomain = tostring(strcat_array(array_slice(SplitHostname, 1, -1), '.')),\n      DvcFQDN = iif (array_length(SplitHostname) > 1, ExtractedHostname, ''),\n      DvcDomainType = iif (array_length(SplitHostname) > 1, 'FQDN', '')\n  | extend\n      DvcHostname = tostring(SplitHostname[0])    \n  | project-away SplitHostname\n};\nlet parser=(){\n  DeviceFileEvents\n  | project-rename\n     SrcIpAddr = RequestSourceIP, \n     DvcId = DeviceId,\n     TargetFileMD5 = MD5,\n     TargetFileSHA1 = SHA1,\n     TargetFileSHA256 = SHA256,\n     NetworkApplicationProtocol = RequestProtocol,\n     ActingProcessCommandLine = InitiatingProcessCommandLine,\n     ActingProcessName =InitiatingProcessFolderPath, // Unlike FileName ActingProcessName includes full path  // Previously: ActingProcessFileName=initiatingProcessFileName\n     ActingProcessMD5 = InitiatingProcessMD5,\n     ActingProcessSHA1 = InitiatingProcessSHA1,\n     ActingProcessSHA256 = InitiatingProcessSHA256,\n     ActingProcessParentFileName = InitiatingProcessParentFileName,\n     ActingProcessCreationTime = InitiatingProcessCreationTime,\n     ActingProcessParentCreationTime = InitiatingProcessParentCreationTime,\n     ActorUserSid = InitiatingProcessAccountSid,\n     ActorUserAadId = InitiatingProcessAccountObjectId,\n     ActorUserUpn = InitiatingProcessAccountUpn\n  | extend \n     ActorWindowsUsername = strcat(InitiatingProcessAccountDomain,'\\\\', InitiatingProcessAccountName) // -- Copy to process\n  | extend\n     EventCount = int(1),\n     EventOriginalUid = tostring(ReportId),\n     ActingProcessId = tostring(InitiatingProcessId),\n     EventStartTime = TimeGenerated, \n     EventEndTime= TimeGenerated,\n     EventType=ActionType, // [FileCreated, FileDeleted, FileModified, FileRenamed] \n     EventResult = 'Success',\n     EventProduct = 'M365 Defender for Endpoint',\n     EventVendor = 'Microsoft',\n     EventSchemaVersion = '0.1.0',\n     ActorUsername = coalesce(ActorUserUpn, ActorWindowsUsername), // -- Copy to process as well.\n     ActorUsernameType = iff(isempty(ActorUserUpn), 'Windows', 'Upn'), // -- Copy to process as well.\n     ActorUserId = coalesce(ActorUserAadId, ActorUserSid), // -- copy to process as well\n     ActorUserIdType = iff(isempty(ActorUserSid),'AADID','SID'), // -- copy to process as well\n     TargetFilePath = iff(ActionType=='FileDeleted', strcat(FolderPath, '\\\\', FileName), FolderPath),\n     TargetFilePathType = 'Windows Local',\n     SrcFileName = coalesce(PreviousFileName,tostring(split(trim_end(@'/',tostring(split (FileOriginUrl,'?')[0] )),'/')[-1])),\n     SrcFilePath = iff(isempty(PreviousFileName), trim_end(@'/',tostring(split (FileOriginUrl,'?')[0] )),strcat(PreviousFolderPath,'\\\\',PreviousFileName)),\n     Hash=coalesce(ActingProcessSHA256, ActingProcessSHA1, ActingProcessMD5)\n   | invoke ASIM_ResolveDvcFQDN('DeviceName')\n   | extend\n       HashType = tostring(dynamic([\"SHA256\", \"SHA1\", \"MD5\"])[array_index_of(pack_array(ActingProcessSHA256, ActingProcessSHA1, ActingProcessMD5),Hash)])     \n   //  ****** Aliases\n   | extend \n      User=ActorUsername,\n      Dvc=DvcHostname,\n      FilePath=TargetFilePath,\n      Process = ActingProcessName,\n      CommandLine = ActingProcessCommandLine\n   //| project-away\n   //   Initiating*, ReportId\n  };\n  parser",
            "version": 1
          }
        }
      ]
    }
  ]
}