Parser:
  Title: Web Session ASIM parser for Vectra AI streams
  Version: '0.2'
  LastUpdated: Dec 28 2022
Product:
  Name: Vectra AI Streams
Normalization:
  Schema: WebSession
  Version: '0.2.3'
References:
- Title: ASIM Web Session Schema
  Link: https://aka.ms/ASimWebSessionDoc
- Title: ASIM
  Link: https:/aka.ms/AboutASIM
- Title: Zscaler Connector
  Link: https://docs.microsoft.com/azure/sentinel/data-connectors-reference#zscaler
- Title: Zscaler Sentinel deployment guide
  Link: https://help.zscaler.com/zia/zscaler-microsoft-azure-sentinel-deployment-guide
Description: |
  This ASIM parser supports normalizing Vectra AI Streams logs produced to the ASIM Web Session normalized schema.
ParserName: ASimWebSessionVectraAI
EquivalentBuiltInParser: _ASim_WebSession_VectraAI

ParserParams:
  - Name: disabled
    Type: bool
    Default: false
  - Name: pack
    Type: bool
    Default: false

ParserQuery: |
  let parser = (disabled: bool = false, pack:bool = false)
  {
    let NetworkDirectionLookup = datatable(local_orig_b:bool, local_resp_b:bool, NetworkDirection:string)
    [
        false, true, 'Inbound',
        true, false, 'Outbound',
        true, true, 'Local',
        false, false, 'Local'
    ];
    let NetworkProtocolVersionLookup = datatable(id_ip_ver_s:string, NetworkApplicationProtocol:string)
    [
        'ipv4', 'IPv4',
        'ipv6', 'IPv6'
    ];
    let HostnameRegex = @'^[a-zA-Z0-9-]{1,61}$';
    VectraStream_CL
    | where metadata_type_s == 'metadata_httpsessioninfo'
    | extend EventResult = iff(tolong(status_code_d) >= 400, "Failure", "Success")
    | project-rename
        DvcDescription = hostname_s,
        DstDescription = resp_hostname_s,
        SrcDescription = orig_hostname_s,
        DstIpAddr = id_resp_h_s,
        EventOriginalUid = uid_s,
        HttpContentType = resp_mime_types_s,
        HttpReferrer = referrer_s,
        HttpRequestMethod = method_s,
        HttpUserAgent = user_agent_s,
        DvcId = sensor_uid_s,
        // -- community id is just a hash of addresses and ports, and not unique for the session
        // NetworkSessionId = community_id_s,
        SrcIpAddr = id_orig_h_s,
        SrcSessionId = orig_sluid_s,
        DstSessionId = resp_sluid_s,
        HttpResponseCacheControl = response_cache_control_s,
        HttpRequestCacheControl = request_cache_control_s,
        HttpCookie = cookie_s,
        HttpResponseExpires = response_expires_s,
        HttpIsProxied = is_proxied_b,
        EventOriginalResultDetails = status_msg_s
    | extend
        DstHostname = iff (DstDescription startswith "IP-" or not(DstDescription matches regex HostnameRegex), "", DstDescription),
        SrcHostname = iff (SrcDescription startswith "IP-" or not(SrcDescription matches regex HostnameRegex), "", SrcDescription),
        DvcHostname = iff (DvcDescription startswith "IP-" or not(DvcDescription matches regex HostnameRegex), "", DvcDescription),
        DstBytes = tolong(resp_ip_bytes_d),
        DstPackets = tolong(resp_pkts_d),
        DstPortNumber = toint(id_resp_p_d),
        EventCount = toint(1),
        EventStartTime = unixtime_milliseconds_todatetime(ts_d),
        EventOriginalSubType = tostring(split(metadata_type_s, '_')[1]),
        EventProduct = 'Vectra Stream',
        EventResultDetails = tostring(toint(status_code_d)),
        HttpRequestBodyBytes = tolong(request_body_len_d),
        HttpResponseBodyBytes = tolong(response_body_len_d),
        HttpRequestHeaderCount = toint(request_header_count_d),
        HttpResponseHeaderCount = toint(response_header_count_d),
        EventSchema = 'WebSession',
        EventSchemaVersion='0.2.3',
        DvcIdType = 'VectraId',
        EventSeverity = iff (EventResult == 'Success', 'Informational', 'Low'),
        EventType = 'HTTPsession',
        EventVendor = 'Vectra AI',
        SrcBytes = tolong(orig_ip_bytes_d),
        SrcPackets = tolong(orig_pkts_d),
        SrcPortNumber = toint(id_orig_p_d),
        Url = strcat('http://', host_s, uri_s)
    | lookup NetworkDirectionLookup on local_orig_b, local_resp_b
    | lookup NetworkProtocolVersionLookup on id_ip_ver_s
    // -- preserving non-normalized important fields
    | extend AdditionalFields = iff (
        pack, 
        bag_pack (
          "first_orig_resp_data_pkt", first_orig_resp_data_pkt_s,
          "first_resp_orig_data_pkt", first_resp_orig_data_pkt_s,
          "orig_huid", orig_huid_s,
          "resp_huid", resp_huid_s,
          "community_id", community_id_s,
          "resp_multihome", resp_multihomed_b,
          "host_multihomed", host_multihomed_b,
          "first_orig_resp_data_pkt_time", unixtime_milliseconds_todatetime(first_orig_resp_data_pkt_time_d),
          "first_orig_resp_pkt_time", unixtime_milliseconds_todatetime(first_orig_resp_pkt_time_d),
          "first_resp_orig_data_pkt_time", unixtime_milliseconds_todatetime(first_resp_orig_data_pkt_time_d),
          "first_resp_orig_pkt_time", unixtime_milliseconds_todatetime(first_resp_orig_pkt_time_d)
        ),
        dynamic([])
      )
    | project-away
        *_d, *_s, *_b, *_g, Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId
    | extend
        Dst = DstIpAddr,
        Dvc = DvcId,
        EventEndTime = EventStartTime,
        Hostname = DstHostname,
        HttpStatusCode = EventResultDetails,
        IpAddr = SrcIpAddr,
        NetworkBytes = SrcBytes + DstBytes,
        NetworkPackets = SrcPackets + DstPackets,
        //SessionId = NetworkSessionId,
        Src = SrcIpAddr,
        UserAgent = HttpUserAgent 
  };
  parser (disabled=disabled, pack=pack)